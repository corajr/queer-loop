// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var UserMedia$QueerLoop = require("./UserMedia.bs.js");

function makeDefaultAudioCtx (){return new (window.AudioContext || window.webkitAudioContext)()};

function string_of_oscillatorType(param) {
  if (typeof param !== "number") {
    return "custom";
  }
  switch (param) {
    case /* Sine */0 :
        return "sine";
    case /* Square */1 :
        return "square";
    case /* Sawtooth */2 :
        return "sawtooth";
    case /* Triangle */3 :
        return "triangle";
    
  }
}

function oscillatorType_of_string(param) {
  switch (param) {
    case "sawtooth" :
        return /* Sawtooth */2;
    case "sine" :
        return /* Sine */0;
    case "square" :
        return /* Square */1;
    case "triangle" :
        return /* Triangle */3;
    default:
      return /* Sine */0;
  }
}

function noteToFrequency(note) {
  return 440.0 * Math.pow(2.0, (note - 69.0) / 12.0);
}

function yToFrequency(binsPerSemitone, offset, height) {
  var fBinsPerSemitone = binsPerSemitone;
  var offset$1 = offset;
  return (function (y) {
      return noteToFrequency((height - y | 0) / fBinsPerSemitone + offset$1);
    });
}

function qForBinsPerOctave(binsPerOctave) {
  return 1.0 / (Math.pow(2.0, 1.0 / binsPerOctave) - 1.0);
}

var defaultQ = qForBinsPerOctave(48);

var defaultCompressorValues = {
  threshold: -12.0,
  knee: 0.0,
  ratio: 20.0,
  attack: 0.01,
  release: 0.05
};

function makeCompressor(audioCtx, paramValuesOpt) {
  var paramValues = paramValuesOpt !== undefined ? paramValuesOpt : defaultCompressorValues;
  var compressor = audioCtx.createDynamicsCompressor();
  var t = audioCtx.currentTime;
  compressor.threshold.setValueAtTime(paramValues.threshold, t);
  compressor.knee.setValueAtTime(paramValues.knee, t);
  compressor.attack.setValueAtTime(paramValues.attack, t);
  compressor.release.setValueAtTime(paramValues.release, t);
  return compressor;
}

function pinkNoiseFull (audioCtx){
     var bufferSize = 4096;
     return (function() {
     var b0, b1, b2, b3, b4, b5, b6;
     b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;
     var node = audioCtx.createScriptProcessor(bufferSize, 1, 1);
     node.onaudioprocess = function(e) {
     var output = e.outputBuffer.getChannelData(0);
     for (var i = 0; i < bufferSize; i++) {
     var white = Math.random() * 2 - 1;
     b0 = 0.99886 * b0 + white * 0.0555179;
     b1 = 0.99332 * b1 + white * 0.0750759;
     b2 = 0.96900 * b2 + white * 0.1538520;
     b3 = 0.86650 * b3 + white * 0.3104856;
     b4 = 0.55000 * b4 + white * 0.5329522;
     b5 = -0.7616 * b5 - white * 0.0168980;
     output[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;
     output[i] *= 0.11; // (roughly) compensate for gain
     b6 = white * 0.115926;
     }
     }
     return node;
     })();
     };

function cheaperPinkNoise (audioCtx){
     var bufferSize = 4096;
     return (function() {
     var b0, b1, b2;
     b0 = b1 = b2 = 0.0;
     var node = audioCtx.createScriptProcessor(bufferSize, 1, 1);
     node.onaudioprocess = function(e) {
     var output = e.outputBuffer.getChannelData(0);
     for (var i = 0; i < bufferSize; i++) {
     var white = Math.random() * 2 - 1;
     b0 = 0.99765 * b0 + white * 0.0990460;
     b1 = 0.96300 * b1 + white * 0.2965164;
     b2 = 0.57000 * b2 + white * 1.0526913;
     output[i] = b0 + b1 + b2 + white * 0.1848;
     }
     }
     return node;
     })();
     };

function whiteNoise (audioCtx){
     var bufferSize = 4096;
     return (function() {
     var node = audioCtx.createScriptProcessor(bufferSize, 1, 1);
     node.onaudioprocess = function(e) {
     var output = e.outputBuffer.getChannelData(0);
     for (var i = 0; i < bufferSize; i++) {
     var white = Math.random() * 2 - 1;
     output[i] = white;
     }
     }
     return node;
     })();
     };

function makeAnalyser(fftSizeOpt, minDecibelsOpt, maxDecibelsOpt, smoothingTimeConstantOpt, audioContext) {
  var fftSize = fftSizeOpt !== undefined ? fftSizeOpt : 2048;
  var minDecibels = minDecibelsOpt !== undefined ? minDecibelsOpt : -100.0;
  var maxDecibels = maxDecibelsOpt !== undefined ? maxDecibelsOpt : -30.0;
  var smoothingTimeConstant = smoothingTimeConstantOpt !== undefined ? smoothingTimeConstantOpt : 0.8;
  var analyser = audioContext.createAnalyser();
  analyser.fftSize = fftSize;
  analyser.minDecibels = minDecibels;
  analyser.maxDecibels = maxDecibels;
  analyser.smoothingTimeConstant = smoothingTimeConstant;
  return analyser;
}

function setOscillatorType(audioCtx, oscillator, type_) {
  oscillator.type = string_of_oscillatorType(type_);
  if (typeof type_ === "number") {
    return ;
  }
  var desc = type_[0];
  var periodicWave = audioCtx.createPeriodicWave(desc.real, desc.imag);
  oscillator.setPeriodicWave(periodicWave);
  
}

function makeOscillator(frequencyOpt, type_Opt, audioCtx) {
  var frequency = frequencyOpt !== undefined ? frequencyOpt : 440.0;
  var type_ = type_Opt !== undefined ? type_Opt : /* Sine */0;
  var oscillator = audioCtx.createOscillator();
  var t = audioCtx.currentTime;
  oscillator.frequency.setValueAtTime(frequency, t);
  setOscillatorType(audioCtx, oscillator, type_);
  return oscillator;
}

function string_of_filterType(filterType) {
  switch (filterType.tag | 0) {
    case /* LowPass */0 :
        return "lowpass";
    case /* HighPass */1 :
        return "highpass";
    case /* BandPass */2 :
        return "bandpass";
    case /* LowShelf */3 :
        return "lowshelf";
    case /* HighShelf */4 :
        return "highshelf";
    case /* Peaking */5 :
        return "peaking";
    case /* Notch */6 :
        return "notch";
    case /* AllPass */7 :
        return "allpass";
    
  }
}

function makeFilter(audioCtx, filterType) {
  var filter = audioCtx.createBiquadFilter();
  filter.type = string_of_filterType(filterType);
  var t = audioCtx.currentTime;
  var exit = 0;
  switch (filterType.tag | 0) {
    case /* LowShelf */3 :
    case /* HighShelf */4 :
        exit = 1;
        break;
    case /* Peaking */5 :
        filter.frequency.setValueAtTime(filterType[0], t);
        filter.Q.setValueAtTime(filterType[1], t);
        filter.gain.setValueAtTime(filterType[2], t);
        break;
    default:
      filter.frequency.setValueAtTime(filterType[0], t);
      filter.Q.setValueAtTime(filterType[1], t);
  }
  if (exit === 1) {
    filter.frequency.setValueAtTime(filterType[0], t);
    filter.gain.setValueAtTime(filterType[1], t);
  }
  return filter;
}

function makeBankOf(audioCtx, n, hasInput, f) {
  var input = hasInput ? Caml_option.some(audioCtx.createGain()) : undefined;
  var output = audioCtx.createGain();
  var t = audioCtx.currentTime;
  var createNode = input !== undefined ? (function (i) {
        var node = Curry._2(f, audioCtx, i);
        input.connect(node);
        return node;
      }) : Curry._1(f, audioCtx);
  var nodes = $$Array.init(n, createNode);
  var gains = $$Array.map((function (node) {
          var gainNode = audioCtx.createGain();
          gainNode.gain.setValueAtTime(0.0, t);
          node.connect(gainNode);
          gainNode.connect(output);
          return gainNode;
        }), nodes);
  return {
          input: input,
          nodes: nodes,
          gains: gains,
          output: output,
          audioCtx: audioCtx
        };
}

function makeFilterBank(audioCtx, filterN, q, freqFunc) {
  var createNode = function (audioCtx, i) {
    return makeFilter(audioCtx, /* BandPass */Block.__(2, [
                  Curry._1(freqFunc, filterN - i | 0),
                  q
                ]));
  };
  return makeBankOf(audioCtx, filterN, true, createNode);
}

function makeOscillatorBank(audioCtx, n, type_, freqFunc) {
  var createNode = function (audioCtx, i) {
    return makeOscillator(Curry._1(freqFunc, n - i | 0), type_, audioCtx);
  };
  var bank = makeBankOf(audioCtx, n, false, createNode);
  var t = audioCtx.currentTime;
  bank.output.gain.setValueAtTime(0.007, t);
  return bank;
}

function getAudioSource(ctx) {
  return UserMedia$QueerLoop.getAudioStream(undefined).then((function (mediaStream) {
                  return Promise.resolve(ctx.createMediaStreamSource(mediaStream));
                })).catch((function (err) {
                console.log(err);
                return Promise.resolve(undefined);
              }));
}

function connectFilterBank(noise, filterBank, merger, channel) {
  var input = filterBank.input;
  if (input !== undefined) {
    noise.connect(Caml_option.valFromOption(input));
  }
  filterBank.output.connect(merger, 0, channel);
  
}

function disconnectFilterBank(noise, filterBank, merger) {
  var input = filterBank.input;
  if (input !== undefined) {
    noise.disconnect(Caml_option.valFromOption(input));
  }
  filterBank.output.disconnect((function (prim, prim$1, prim$2, prim$3, prim$4) {
          return {
                  threshold: prim,
                  knee: prim$1,
                  ratio: prim$2,
                  attack: prim$3,
                  release: prim$4
                };
        }));
  
}

function updateBankGains(bank, gainValues) {
  var t = bank.audioCtx.currentTime;
  var n = gainValues.length;
  for(var i = 0; i < n; ++i){
    var gainI = (n - i | 0) - 1 | 0;
    Caml_array.caml_array_get(bank.gains, gainI).gain.linearRampToValueAtTime(Caml_array.caml_array_get(gainValues, i), t + 0.05);
  }
  
}

function updateFilterBank(inputGainOpt, outputGainOpt, filterBank, filterValues, param) {
  var inputGain = inputGainOpt !== undefined ? inputGainOpt : 1.0;
  var outputGain = outputGainOpt !== undefined ? outputGainOpt : 0.1;
  var currentTime = filterBank.audioCtx.currentTime;
  var input = filterBank.input;
  if (input !== undefined) {
    Caml_option.valFromOption(input).gain.setValueAtTime(inputGain, currentTime);
  }
  filterBank.output.gain.setValueAtTime(outputGain, currentTime);
  return updateBankGains(filterBank, filterValues);
}

function updateFilterBankDefinition(filterBank, freqFunc, q) {
  console.log("updating filter bank definitions (costly!)");
  var currentTime = filterBank.audioCtx.currentTime;
  var n = filterBank.nodes.length;
  return $$Array.iteri((function (i, filter) {
                filter.Q.setValueAtTime(q, currentTime);
                filter.frequency.setValueAtTime(Curry._1(freqFunc, (n - i | 0) - 1 | 0), currentTime);
                
              }), filterBank.nodes);
}

var midiNoteA440Hz = 69.0;

var pinkNoise = pinkNoiseFull;

exports.makeDefaultAudioCtx = makeDefaultAudioCtx;
exports.string_of_oscillatorType = string_of_oscillatorType;
exports.oscillatorType_of_string = oscillatorType_of_string;
exports.midiNoteA440Hz = midiNoteA440Hz;
exports.noteToFrequency = noteToFrequency;
exports.yToFrequency = yToFrequency;
exports.qForBinsPerOctave = qForBinsPerOctave;
exports.defaultQ = defaultQ;
exports.defaultCompressorValues = defaultCompressorValues;
exports.makeCompressor = makeCompressor;
exports.pinkNoiseFull = pinkNoiseFull;
exports.cheaperPinkNoise = cheaperPinkNoise;
exports.pinkNoise = pinkNoise;
exports.whiteNoise = whiteNoise;
exports.makeAnalyser = makeAnalyser;
exports.setOscillatorType = setOscillatorType;
exports.makeOscillator = makeOscillator;
exports.string_of_filterType = string_of_filterType;
exports.makeFilter = makeFilter;
exports.makeBankOf = makeBankOf;
exports.makeFilterBank = makeFilterBank;
exports.makeOscillatorBank = makeOscillatorBank;
exports.getAudioSource = getAudioSource;
exports.connectFilterBank = connectFilterBank;
exports.disconnectFilterBank = disconnectFilterBank;
exports.updateBankGains = updateBankGains;
exports.updateFilterBank = updateFilterBank;
exports.updateFilterBankDefinition = updateFilterBankDefinition;
/* defaultQ Not a pure module */
