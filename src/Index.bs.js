// Generated by BUCKLESCRIPT VERSION 5.0.2, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var ElementRe = require("bs-webapi/src/dom/nodes/ElementRe.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Hash$QueerLoop = require("./Hash.bs.js");
var Util$QueerLoop = require("./Util.bs.js");
var Scanner$QueerLoop = require("./Scanner.bs.js");
var QrCodeGen$QueerLoop = require("./QrCodeGen.bs.js");
var QueerCode$QueerLoop = require("./QueerCode.bs.js");
var UserMedia$QueerLoop = require("./UserMedia.bs.js");

var domain = "qqq.lu";

function setBackground(selector, bgCss) {
  return Util$QueerLoop.withQuerySelector(selector, (function (el) {
                el.style.setProperty("background", bgCss, "");
                return /* () */0;
              }));
}

var codeRegex = new RegExp("https:\\/\\/qqq.lu\\/#(.+)");

var defaultCode = QrCodeGen$QueerLoop.QrCode[/* _encodeText */0]("https://qqq.lu", QrCodeGen$QueerLoop.Ecc[/* low */0]);

var defaultColor = "fff";

function getNextHashInc(current) {
  var i;
  try {
    i = Caml_format.caml_int_of_string("0x" + current.slice(1));
  }
  catch (exn){
    i = 0;
  }
  return Promise.resolve(Curry._1(Printf.sprintf(/* Format */[
                      /* Char_literal */Block.__(12, [
                          /* "#" */35,
                          /* Int */Block.__(4, [
                              /* Int_x */6,
                              /* Lit_padding */Block.__(0, [
                                  /* Zeros */2,
                                  3
                                ]),
                              /* No_precision */0,
                              /* End_of_format */0
                            ])
                        ]),
                      "#%03x"
                    ]), (i + 1 | 0) % 4096));
}

var camerasRef = /* record */[/* contents : array */[]];

var cameraIndex = /* record */[/* contents */0];

function cycleCameras(scanner) {
  var n = camerasRef[0].length;
  cameraIndex[0] = Caml_int32.mod_(cameraIndex[0] + 1 | 0, n);
  return /* () */0;
}

function setSrc (img,src){
     img.src = src;};

var previousCodes = /* record */[/* contents : [] */0];

function onHashChange(param) {
  var hash = window.location.hash;
  var match = (/^#[0-9a-f]+$/).test(hash);
  (
      match ? Promise.resolve(hash.slice(1)) : Hash$QueerLoop.hexDigest("SHA-256", hash)
    ).then((function (hexHash) {
          setBackground("body", "#" + hexHash.slice(0, 6));
          return Promise.resolve(/* () */0);
        }));
  Util$QueerLoop.withQuerySelector("#codeContents", (function (contents) {
          contents.innerText = decodeURIComponent(hash);
          return /* () */0;
        }));
  var code = Belt_Option.getWithDefault(QrCodeGen$QueerLoop.QrCode[/* encodeText */1]("https://" + (domain + ("/" + hash)), QrCodeGen$QueerLoop.Ecc[/* medium */1]), defaultCode);
  Belt_Option.map(Caml_option.nullable_to_opt(document.querySelector("#codeCanvas")), (function (canvas) {
          QueerCode$QueerLoop.drawCanvas(canvas, code);
          var url = canvas.toDataURL();
          previousCodes[0] = /* :: */[
            url,
            previousCodes[0]
          ];
          return /* () */0;
        }));
  Util$QueerLoop.withQuerySelector("#current", (function (img) {
          var url = QueerCode$QueerLoop.getSvgDataUri(code, $$Array.of_list(List.rev(previousCodes[0])));
          return setSrc(img, url);
        }));
  return /* () */0;
}

function setOpacity(elQuery, opacity) {
  return Belt_Option.map(Belt_Option.flatMap(Caml_option.nullable_to_opt(document.querySelector(elQuery)), ElementRe.asHtmlElement), (function (body) {
                body.style.setProperty("opacity", Pervasives.string_of_float(opacity), "");
                return /* () */0;
              }));
}

function onTick(ts) {
  var scaled = ts * 0.0005;
  var codeOpacity = 0.5 + Math.pow(Math.sin(scaled), 2.0) * 0.5;
  var maybeCanvas = document.querySelector("#codeCanvas");
  if (!(maybeCanvas == null)) {
    var ctx = maybeCanvas.getContext("2d");
    ctx.globalAlpha = codeOpacity;
  }
  requestAnimationFrame(onTick);
  return /* () */0;
}

function init(param) {
  document.querySelector("#previous");
  var initialHash = window.location.hash;
  if (initialHash === "") {
    window.location.hash = defaultColor;
  } else {
    onHashChange(/* () */0);
  }
  var response = function (input) {
    Hash$QueerLoop.hexDigest("SHA-256", window.location.hash + input).then((function (hexHash) {
            window.location.hash = hexHash;
            return Promise.resolve(/* () */0);
          }));
    return /* () */0;
  };
  UserMedia$QueerLoop.getCameras(/* () */0).then((function (cameras) {
            camerasRef[0] = cameras;
            return Promise.all($$Array.map((function (camera) {
                              var videoEl = document.createElement("video");
                              Util$QueerLoop.withQuerySelector("body", (function (body) {
                                      body.appendChild(videoEl);
                                      return /* () */0;
                                    }));
                              Scanner$QueerLoop.scanUsingDeviceId(videoEl, camera.deviceId, response);
                              return Promise.resolve(/* () */0);
                            }), cameras));
          })).catch((function (err) {
          console.error("getCameras failed", err);
          return Promise.resolve(/* array */[]);
        }));
  return /* () */0;
}

window.addEventListener("load", (function (param) {
        return init(/* () */0);
      }));

window.addEventListener("hashchange", (function (param) {
        return onHashChange(/* () */0);
      }));

var defaultHash = defaultColor;

exports.domain = domain;
exports.setBackground = setBackground;
exports.codeRegex = codeRegex;
exports.defaultCode = defaultCode;
exports.defaultColor = defaultColor;
exports.defaultHash = defaultHash;
exports.getNextHashInc = getNextHashInc;
exports.camerasRef = camerasRef;
exports.cameraIndex = cameraIndex;
exports.cycleCameras = cycleCameras;
exports.setSrc = setSrc;
exports.previousCodes = previousCodes;
exports.onHashChange = onHashChange;
exports.setOpacity = setOpacity;
exports.onTick = onTick;
exports.init = init;
/* codeRegex Not a pure module */
