// Generated by BUCKLESCRIPT VERSION 5.0.2, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Debouncer = require("re-debouncer/src/Debouncer.bs.js");
var ElementRe = require("bs-webapi/src/dom/nodes/ElementRe.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Belt_SetString = require("bs-platform/lib/js/belt_SetString.js");
var Hash$QueerLoop = require("./Hash.bs.js");
var Util$QueerLoop = require("./Util.bs.js");
var Scanner$QueerLoop = require("./Scanner.bs.js");
var QrCodeGen$QueerLoop = require("./QrCodeGen.bs.js");
var QueerCode$QueerLoop = require("./QueerCode.bs.js");
var UserMedia$QueerLoop = require("./UserMedia.bs.js");

var domain = "qqq.lu";

function setBackground(selector, bgCss) {
  return Util$QueerLoop.withQuerySelector(selector, (function (el) {
                el.style.setProperty("background", bgCss, "");
                return /* () */0;
              }));
}

var codeRegex = new RegExp("https:\\/\\/qqq.lu\\/#(.+)");

var defaultCode = QrCodeGen$QueerLoop.QrCode[/* _encodeText */0]("https://qqq.lu", QrCodeGen$QueerLoop.Ecc[/* low */0]);

var camerasRef = /* record */[/* contents : array */[]];

var cameraIndex = /* record */[/* contents */0];

function cycleCameras(scanner) {
  var n = camerasRef[0].length;
  cameraIndex[0] = Caml_int32.mod_(cameraIndex[0] + 1 | 0, n);
  return /* () */0;
}

function setSrc (img,src){
     img.src = src;};

var previousCodes = /* record */[/* contents */Belt_SetString.empty];

var dataSeen = { };

var currentSignature = /* record */[/* contents */""];

var canvasesRef = /* record */[/* contents : array */[]];

function copyVideoToSnapshotCanvas(param) {
  return Util$QueerLoop.withQuerySelectorDom("#snapshotCanvas", (function (snapshotCanvas) {
                var snapshotCtx = snapshotCanvas.getContext("2d");
                snapshotCtx.globalAlpha = 0.1;
                return $$Array.mapi((function (i, canvas) {
                              var h = canvas.height;
                              (canvas.width - h | 0) / 2 | 0;
                              snapshotCtx.drawImage(canvas, 0, 0, canvas.width, canvas.height, 0, 0, snapshotCanvas.width, snapshotCanvas.height);
                              return /* () */0;
                            }), canvasesRef[0]);
              }));
}

function takeSnapshot(param) {
  return Util$QueerLoop.withQuerySelectorDom("#snapshotCanvas", (function (snapshotCanvas) {
                snapshotCanvas.getContext("2d");
                return snapshotCanvas.toDataURL("image/jpeg", 0.9);
              }));
}

function setHashToNow(param) {
  return Util$QueerLoop.setHash(new Date().toISOString());
}

function onClick(maybeHash, param) {
  if (maybeHash !== undefined) {
    var hash = maybeHash;
    console.log(hash);
    setBackground("body", "#" + hash.slice(0, 6));
    var match = Js_dict.get(dataSeen, hash);
    if (match !== undefined) {
      return Util$QueerLoop.setHash(match.slice(16));
    } else {
      return /* () */0;
    }
  } else {
    return Util$QueerLoop.setHash(new Date().toISOString());
  }
}

function addToPast(hash, dataUrl) {
  var img = document.createElement("img");
  setSrc(img, dataUrl);
  img.id = hash;
  var partial_arg = hash;
  img.addEventListener("click", (function (param) {
          return onClick(partial_arg, param);
        }));
  Util$QueerLoop.withQuerySelector("#codes", (function (past) {
          past.appendChild(img);
          return /* () */0;
        }));
  return /* () */0;
}

function setCode(input) {
  var match = takeSnapshot(/* () */0);
  if (match !== undefined) {
    var snapshotUrl = match;
    var text = "https://" + (domain + ("/#" + input));
    Hash$QueerLoop.hexDigest("SHA-1", text).then((function (hash) {
            dataSeen[hash] = text;
            setBackground("body", "#" + hash.slice(0, 6));
            var code = Belt_Option.getWithDefault(QrCodeGen$QueerLoop.QrCode[/* encodeText */1](text, QrCodeGen$QueerLoop.Ecc[/* medium */1]), defaultCode);
            Util$QueerLoop.withQuerySelectorDom("#queer-loop", (function (loopSvg) {
                    return Util$QueerLoop.withQuerySelectorDom("#snapshotCanvas", (function (snapshotCanvas) {
                                  previousCodes[0] = Belt_SetString.add(previousCodes[0], hash);
                                  dataSeen[hash] = text;
                                  QueerCode$QueerLoop.setCodeOnSvg(loopSvg, code);
                                  var match = currentSignature[0] !== "";
                                  var url = QueerCode$QueerLoop.getSvgDataUri(code, text, match ? snapshotUrl : undefined);
                                  if (currentSignature[0] !== "") {
                                    addToPast(hash, url);
                                  }
                                  currentSignature[0] = hash;
                                  return /* () */0;
                                }));
                  }));
            return Promise.resolve(/* () */0);
          }));
    return /* () */0;
  } else {
    return /* () */0;
  }
}

function onHashChange(param) {
  var hash = Util$QueerLoop.getHash(/* () */0).slice(1);
  setCode(hash);
  Util$QueerLoop.withQuerySelector("#codeContents", (function (el) {
          el.innerText = decodeURIComponent(hash);
          return /* () */0;
        }));
  return /* () */0;
}

function setOpacity(elQuery, opacity) {
  return Belt_Option.map(Belt_Option.flatMap(Caml_option.nullable_to_opt(document.querySelector(elQuery)), ElementRe.asHtmlElement), (function (body) {
                body.style.setProperty("opacity", Pervasives.string_of_float(opacity), "");
                return /* () */0;
              }));
}

var frameCount = /* record */[/* contents */0];

function onTick(ts) {
  frameCount[0] = frameCount[0] + 1 | 0;
  if (frameCount[0] % 5 === 1) {
    copyVideoToSnapshotCanvas(/* () */0);
  }
  requestAnimationFrame(onTick);
  return /* () */0;
}

function _onInput(param) {
  Util$QueerLoop.withQuerySelector("#codeContents", (function (el) {
          var text = el.innerText;
          return Util$QueerLoop.setHash(encodeURIComponent(text));
        }));
  return /* () */0;
}

var onInput = Debouncer.make(200, _onInput);

function init(param) {
  Util$QueerLoop.withQuerySelectorDom("#snapshotCanvas", (function (canvas) {
          canvas.width = 480;
          canvas.height = 480;
          return /* () */0;
        }));
  Util$QueerLoop.withQuerySelectorDom("#queer-loop", (function (img) {
          img.addEventListener("click", (function (param) {
                  return onClick(undefined, param);
                }));
          return /* () */0;
        }));
  var initialHash = Util$QueerLoop.getHash(/* () */0);
  if (initialHash === "") {
    Util$QueerLoop.setHash(new Date().toISOString());
  } else {
    onHashChange(/* () */0);
  }
  Util$QueerLoop.withQuerySelector("#codeContents", (function (el) {
          el.addEventListener("input", (function (evt) {
                  return Curry._1(onInput, /* () */0);
                }));
          return /* () */0;
        }));
  var response = function (input) {
    if (input !== "") {
      Hash$QueerLoop.hexDigest("SHA-1", input).then((function (hexHash) {
              var alreadySeen = Belt_SetString.has(previousCodes[0], hexHash);
              if (hexHash === currentSignature[0] || !alreadySeen) {
                Util$QueerLoop.setHash(new Date().toISOString());
              }
              return Promise.resolve(/* () */0);
            }));
      return /* () */0;
    } else {
      return 0;
    }
  };
  UserMedia$QueerLoop.getCameras(/* () */0).then((function (cameras) {
              camerasRef[0] = cameras;
              return Promise.all($$Array.map((function (camera) {
                                var videoEl = document.createElement("video");
                                Util$QueerLoop.withQuerySelector("body", (function (body) {
                                        body.appendChild(videoEl);
                                        return /* () */0;
                                      }));
                                return Scanner$QueerLoop.scanUsingDeviceId(videoEl, camera.deviceId, response);
                              }), cameras));
            })).then((function (canvases) {
            canvasesRef[0] = canvases;
            requestAnimationFrame(onTick);
            return Promise.resolve(/* () */0);
          })).catch((function (err) {
          console.error("getCameras failed", err);
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

window.addEventListener("load", (function (param) {
        return init(/* () */0);
      }));

window.addEventListener("hashchange", (function (param) {
        return onHashChange(/* () */0);
      }));

var defaultHash = "fff";

exports.domain = domain;
exports.setBackground = setBackground;
exports.codeRegex = codeRegex;
exports.defaultCode = defaultCode;
exports.defaultHash = defaultHash;
exports.camerasRef = camerasRef;
exports.cameraIndex = cameraIndex;
exports.cycleCameras = cycleCameras;
exports.setSrc = setSrc;
exports.previousCodes = previousCodes;
exports.dataSeen = dataSeen;
exports.currentSignature = currentSignature;
exports.canvasesRef = canvasesRef;
exports.copyVideoToSnapshotCanvas = copyVideoToSnapshotCanvas;
exports.takeSnapshot = takeSnapshot;
exports.setHashToNow = setHashToNow;
exports.onClick = onClick;
exports.addToPast = addToPast;
exports.setCode = setCode;
exports.onHashChange = onHashChange;
exports.setOpacity = setOpacity;
exports.frameCount = frameCount;
exports.onTick = onTick;
exports._onInput = _onInput;
exports.onInput = onInput;
exports.init = init;
/* codeRegex Not a pure module */
