// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Debouncer = require("re-debouncer/src/Debouncer.bs.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Hash$QueerLoop = require("./Hash.bs.js");
var JsQr$QueerLoop = require("./JsQr.bs.js");
var Time$QueerLoop = require("./Time.bs.js");
var Util$QueerLoop = require("./Util.bs.js");
var Audio$QueerLoop = require("./Audio.bs.js");
var Options$QueerLoop = require("./Options.bs.js");
var Scanner$QueerLoop = require("./Scanner.bs.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var HtmlShell$QueerLoop = require("./HtmlShell.bs.js");
var QrCodeGen$QueerLoop = require("./QrCodeGen.bs.js");
var QueerCode$QueerLoop = require("./QueerCode.bs.js");
var SvgScript$QueerLoop = require("./SvgScript.bs.js");
var UserMedia$QueerLoop = require("./UserMedia.bs.js");
var AudioFilter$QueerLoop = require("./AudioFilter.bs.js");

var domain = "qqq.lu";

var defaultCode = QrCodeGen$QueerLoop.QrCode._encodeText("https://qqq.lu", QrCodeGen$QueerLoop.Ecc.low);

var initialHash = {
  contents: ""
};

var camerasRef = {
  contents: []
};

function setSrc (img,src){
     img.src = src;};

var dataSeen = { };

var currentSignature = {
  contents: ""
};

var canvasesRef = {
  contents: []
};

function asOfNow(f) {
  return Curry._1(f, new Date());
}

function setHashToNow(param) {
  return Util$QueerLoop.setHash(Time$QueerLoop.getTimestamp(undefined));
}

var hasChanged = {
  contents: false
};

var audioRecording = {
  contents: false
};

var maybeFilterBank = {
  contents: undefined
};

var queerLoopState = {
  contents: /* Dreaming */1
};

function simulateSelfRecognition(param) {
  console.log("Simulating self recognition...");
  Util$QueerLoop.withQuerySelectorDom("#snapshotCanvas", (function (snapshotCanvas) {
          var ctx = snapshotCanvas.getContext("2d");
          var size = snapshotCanvas.width;
          Util$QueerLoop.withQuerySelectorDom("img", (function (codeImg) {
                  ctx.drawImage(codeImg, 0, 0, size, size);
                  
                }));
          ctx.drawImage(snapshotCanvas, 1, 1, size - 1 | 0, size - 1 | 0);
          return Scanner$QueerLoop.runScanFromCanvas(snapshotCanvas, undefined, (function (canvas, qrCode) {
                        console.log("simulating scan");
                        console.log("simulating scan");
                        
                      }));
        }));
  
}

function onClick(maybeHash, param) {
  if (!hasChanged.contents) {
    hasChanged.contents = true;
  }
  if (maybeHash === undefined) {
    return Util$QueerLoop.setHash(Time$QueerLoop.getTimestamp(undefined));
  }
  var match = Js_dict.get(dataSeen, maybeHash);
  if (match !== undefined) {
    SvgScript$QueerLoop.toggleHash(maybeHash);
  } else {
    false;
  }
  
}

function _writeLogEntry(param) {
  var hash = param[3];
  var text = param[2];
  var localeString = param[1];
  var isoformat = param[0];
  Util$QueerLoop.withQuerySelectorDom("#log", (function (log) {
          var entry = document.createElement("a");
          entry.setAttribute("href", text);
          var linkClasses = entry.classList;
          linkClasses.add("log-entry", "codeLink", "code" + hash);
          var timeDiv = document.createElement("div");
          var time = document.createElement("time");
          time.setAttribute("datetime", isoformat);
          time.textContent = localeString;
          var linkChild = document.createElement("a");
          linkChild.innerText = text;
          linkChild.setAttribute("href", text);
          var hashColor = hash.slice(0, 6);
          entry.setAttribute("style", "background-color: #" + (String(hashColor) + "66;"));
          timeDiv.appendChild(time);
          entry.appendChild(timeDiv);
          entry.appendChild(linkChild);
          log.appendChild(entry);
          
        }));
  
}

var writeLogEntry = Debouncer.make(100, _writeLogEntry);

function takeSnapshot(codeImg) {
  return Util$QueerLoop.withQuerySelectorDom("#snapshotCanvas", (function (snapshotCanvas) {
                snapshotCanvas.getContext("2d");
                return snapshotCanvas.toDataURL("image/jpeg", 0.9);
              }));
}

function copySnapshotToIcon(param) {
  return Util$QueerLoop.withQuerySelectorDom("#iconCanvas", (function (iconCanvas) {
                return Util$QueerLoop.withQuerySelectorDom("#snapshotCanvas", (function (snapshotCanvas) {
                              var iconCtx = iconCanvas.getContext("2d");
                              iconCtx.globalAlpha = 1.0;
                              iconCtx.drawImage(snapshotCanvas, 0, 0, snapshotCanvas.width, snapshotCanvas.height, 0, 0, iconCanvas.width, iconCanvas.height);
                              
                            }));
              }));
}

function hasBody (){return !!document.body;};

function withRootSvg(hash, f) {
  if (Curry._1(hasBody, undefined)) {
    Util$QueerLoop.withQuerySelectorDom("#queer-loop", (function (loopContainer) {
            var svg = loopContainer.querySelector("svg");
            if (!(svg == null)) {
              return Curry._1(f, svg);
            }
            var svg$1 = QueerCode$QueerLoop.createSvgSkeleton(hash);
            svg$1.addEventListener("click", (function (param) {
                    return onClick(undefined, param);
                  }));
            loopContainer.appendChild(svg$1);
            return Curry._1(f, svg$1);
          }));
    return ;
  } else {
    Util$QueerLoop.withQuerySelectorDom("svg.root", f);
    return ;
  }
}

function setOnClick (el,handler){el.onclick = handler;};

function simulateClick (el){el.click();};

function save(timestamp) {
  return withRootSvg("", (function (rootSvg) {
                var downloadLink = document.createElementNS(Util$QueerLoop.htmlNs, "a");
                downloadLink.setAttribute("download", timestamp + ".svg");
                Util$QueerLoop.withQuerySelectorDom("#htmlContainer", (function (htmlContainer) {
                        var blobObjectUrl = QueerCode$QueerLoop.svgToBlobObjectURL(rootSvg);
                        downloadLink.setAttribute("href", blobObjectUrl);
                        htmlContainer.appendChild(downloadLink);
                        simulateClick(downloadLink);
                        return setTimeout((function (param) {
                                      console.log("Freeing memory from " + (String(timestamp) + "."));
                                      URL.revokeObjectURL(blobObjectUrl);
                                      htmlContainer.removeChild(downloadLink);
                                      
                                    }), 0);
                      }));
                
              }));
}

var hashCache = { };

function maybeCachedHexDigest(text) {
  var cachedHash = Js_dict.get(hashCache, text);
  if (cachedHash !== undefined) {
    return Promise.resolve(cachedHash);
  } else {
    return Hash$QueerLoop.hexDigest("SHA-1", text).then((function (hash) {
                  hashCache[text] = hash;
                  return Promise.resolve(hash);
                }));
  }
}

function toggleInversion(param) {
  Util$QueerLoop.withQuerySelectorDom("#htmlContainer", (function (htmlContainer) {
          var currentInversion = Options$QueerLoop.currentOptions.contents.invert;
          var init = Options$QueerLoop.currentOptions.contents;
          Options$QueerLoop.currentOptions.contents = {
            background: init.background,
            includeDomain: init.includeDomain,
            includeQueryString: init.includeQueryString,
            includeHash: init.includeHash,
            invert: !currentInversion,
            animate: init.animate,
            opacity: init.opacity,
            title: init.title,
            url: init.url,
            poem: init.poem,
            wiki: init.wiki,
            youtubeVideo: init.youtubeVideo,
            cameraIndices: init.cameraIndices
          };
          var classList = htmlContainer.classList;
          if (Options$QueerLoop.currentOptions.contents.invert) {
            classList.add("invert");
          } else {
            classList.remove("invert");
          }
          return withRootSvg("", (function (rootSvg) {
                        var classList = rootSvg.classList;
                        if (Options$QueerLoop.currentOptions.contents.invert) {
                          classList.add("invert");
                          return ;
                        } else {
                          classList.remove("invert");
                          return ;
                        }
                      }));
        }));
  
}

function setCode(text, date) {
  maybeCachedHexDigest(text).then((function (hash) {
          withRootSvg(hash, (function (rootSvg) {
                  var alreadySeen = Belt_Option.isSome(Js_dict.get(dataSeen, hash));
                  if (alreadySeen) {
                    return ;
                  }
                  dataSeen[hash] = text;
                  var bank = maybeFilterBank.contents;
                  if (bank !== undefined) {
                    Audio$QueerLoop.updateFilterBank(undefined, undefined, bank, AudioFilter$QueerLoop.hashToChroma(hash), undefined);
                  }
                  var code = Belt_Option.getWithDefault(QrCodeGen$QueerLoop.QrCode.encodeText(text, QrCodeGen$QueerLoop.Ecc.medium), defaultCode);
                  var sizeWithBorder = code.size + 12 | 0;
                  var isoformat = date.toISOString();
                  var localeString = date.toLocaleString();
                  var codeSvg = QueerCode$QueerLoop.createCodeSvg(text, code, hash, localeString, isoformat, 6);
                  var codeImg = QueerCode$QueerLoop.svgToImg(codeSvg);
                  codeImg.addEventListener("load", (function (param) {
                          Util$QueerLoop.withQuerySelectorDom("#centralGroup", (function (centralGroup) {
                                  var snapshotUrl = takeSnapshot(undefined);
                                  if (snapshotUrl === undefined) {
                                    return ;
                                  }
                                  if (hasChanged.contents) {
                                    QueerCode$QueerLoop.addBackground(codeSvg, sizeWithBorder, snapshotUrl);
                                  }
                                  centralGroup.appendChild(codeSvg);
                                  if (Options$QueerLoop.currentOptions.contents.animate) {
                                    rootSvg.setAttribute("class", "root animationsEnabled");
                                  }
                                  SvgScript$QueerLoop.setAnimacy(rootSvg, hash);
                                  var iconCodeImg = QueerCode$QueerLoop.codeToImage(code, 6, hash);
                                  iconCodeImg.addEventListener("load", (function (_evt) {
                                          var iconUrl = Util$QueerLoop.withQuerySelectorDom("#iconCanvas", (function (iconCanvas) {
                                                  iconCanvas.width = sizeWithBorder;
                                                  iconCanvas.height = sizeWithBorder;
                                                  var ctx = iconCanvas.getContext("2d");
                                                  copySnapshotToIcon(undefined);
                                                  ctx.globalAlpha = 0.5;
                                                  ctx.drawImage(iconCodeImg, 0, 0);
                                                  return iconCanvas.toDataURL();
                                                }));
                                          if (iconUrl !== undefined) {
                                            Util$QueerLoop.withQuerySelectorDom("#codes", (function (container) {
                                                    var a = document.createElementNS(Util$QueerLoop.htmlNs, "a");
                                                    a.setAttribute("href", "#" + hash);
                                                    var linkClasses = a.classList;
                                                    linkClasses.add("codeLink", "code" + hash);
                                                    var img = document.createElementNS(Util$QueerLoop.htmlNs, "img");
                                                    img.setAttribute("src", iconUrl);
                                                    a.appendChild(img);
                                                    a.addEventListener("click", (function (evt) {
                                                            evt.preventDefault();
                                                            return onClick(hash, undefined);
                                                          }));
                                                    container.appendChild(a);
                                                    
                                                  }));
                                            return ;
                                          }
                                          
                                        }));
                                  Util$QueerLoop.withQuerySelectorDom("#download", (function (a) {
                                          var downloadOnClickHandler = function (evt) {
                                            return save(isoformat);
                                          };
                                          return setOnClick(a, downloadOnClickHandler);
                                        }));
                                  currentSignature.contents = hash;
                                  
                                }));
                          
                        }));
                  
                }));
          return Promise.resolve(undefined);
        }));
  
}

var setText = Debouncer.make(200, (function (hash) {
        Util$QueerLoop.withQuerySelectorDom("#codeContents", (function (el) {
                el.innerText = decodeURIComponent(hash);
                
              }));
        
      }));

function onHashChange(_evt) {
  var opts = Options$QueerLoop.currentOptions.contents;
  var url = new URL(window.location.href);
  var date = Time$QueerLoop.maybeDeserializeTime(url.hash.slice(1));
  var date$1 = date !== undefined ? Caml_option.valFromOption(date) : new Date();
  var isoformat = date$1.toISOString();
  var localeString = date$1.toLocaleString();
  Util$QueerLoop.withQuerySelectorDom("title", (function (title) {
          var titleStr = Options$QueerLoop.currentOptions.contents.title;
          title.innerText = titleStr !== undefined ? titleStr : localeString;
          
        }));
  Util$QueerLoop.withQuerySelectorDom("time", (function (time) {
          time.setAttribute("datetime", isoformat);
          time.innerText = localeString;
          
        }));
  var url_ = opts.url;
  var urlText = url_ !== undefined ? url_ + (
      hasChanged.contents ? url.hash : ""
    ) : (
      opts.includeDomain ? url.origin : ""
    ) + ((
        opts.includeQueryString ? url.search : ""
      ) + (
        opts.includeHash ? url.hash : ""
      ));
  setCode(urlText, date$1);
  return Curry._1(setText, urlText);
}

var frameCount = {
  contents: 0
};

var lastFrame = {
  contents: 0.0
};

var lastUpdated = {
  contents: 0.0
};

function onTick(ts) {
  frameCount.contents = frameCount.contents + 1 | 0;
  requestAnimationFrame(onTick);
  
}

function maybeUrl(s) {
  var url;
  try {
    url = new URL(s);
  }
  catch (raw_e){
    var e = Caml_js_exceptions.internalToOCamlException(raw_e);
    console.error("Could not parse URL", e);
    return ;
  }
  return Caml_option.some(url);
}

function _onInput(param) {
  Util$QueerLoop.withQuerySelectorDom("#codeContents", (function (el) {
          var text = el.innerText;
          return Belt_Option.map(maybeUrl(text), (function (url) {
                        window.location.hash = url.hash;
                        
                      }));
        }));
  
}

var onInput = Debouncer.make(100, _onInput);

function boolParam($$default, s) {
  if (s !== undefined) {
    if (s === "true" || s === "1" || s === "y") {
      return true;
    } else {
      return s === "";
    }
  } else {
    return $$default;
  }
}

function pick(ary, indices) {
  return $$Array.map((function (i) {
                return Caml_array.caml_array_get(ary, i);
              }), indices);
}

function getTimestampFromCode(id) {
  return Util$QueerLoop.withQuerySelectorDom("#" + id, Time$QueerLoop.getTimestampFromElement);
}

function cycleThroughPast(param) {
  var allIds = Util$QueerLoop.withQuerySelectorAll(".code", (function (param) {
          return Util$QueerLoop.mapMaybe((function (item) {
                        return Caml_option.nullable_to_opt(item.getAttribute("id"));
                      }), param);
        }));
  var currentId = Belt_Option.getWithDefault(Belt_Option.getWithDefault(Util$QueerLoop.withQuerySelectorDom(".animate", (function (live) {
                  SvgScript$QueerLoop.removeClassSvg(live, "animate");
                  SvgScript$QueerLoop.addClassSvg(live, "active");
                  return Caml_option.nullable_to_opt(live.getAttribute("id"));
                })), undefined), "");
  var i = {
    contents: allIds.indexOf(currentId)
  };
  var timeToNext = function (param) {
    var currentTime = getTimestampFromCode(Caml_array.caml_array_get(allIds, i.contents));
    var nextTime = getTimestampFromCode(Caml_array.caml_array_get(allIds, Caml_int32.mod_(i.contents + 1 | 0, allIds.length)));
    if (currentTime === undefined) {
      return 500.0;
    }
    var current = Caml_option.valFromOption(currentTime);
    if (current === undefined) {
      return 500.0;
    }
    if (nextTime === undefined) {
      return 500.0;
    }
    var next = Caml_option.valFromOption(nextTime);
    if (next !== undefined) {
      return next - current;
    } else {
      return 500.0;
    }
  };
  var step = function (param) {
    Util$QueerLoop.withQuerySelectorDom(".active", (function (live) {
            return SvgScript$QueerLoop.removeClassSvg(live, "active");
          }));
    i.contents = Caml_int32.mod_(i.contents + 1 | 0, allIds.length);
    Util$QueerLoop.withQuerySelectorDom("#" + Caml_array.caml_array_get(allIds, i.contents), (function (live) {
            return SvgScript$QueerLoop.addClassSvg(live, "active");
          }));
    
  };
  return /* tuple */[
          step,
          timeToNext
        ];
}

var maybeAudioContext = {
  contents: undefined
};

var maybeAudioInputNode = {
  contents: undefined
};

var maybeDelay = {
  contents: undefined
};

function featuresCallback(features) {
  var rms = features.rms;
  var rmsS = Math.sqrt(rms).toString();
  Util$QueerLoop.withQuerySelectorDom("#chromaBackdrop", (function (chromaBackdrop) {
          chromaBackdrop.setAttribute("style", "opacity: " + (String(rmsS) + ""));
          
        }));
  var chroma = features.chroma;
  return $$Array.iteri((function (i, v) {
                Util$QueerLoop.withQuerySelectorDom("#pc" + String((i + 5 | 0) % 12), (function (pc) {
                        var vStr = v.toString();
                        pc.setAttribute("style", "opacity: " + (String(vStr) + ""));
                        
                      }));
                
              }), chroma);
}

function enableAudio(param) {
  var ctx = maybeAudioContext.contents;
  var audioContext;
  if (ctx !== undefined) {
    audioContext = Caml_option.valFromOption(ctx);
  } else {
    var ctx$1 = new (window.AudioContext)();
    maybeAudioContext.contents = Caml_option.some(ctx$1);
    audioContext = ctx$1;
  }
  Audio$QueerLoop.getAudioSource(audioContext).then((function (maybeSource) {
          maybeAudioInputNode.contents = maybeSource;
          if (maybeSource !== undefined) {
            if (audioRecording.contents) {
              maybeFilterBank.contents = AudioFilter$QueerLoop.init(audioContext, maybeSource, audioContext.destination, undefined);
            }
            var opts = {
              audioContext: audioContext,
              source: maybeSource,
              bufferSize: 4096,
              featureExtractors: [
                "rms",
                "chroma",
                "buffer"
              ],
              callback: featuresCallback
            };
            var analyzer = Meyda.createMeydaAnalyzer(opts);
            analyzer.start();
          }
          return Promise.resolve(undefined);
        }));
  
}

function showHide(_evt) {
  Util$QueerLoop.withQuerySelectorDom("#queer-loop", (function (loop) {
          var classes = loop.classList;
          classes.toggle("hidden");
          
        }));
  
}

function makeIframe(url) {
  Util$QueerLoop.withQuerySelectorDom("#iframeContainer", (function (iframeContainer) {
          var iframe = document.createElementNS(Util$QueerLoop.htmlNs, "iframe");
          iframe.setAttribute("width", String(window.innerWidth));
          iframe.setAttribute("height", String(window.innerHeight));
          iframe.setAttribute("allow", "accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture; microphone; camera");
          iframe.setAttribute("src", url);
          iframeContainer.appendChild(iframe);
          
        }));
  
}

function init(_evt) {
  HtmlShell$QueerLoop.setup(undefined);
  HtmlShell$QueerLoop.createIconButtonWithCallback("#toolbar", "mic", (function (_evt) {
          return enableAudio(undefined);
        }));
  HtmlShell$QueerLoop.createIconButtonWithCallback("#toolbar", "hide", showHide);
  HtmlShell$QueerLoop.createIconButtonWithCallback("#toolbar", "invert", (function (_evt) {
          return toggleInversion(undefined);
        }));
  Util$QueerLoop.withQuerySelectorDom("#snapshotCanvas", (function (canvas) {
          canvas.width = 480;
          canvas.height = 480;
          
        }));
  var queryString = Util$QueerLoop.getQueryString(undefined);
  if (queryString !== "") {
    var params = new URLSearchParams(queryString);
    var cameraIndices = $$Array.map(Caml_format.caml_int_of_string, params.getAll("c"));
    Options$QueerLoop.currentOptions.contents = {
      background: Belt_Option.getWithDefault(Belt_Option.map(Caml_option.nullable_to_opt(params.get("b")), (function (prim) {
                  return decodeURIComponent(prim);
                })), Options$QueerLoop.currentOptions.contents.background),
      includeDomain: boolParam(Options$QueerLoop.currentOptions.contents.includeDomain, Caml_option.nullable_to_opt(params.get("d"))),
      includeQueryString: boolParam(Options$QueerLoop.currentOptions.contents.includeQueryString, Caml_option.nullable_to_opt(params.get("q"))),
      includeHash: boolParam(Options$QueerLoop.currentOptions.contents.includeHash, Caml_option.nullable_to_opt(params.get("h"))),
      invert: boolParam(Options$QueerLoop.currentOptions.contents.invert, Caml_option.nullable_to_opt(params.get("i"))),
      animate: boolParam(Options$QueerLoop.currentOptions.contents.animate, Caml_option.nullable_to_opt(params.get("a"))),
      opacity: Belt_Option.getWithDefault(Belt_Option.map(Caml_option.nullable_to_opt(params.get("o")), (function (prim) {
                  return Number(prim);
                })), Options$QueerLoop.currentOptions.contents.opacity),
      title: Caml_option.nullable_to_opt(params.get("t")),
      url: Caml_option.nullable_to_opt(params.get("u")),
      poem: Caml_option.nullable_to_opt(params.get("p")),
      wiki: Caml_option.nullable_to_opt(params.get("w")),
      youtubeVideo: Caml_option.nullable_to_opt(params.get("v")),
      cameraIndices: cameraIndices.length === 0 ? [0] : cameraIndices
    };
  }
  if (Options$QueerLoop.currentOptions.contents.background !== "") {
    Util$QueerLoop.setBackground(".background", Options$QueerLoop.currentOptions.contents.background);
  }
  var url = Options$QueerLoop.currentOptions.contents.url;
  if (url !== undefined) {
    makeIframe(url);
  }
  var ytId = Options$QueerLoop.currentOptions.contents.youtubeVideo;
  if (ytId !== undefined) {
    makeIframe("https://www.youtube-nocookie.com/embed/" + (String(ytId) + "?cc_load_policy=1&autoplay=1"));
  }
  var poem = Options$QueerLoop.currentOptions.contents.poem;
  if (poem !== undefined) {
    makeIframe("https://poets.org/poem/" + (String(poem) + "?mbd=1"));
  }
  var wiki = Options$QueerLoop.currentOptions.contents.wiki;
  if (wiki !== undefined) {
    makeIframe("https://en.m.wikipedia.org/wiki/" + (String(wiki) + ""));
  }
  initialHash.contents = Util$QueerLoop.getHash(undefined).slice(1);
  if (initialHash.contents === "") {
    initialHash.contents = Time$QueerLoop.getTimestamp(undefined);
    Util$QueerLoop.setHash(initialHash.contents);
  } else {
    onHashChange(undefined);
  }
  if (!Curry._1(hasBody, undefined)) {
    var match = cycleThroughPast(undefined);
    var timeToNext = match[1];
    var stepFn = match[0];
    var lastUpdated = {
      contents: 0.0
    };
    var until = {
      contents: Curry._1(timeToNext, undefined)
    };
    var onTick$1 = function (ts) {
      if (ts - lastUpdated.contents >= until.contents) {
        Curry._1(stepFn, undefined);
        until.contents = Curry._1(timeToNext, undefined);
        lastUpdated.contents = ts;
      }
      requestAnimationFrame(onTick$1);
      
    };
    requestAnimationFrame(onTick$1);
  }
  Util$QueerLoop.withQuerySelectorDom("#codeContents", (function (el) {
          el.addEventListener("blur", (function (_evt) {
                  return Curry._1(onInput, undefined);
                }));
          
        }));
  var response = function (srcCanvas, inputCode) {
    var input = inputCode.data;
    if (input !== "") {
      maybeCachedHexDigest(input).then((function (hexHash) {
              var date = new Date();
              var isoformat = date.toISOString();
              var localeString = date.toLocaleString();
              if (!hasChanged.contents) {
                hasChanged.contents = true;
              }
              Util$QueerLoop.withQuerySelectorDom("#inputCanvas", (function (destCanvas) {
                      var $$location = inputCode.location;
                      var rect = JsQr$QueerLoop.extractAABB($$location);
                      var dw = rect.w;
                      var dh = rect.h;
                      if (destCanvas.width !== dw) {
                        destCanvas.width = dw;
                        destCanvas.height = dh;
                      }
                      var ctx = destCanvas.getContext("2d");
                      ctx.drawImage(srcCanvas, rect.x, rect.y, rect.w, rect.h, 0, 0, dw, dh);
                      
                    }));
              var alreadySeen = Belt_Option.isSome(Js_dict.get(dataSeen, hexHash));
              var isSelf = hexHash === currentSignature.contents;
              if (isSelf || !alreadySeen) {
                dataSeen[hexHash] = input;
                Curry._1(writeLogEntry, /* tuple */[
                      isoformat,
                      localeString,
                      isSelf ? "queer-loop" : input,
                      hexHash
                    ]);
                Util$QueerLoop.setHash(Time$QueerLoop.getTimestamp(undefined));
              }
              return Promise.resolve(undefined);
            }));
      return ;
    }
    
  };
  UserMedia$QueerLoop.getCameras(undefined).then((function (cameras) {
              camerasRef.contents = cameras;
              console.log("Cameras found:", cameras);
              return Promise.all($$Array.map((function (camera) {
                                var videoEl = document.createElementNS(Util$QueerLoop.htmlNs, "video");
                                return Scanner$QueerLoop.scanUsingDeviceId(videoEl, camera.deviceId, Options$QueerLoop.currentOptions, response);
                              }), pick(cameras, $$Array.map((function (x) {
                                        return Caml_int32.mod_(x, cameras.length);
                                      }), Options$QueerLoop.currentOptions.contents.cameraIndices))));
            })).then((function (canvases) {
            canvasesRef.contents = canvases;
            requestAnimationFrame(onTick);
            console.log("Initalization complete.");
            queerLoopState.contents = /* Awake */2;
            return Promise.resolve(undefined);
          })).catch((function (err) {
          console.log("Camera input disabled.");
          console.log("Initalization complete.");
          Util$QueerLoop.withQuerySelectorDom("#welcome", (function (welcome) {
                  welcome.setAttribute("style", "display: block;");
                  
                }));
          return Promise.resolve(undefined);
        }));
  
}

function activateQueerLoop (){window.queerLoop = true;};

if (!window.queerLoop) {
  console.log("Initializing queer-loop...");
  Curry._1(activateQueerLoop, undefined);
  window.addEventListener("load", init);
  window.addEventListener("hashchange", onHashChange);
}

exports.domain = domain;
exports.defaultCode = defaultCode;
exports.initialHash = initialHash;
exports.camerasRef = camerasRef;
exports.setSrc = setSrc;
exports.dataSeen = dataSeen;
exports.currentSignature = currentSignature;
exports.canvasesRef = canvasesRef;
exports.asOfNow = asOfNow;
exports.setHashToNow = setHashToNow;
exports.hasChanged = hasChanged;
exports.audioRecording = audioRecording;
exports.maybeFilterBank = maybeFilterBank;
exports.queerLoopState = queerLoopState;
exports.simulateSelfRecognition = simulateSelfRecognition;
exports.onClick = onClick;
exports._writeLogEntry = _writeLogEntry;
exports.writeLogEntry = writeLogEntry;
exports.takeSnapshot = takeSnapshot;
exports.copySnapshotToIcon = copySnapshotToIcon;
exports.hasBody = hasBody;
exports.withRootSvg = withRootSvg;
exports.setOnClick = setOnClick;
exports.simulateClick = simulateClick;
exports.save = save;
exports.hashCache = hashCache;
exports.maybeCachedHexDigest = maybeCachedHexDigest;
exports.toggleInversion = toggleInversion;
exports.setCode = setCode;
exports.setText = setText;
exports.onHashChange = onHashChange;
exports.frameCount = frameCount;
exports.lastFrame = lastFrame;
exports.lastUpdated = lastUpdated;
exports.onTick = onTick;
exports.maybeUrl = maybeUrl;
exports._onInput = _onInput;
exports.onInput = onInput;
exports.boolParam = boolParam;
exports.pick = pick;
exports.getTimestampFromCode = getTimestampFromCode;
exports.cycleThroughPast = cycleThroughPast;
exports.maybeAudioContext = maybeAudioContext;
exports.maybeAudioInputNode = maybeAudioInputNode;
exports.maybeDelay = maybeDelay;
exports.featuresCallback = featuresCallback;
exports.enableAudio = enableAudio;
exports.showHide = showHide;
exports.makeIframe = makeIframe;
exports.init = init;
exports.activateQueerLoop = activateQueerLoop;
/* defaultCode Not a pure module */
