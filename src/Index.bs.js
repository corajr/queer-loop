// Generated by BUCKLESCRIPT VERSION 5.0.2, PLEASE EDIT WITH CARE

import * as $$Array from "../node_modules/bs-platform/lib/es6/array.js";
import * as Curry from "../node_modules/bs-platform/lib/es6/curry.js";
import * as Js_dict from "../node_modules/bs-platform/lib/es6/js_dict.js";
import * as Debouncer from "../node_modules/re-debouncer/src/Debouncer.bs.js";
import * as ElementRe from "../node_modules/bs-webapi/src/dom/nodes/ElementRe.js";
import * as Caml_int32 from "../node_modules/bs-platform/lib/es6/caml_int32.js";
import * as Pervasives from "../node_modules/bs-platform/lib/es6/pervasives.js";
import * as Belt_Option from "../node_modules/bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "../node_modules/bs-platform/lib/es6/caml_option.js";
import * as Hash$QueerLoop from "./Hash.bs.js";
import * as Util$QueerLoop from "./Util.bs.js";
import * as Scanner$QueerLoop from "./Scanner.bs.js";
import * as QrCodeGen$QueerLoop from "./QrCodeGen.bs.js";
import * as QueerCode$QueerLoop from "./QueerCode.bs.js";
import * as UserMedia$QueerLoop from "./UserMedia.bs.js";

var domain = "qqq.lu";

function setBackground(selector, bgCss) {
  return Util$QueerLoop.withQuerySelector(selector, (function (el) {
                el.style.setProperty("background", bgCss, "");
                return /* () */0;
              }));
}

var codeRegex = new RegExp("https:\\/\\/qqq.lu\\/#(.+)");

var defaultCode = QrCodeGen$QueerLoop.QrCode[/* _encodeText */0]("https://qqq.lu", QrCodeGen$QueerLoop.Ecc[/* low */0]);

var initialHash = /* record */[/* contents */""];

var camerasRef = /* record */[/* contents : array */[]];

var cameraIndex = /* record */[/* contents */0];

function cycleCameras(scanner) {
  var n = camerasRef[0].length;
  cameraIndex[0] = Caml_int32.mod_(cameraIndex[0] + 1 | 0, n);
  return /* () */0;
}

function setSrc (img,src){
     img.src = src;};

var dataSeen = { };

var currentSignature = /* record */[/* contents */""];

var canvasesRef = /* record */[/* contents : array */[]];

function copyVideoToSnapshotCanvas(param) {
  return Util$QueerLoop.withQuerySelectorDom("#snapshotCanvas", (function (snapshotCanvas) {
                var snapshotCtx = snapshotCanvas.getContext("2d");
                snapshotCtx.globalAlpha = 0.1;
                return $$Array.mapi((function (i, canvas) {
                              var h = canvas.height;
                              var x = (canvas.width - h | 0) / 2 | 0;
                              snapshotCtx.drawImage(canvas, x, 0, h, h, 0, 0, snapshotCanvas.width, snapshotCanvas.height);
                              return /* () */0;
                            }), canvasesRef[0]);
              }));
}

function takeSnapshot(param) {
  return Util$QueerLoop.withQuerySelectorDom("#snapshotCanvas", (function (snapshotCanvas) {
                snapshotCanvas.getContext("2d");
                return snapshotCanvas.toDataURL("image/jpeg", 0.9);
              }));
}

function getTimestamp(param) {
  return new Date().toISOString();
}

function setHashToNow(param) {
  return Util$QueerLoop.setHash(new Date().toISOString());
}

function onClick(maybeHash, param) {
  if (maybeHash !== undefined) {
    var hash = maybeHash;
    setBackground("body", "#" + hash.slice(0, 6));
    var match = Js_dict.get(dataSeen, hash);
    if (match !== undefined) {
      var data = match;
      console.log(data.slice(16));
      return Util$QueerLoop.setHash(data.slice(16));
    } else {
      return /* () */0;
    }
  } else {
    return Util$QueerLoop.setHash(new Date().toISOString());
  }
}

function addToPast(hash, dataUrl) {
  var img = document.createElement("img");
  setSrc(img, dataUrl);
  img.id = "x" + hash;
  var partial_arg = hash;
  img.addEventListener("click", (function (param) {
          return onClick(partial_arg, param);
        }));
  Util$QueerLoop.withQuerySelectorDom("#codes", (function (past) {
          past.appendChild(img);
          return /* () */0;
        }));
  return /* () */0;
}

function setCode(input) {
  var text = "https://" + (domain + ("/#" + input));
  Hash$QueerLoop.hexDigest("SHA-1", text).then((function (hash) {
          var alreadySeen = Belt_Option.isSome(Js_dict.get(dataSeen, hash));
          if (!alreadySeen) {
            dataSeen[hash] = text;
            setBackground("body", "#" + hash.slice(0, 6));
            var code = Belt_Option.getWithDefault(QrCodeGen$QueerLoop.QrCode[/* encodeText */1](text, QrCodeGen$QueerLoop.Ecc[/* medium */1]), defaultCode);
            Util$QueerLoop.withQuerySelectorDom("svg", (function (root) {
                    return Util$QueerLoop.withQuerySelectorDom("#localGroup", (function (loopContainer) {
                                  var match = takeSnapshot(/* () */0);
                                  if (match !== undefined) {
                                    var maybePrevious = loopContainer.querySelector("svg");
                                    if (!(maybePrevious == null)) {
                                      loopContainer.removeChild(maybePrevious);
                                    }
                                    var match$1 = input !== initialHash[0];
                                    var svg = QueerCode$QueerLoop.createSimpleSvg(code, 4, match$1 ? match : undefined);
                                    loopContainer.appendChild(svg);
                                    var url = QueerCode$QueerLoop.svgToDataURL(svg);
                                    Util$QueerLoop.withQuerySelectorDom("#codes", (function (container) {
                                            var img = document.createElementNS(Util$QueerLoop.htmlNs, "img");
                                            img.setAttribute("src", url);
                                            container.appendChild(img);
                                            return /* () */0;
                                          }));
                                    currentSignature[0] = hash;
                                    return /* () */0;
                                  } else {
                                    return /* () */0;
                                  }
                                }));
                  }));
          }
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

var setText = Debouncer.make(200, (function (hash) {
        Util$QueerLoop.withQuerySelectorDom("#codeContents", (function (el) {
                el.innerText = decodeURIComponent(hash);
                return /* () */0;
              }));
        return /* () */0;
      }));

function onHashChange(param) {
  var hash = Util$QueerLoop.getHash(/* () */0).slice(1);
  setCode(hash);
  return Curry._1(setText, hash);
}

function setOpacity(elQuery, opacity) {
  return Belt_Option.map(Belt_Option.flatMap(Caml_option.nullable_to_opt(document.querySelector(elQuery)), ElementRe.asHtmlElement), (function (body) {
                body.style.setProperty("opacity", Pervasives.string_of_float(opacity), "");
                return /* () */0;
              }));
}

var frameCount = /* record */[/* contents */0];

function onTick(ts) {
  frameCount[0] = frameCount[0] + 1 | 0;
  if (frameCount[0] % 5 === 1) {
    copyVideoToSnapshotCanvas(/* () */0);
  }
  requestAnimationFrame(onTick);
  return /* () */0;
}

function _onInput(param) {
  Util$QueerLoop.withQuerySelectorDom("#codeContents", (function (el) {
          var text = el.innerText;
          return Util$QueerLoop.setHash(encodeURIComponent(text));
        }));
  return /* () */0;
}

var onInput = Debouncer.make(200, _onInput);

function init(param) {
  Util$QueerLoop.withQuerySelectorDom("#snapshotCanvas", (function (canvas) {
          canvas.width = 480;
          canvas.height = 480;
          return /* () */0;
        }));
  Util$QueerLoop.withQuerySelectorDom(".codes", (function (img) {
          img.addEventListener("click", (function (param) {
                  return onClick(undefined, param);
                }));
          return /* () */0;
        }));
  initialHash[0] = Util$QueerLoop.getHash(/* () */0).slice(1);
  if (initialHash[0] === "") {
    initialHash[0] = new Date().toISOString();
    Util$QueerLoop.setHash(initialHash[0]);
  } else {
    onHashChange(/* () */0);
  }
  Util$QueerLoop.withQuerySelectorDom("#codeContents", (function (el) {
          el.addEventListener("input", (function (_evt) {
                  return Curry._1(onInput, /* () */0);
                }));
          return /* () */0;
        }));
  var response = function (input) {
    if (input !== "") {
      Hash$QueerLoop.hexDigest("SHA-1", input).then((function (hexHash) {
              var alreadySeen = Belt_Option.isSome(Js_dict.get(dataSeen, hexHash));
              if (hexHash === currentSignature[0] || !alreadySeen) {
                Util$QueerLoop.setHash(new Date().toISOString());
              }
              return Promise.resolve(/* () */0);
            }));
      return /* () */0;
    } else {
      return 0;
    }
  };
  UserMedia$QueerLoop.getCameras(/* () */0).then((function (cameras) {
              camerasRef[0] = cameras;
              return Promise.all($$Array.map((function (camera) {
                                var videoEl = document.createElementNS(Util$QueerLoop.htmlNs, "video");
                                Util$QueerLoop.withQuerySelectorDom("#htmlContainer", (function (body) {
                                        body.appendChild(videoEl);
                                        return /* () */0;
                                      }));
                                return Scanner$QueerLoop.scanUsingDeviceId(videoEl, camera.deviceId, response);
                              }), cameras.slice(0, 1)));
            })).then((function (canvases) {
            canvasesRef[0] = canvases;
            requestAnimationFrame(onTick);
            return Promise.resolve(/* () */0);
          })).catch((function (err) {
          console.error("getCameras failed", err);
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

window.addEventListener("load", (function (param) {
        return init(/* () */0);
      }));

window.addEventListener("hashchange", (function (param) {
        return onHashChange(/* () */0);
      }));

var defaultHash = "fff";

export {
  domain ,
  setBackground ,
  codeRegex ,
  defaultCode ,
  defaultHash ,
  initialHash ,
  camerasRef ,
  cameraIndex ,
  cycleCameras ,
  setSrc ,
  dataSeen ,
  currentSignature ,
  canvasesRef ,
  copyVideoToSnapshotCanvas ,
  takeSnapshot ,
  getTimestamp ,
  setHashToNow ,
  onClick ,
  addToPast ,
  setCode ,
  setText ,
  onHashChange ,
  setOpacity ,
  frameCount ,
  onTick ,
  _onInput ,
  onInput ,
  init ,
  
}
/* codeRegex Not a pure module */
