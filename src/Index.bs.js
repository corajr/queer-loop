// Generated by BUCKLESCRIPT VERSION 5.0.2, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Instascan = require("instascan");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Js_null_undefined = require("bs-platform/lib/js/js_null_undefined.js");
var Instascan$QueerLoop = require("./Instascan.bs.js");
var QrCodeGen$QueerLoop = require("./QrCodeGen.bs.js");

function maybeSetCode(maybeEl, text) {
  Belt_Option.map(maybeEl, (function (el) {
          return QrCodeGen$QueerLoop.setSvg(qrcodegen.QrCode.encodeText(text, qrcodegen.QrCode.Ecc.MEDIUM), el);
        }));
  return /* () */0;
}

var domain = "qqq.lu";

var camerasRef = /* record */[/* contents : array */[]];

var cameraIndex = /* record */[/* contents */0];

function cycle(scanner) {
  var n = camerasRef[0].length;
  cameraIndex[0] = Caml_int32.mod_(cameraIndex[0] + 1 | 0, n);
  var nextCamera = Caml_array.caml_array_get(camerasRef[0], cameraIndex[0]);
  scanner.start(nextCamera);
  return /* () */0;
}

var codeRegex = new RegExp("https:\\/\\/qqq.lu\\/#(.+)");

function init(param) {
  var videoEl = document.querySelector("#preview");
  var qrcodeEl = document.querySelector("#code");
  var qrcodeEl$1 = (qrcodeEl == null) ? undefined : Caml_option.some(qrcodeEl);
  var initialHash = window.location.hash;
  var hash = initialHash === "" ? (window.location.hash = "0", "#0") : initialHash;
  maybeSetCode(qrcodeEl$1, "https://" + (domain + ("/" + hash)));
  var instascanOpts = {
    video: Js_null_undefined.fromOption((videoEl == null) ? undefined : Caml_option.some(videoEl))
  };
  var scanner = new Instascan.Scanner(instascanOpts);
  var response = function (input) {
    var match = codeRegex.exec(input);
    if (match !== null) {
      var match$1 = Caml_array.caml_array_get(match, 1);
      if (match$1 == null) {
        return /* () */0;
      } else {
        var i;
        try {
          i = Caml_format.caml_int_of_string(match$1);
        }
        catch (exn){
          console.log("Error: " + (match$1 + " is invalid."));
          i = 0;
        }
        var nextHash = String(i + 1 | 0);
        window.location.hash = nextHash;
        return maybeSetCode(qrcodeEl$1, "https://" + (domain + ("/#" + nextHash)));
      }
    } else {
      return /* () */0;
    }
  };
  scanner.addListener("scan", response);
  window.addEventListener("click", (function (param) {
          return cycle(scanner);
        }));
  Curry._1(Instascan$QueerLoop.Camera[/* getCameras */0], /* () */0).then((function (cameras) {
            camerasRef[0] = cameras;
            if (cameras.length !== 0) {
              scanner.start(Caml_array.caml_array_get(cameras, 0));
            } else {
              console.error("No cameras found!");
            }
            return Promise.resolve(/* () */0);
          })).catch((function (err) {
          console.error("getCameras failed", err);
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

window.addEventListener("load", (function (param) {
        return init(/* () */0);
      }));

exports.maybeSetCode = maybeSetCode;
exports.domain = domain;
exports.camerasRef = camerasRef;
exports.cameraIndex = cameraIndex;
exports.cycle = cycle;
exports.codeRegex = codeRegex;
exports.init = init;
/* codeRegex Not a pure module */
