// Generated by BUCKLESCRIPT VERSION 5.0.2, PLEASE EDIT WITH CARE
'use strict';

var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function getPathString(code, border) {
  var size = code.size;
  var modules = code.getModules();
  var parts = /* array */[];
  for(var y = 0 ,y_finish = size - 1 | 0; y <= y_finish; ++y){
    for(var x = 0 ,x_finish = size - 1 | 0; x <= x_finish; ++x){
      if (Caml_array.caml_array_get(Caml_array.caml_array_get(modules, y), x)) {
        parts.push("M" + (String(x + border | 0) + ("," + (String(y + border | 0) + "h1v1h-1z"))));
      }
      
    }
  }
  return parts.join(" ");
}

function getSvgDataUri(code, data, maybePastUrl) {
  var pathString = getPathString(code, 4);
  var sizeWithBorder = code.size + 8 | 0;
  var pastData = maybePastUrl !== undefined ? "<image href=\"" + (String(maybePastUrl) + ("\" x=\"0\" y=\"0\" width=\"" + (String(sizeWithBorder) + ("\" height=\"" + (String(sizeWithBorder) + "\" />"))))) : "";
  var svg = "<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 " + (String(sizeWithBorder) + (" " + (String(sizeWithBorder) + ("\" stroke=\"none\">\n     <defs>\n     <linearGradient id=\"rainbow\">\n     <stop offset=\"0.000%\" stop-color=\"#ffb5b5\" />\n     <stop offset=\"14.286%\" stop-color=\"#fcdc85\" />\n     <stop offset=\"28.571%\" stop-color=\"#caf79c\" />\n     <stop offset=\"42.857%\" stop-color=\"#a8fdbf\" />\n     <stop offset=\"57.143%\" stop-color=\"#70feff\" />\n     <stop offset=\"71.429%\" stop-color=\"#a8bffd\" />\n     <stop offset=\"85.714%\" stop-color=\"#ca9cf7\" />\n     <stop offset=\"100.000%\" stop-color=\"#fc85dc\" />\n     </linearGradient></defs>\n     " + (String(pastData) + ("\n     <rect width=\"100%\" height=\"100%\" fill=\"url(#rainbow)\" fill-opacity=\"0.4\" />\n     <path d=\"" + (String(pathString) + "\" fill=\"black\" />\n     </svg>")))))));
  return "data:image/svg+xml;utf8," + encodeURIComponent(svg);
}

var svgXmlns = "http://www.w3.org/2000/svg";

function createSvg(parent, maybePrevious, maybeSnapshot, hash, code) {
  var size = code.size;
  var sizeWithBorder = size + 8 | 0;
  var viewBox = "0 0 " + (String(sizeWithBorder) + (" " + (String(sizeWithBorder) + "")));
  var childSvg = document.createElementNS(svgXmlns, "svg");
  childSvg.setAttribute("viewBox", viewBox);
  var past = document.createElementNS(svgXmlns, "g");
  var scaleFactor = 1.0 - 2.0 / sizeWithBorder;
  scaleFactor.toString();
  past.setAttribute("transform", "translate(" + (String(1) + ("," + (String(1) + (") scale(" + (String(scaleFactor) + ")"))))));
  if (maybePrevious !== undefined) {
    past.appendChild(Caml_option.valFromOption(maybePrevious));
  }
  childSvg.appendChild(past);
  if (maybeSnapshot !== undefined) {
    var snapshotImage = document.createElementNS(svgXmlns, "image");
    snapshotImage.setAttribute("href", maybeSnapshot);
    snapshotImage.setAttribute("x", "0");
    snapshotImage.setAttribute("y", "0");
    snapshotImage.setAttribute("width", String(sizeWithBorder));
    snapshotImage.setAttribute("height", String(sizeWithBorder));
    snapshotImage.setAttribute("style", "opacity: 0.5");
    childSvg.appendChild(snapshotImage);
  }
  var mask = document.createElementNS(svgXmlns, "mask");
  mask.id = "m" + hash;
  var blank = document.createElementNS(svgXmlns, "rect");
  blank.setAttribute("width", "100%");
  blank.setAttribute("height", "100%");
  blank.setAttribute("fill", "#FFFFFF");
  mask.appendChild(blank);
  var symbol = document.createElementNS(svgXmlns, "symbol");
  symbol.id = "s" + hash;
  var path = document.createElementNS(svgXmlns, "path");
  path.setAttribute("d", getPathString(code, 4));
  symbol.appendChild(path);
  childSvg.appendChild(symbol);
  var use = document.createElementNS(svgXmlns, "use");
  use.setAttribute("href", "#s" + hash);
  use.setAttribute("fill", "#000000");
  mask.appendChild(use);
  childSvg.appendChild(mask);
  var rainbow = document.createElementNS(svgXmlns, "rect");
  rainbow.setAttribute("width", "100%");
  rainbow.setAttribute("height", "100%");
  rainbow.setAttribute("fill", "url(#rainbow)");
  rainbow.setAttribute("fill-opacity", "0.5");
  rainbow.setAttribute("mask", "url(#m" + (hash + ")"));
  childSvg.appendChild(rainbow);
  var use2 = document.createElementNS(svgXmlns, "use");
  use2.setAttribute("href", "#s" + hash);
  use2.setAttribute("fill", "#000000");
  use2.setAttribute("fill-opacity", "0.5");
  childSvg.appendChild(use2);
  parent.appendChild(childSvg);
  return childSvg;
}

var $$XMLSerializer = /* module */[];

function svgToDataURL(svg) {
  var xmlSerializer = new XMLSerializer();
  var str = xmlSerializer.serializeToString(svg);
  return "data:image/svg+xml;utf8," + encodeURIComponent(str);
}

function drawCanvas(canvas, code) {
  var size = code.size;
  var width = size + 4 | 0;
  if (canvas.width !== width) {
    canvas.width = width;
    canvas.height = width;
  }
  var ctx = canvas.getContext("2d");
  ctx.globalCompositeOperation = "difference";
  ctx.fillStyle = "#FFFFFF";
  for(var y = -2 ,y_finish = size + 2 | 0; y <= y_finish; ++y){
    for(var x = -2 ,x_finish = size + 2 | 0; x <= x_finish; ++x){
      if (code.getModule(x, y)) {
        ctx.fillRect(x + 2 | 0, y + 2 | 0, 1, 1);
      }
      
    }
  }
  return /* () */0;
}

exports.getPathString = getPathString;
exports.getSvgDataUri = getSvgDataUri;
exports.svgXmlns = svgXmlns;
exports.createSvg = createSvg;
exports.$$XMLSerializer = $$XMLSerializer;
exports.svgToDataURL = svgToDataURL;
exports.drawCanvas = drawCanvas;
/* No side effect */
