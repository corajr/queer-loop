// Generated by BUCKLESCRIPT VERSION 5.0.2, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

function boolToHex(b) {
  if (b) {
    return "f";
  } else {
    return "0";
  }
}

function moduleArrayToRgbHex(modules) {
  var width = modules.length;
  var height = Caml_array.caml_array_get(modules, 0).length;
  var rgbModules = $$Array.make_matrix(width, height, "#fff");
  var rgbWidth = width / 3 | 0;
  for(var i = 0 ,i_finish = rgbWidth - 1 | 0; i <= i_finish; ++i){
    for(var j = 0 ,j_finish = height - 1 | 0; j <= j_finish; ++j){
      var x = Caml_int32.imul(i, 3);
      var r = Caml_array.caml_array_get(Caml_array.caml_array_get(modules, j), x);
      var match = (x + 1 | 0) < rgbWidth;
      var g = match ? Caml_array.caml_array_get(Caml_array.caml_array_get(modules, j), x + 1 | 0) : false;
      var match$1 = (x + 2 | 0) < rgbWidth;
      var b = match$1 ? Caml_array.caml_array_get(Caml_array.caml_array_get(modules, j), x + 2 | 0) : false;
      Caml_array.caml_array_set(Caml_array.caml_array_get(rgbModules, i), j, "#" + $$String.concat("", List.map(boolToHex, /* :: */[
                    r,
                    /* :: */[
                      g,
                      /* :: */[
                        b,
                        /* [] */0
                      ]
                    ]
                  ])));
    }
  }
  return rgbModules;
}

function rgbModulesToSvgString (modules){

     var border = 4;
     var width = modules[0].length;
     var height = modules.length;

		 if (border < 0)
		 throw "Border must be non-negative";
		 var rects = [];
		 for (var y = 0; y < height; y++) {
		 for (var x = 0; x < width; x++) {
     rects.push(
       '<rect width="1" height="1" fill="' + modules[x][y] +
       '" x="' + (x + border) + '" y="' + (y + border) +  '" />');

		 }
		 }
		 return '<?xml version="1.0" encoding="UTF-8"?>\n' +
		 '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n' +
		 '<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 ' +
		 (width + border * 2) + ' ' + (height + border * 2) + '" stroke="none">\n' +
		 '<rect width="100%" height="100%" fill="#FFFFFF"/>\n' +
     rects.join(" ") +
		 '</svg>\n';
     };

function getPathString(code) {
  var size = code.size;
  var modules = code.getModules();
  var parts = /* array */[];
  for(var y = 0 ,y_finish = size - 1 | 0; y <= y_finish; ++y){
    for(var x = 0 ,x_finish = size - 1 | 0; x <= x_finish; ++x){
      if (Caml_array.caml_array_get(Caml_array.caml_array_get(modules, y), x)) {
        parts.push("M" + (String(x + 4 | 0) + ("," + (String(y + 4 | 0) + "h1v1h-1z"))));
      }
      
    }
  }
  return parts.join(" ");
}

function modulesToSvgString (modules,foreignCodes){
     var border = 4;
     var size = modules.length;

		 if (border < 0)
		 throw "Border must be non-negative";
		 var parts = [];
     var n = ~~((size + (border * 2)) / 2);
     var meta = foreignCodes.map((code, i) => {
       var x = i % n;
       var y = ~~(i / n);
       return '<image href="' + code + '" x="' + x * 2 + '" y="' + y * 2 + '" width="2" height="2" />'
     });
		 for (var y = 0; y < size; y++) {
		 for (var x = 0; x < size; x++) {

     if (modules[y][x]) {
		 parts.push("M" + (x + border) + "," + (y + border) + "h1v1h-1z");
     }
		 }
		 }
		 return '<?xml version="1.0" encoding="UTF-8"?>\n' +
		 '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n' +
		 '<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 ' +
		 (size + border * 2) + ' ' + (size + border * 2) + '" stroke="none">' +
     '<symbol id="code"><path d="' + parts.join(" ") + '" /></symbol>' +
     '<defs>' +
     '<mask id="mask">' +
     '<rect width="100%" height="100%" fill="#FFFFFF" />\n' +
     '<use href="#code" fill="#000000" />' +
     '</mask>' +
     '<linearGradient id="rainbow">' +
     '<stop offset="0.000%" stop-color="#ffb5b5" />' +
     '<stop offset="14.286%" stop-color="#fcdc85" />' +
     '<stop offset="28.571%" stop-color="#caf79c" />' +
     '<stop offset="42.857%" stop-color="#a8fdbf" />' +
     '<stop offset="57.143%" stop-color="#70feff" />' +
     '<stop offset="71.429%" stop-color="#a8bffd" />' +
     '<stop offset="85.714%" stop-color="#ca9cf7" />' +
     '<stop offset="100.000%" stop-color="#fc85dc" />' +
     '</linearGradient></defs>' +
     '<rect width="100%" height="100%" fill="url(#rainbow)" mask="url(#mask)" />\n' +
     '<use href="#code" fill="#000000" />' +
     '<g>' + meta.join("") + '</g>' +
		 '</svg>';
     };

function _getSvgDataUri(code, foreignCodes) {
  var moduleArray = code.getModules();
  var svg = modulesToSvgString(moduleArray, foreignCodes);
  return "data:image/svg+xml;utf8," + encodeURIComponent(svg);
}

function getSvgDataUri(code, maybePastUrl) {
  var pathString = getPathString(code);
  var sizeWithBorder = code.size + 8 | 0;
  var pastData = maybePastUrl !== undefined ? "<image href=\"" + (String(maybePastUrl) + ("\" x=\"0\" y=\"0\" width=\"" + (String(sizeWithBorder) + ("\" height=\"" + (String(sizeWithBorder) + "\" />"))))) : "";
  var svg = "<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 " + (String(sizeWithBorder) + (" " + (String(sizeWithBorder) + ("\" stroke=\"none\">\n     <defs>\n     <linearGradient id=\"rainbow\">\n     <stop offset=\"0.000%\" stop-color=\"#ffb5b5\" />\n     <stop offset=\"14.286%\" stop-color=\"#fcdc85\" />\n     <stop offset=\"28.571%\" stop-color=\"#caf79c\" />\n     <stop offset=\"42.857%\" stop-color=\"#a8fdbf\" />\n     <stop offset=\"57.143%\" stop-color=\"#70feff\" />\n     <stop offset=\"71.429%\" stop-color=\"#a8bffd\" />\n     <stop offset=\"85.714%\" stop-color=\"#ca9cf7\" />\n     <stop offset=\"100.000%\" stop-color=\"#fc85dc\" />\n     </linearGradient></defs>\n     " + (String(pastData) + ("\n     <rect width=\"100%\" height=\"100%\" fill=\"white\" fill-opacity=\"0.2\" />\n     <path d=\"" + (String(pathString) + "\" fill=\"black\" />\n     </svg>")))))));
  return "data:image/svg+xml;utf8," + encodeURIComponent(svg);
}

function drawCanvas(canvas, code) {
  var size = code.size;
  var width = size + 4 | 0;
  if (canvas.width !== width) {
    canvas.width = width;
    canvas.height = width;
  }
  var ctx = canvas.getContext("2d");
  ctx.globalCompositeOperation = "difference";
  ctx.fillStyle = "#FFFFFF";
  for(var y = -2 ,y_finish = size + 2 | 0; y <= y_finish; ++y){
    for(var x = -2 ,x_finish = size + 2 | 0; x <= x_finish; ++x){
      if (code.getModule(x, y)) {
        ctx.fillRect(x + 2 | 0, y + 2 | 0, 1, 1);
      }
      
    }
  }
  return /* () */0;
}

exports.boolToHex = boolToHex;
exports.moduleArrayToRgbHex = moduleArrayToRgbHex;
exports.rgbModulesToSvgString = rgbModulesToSvgString;
exports.getPathString = getPathString;
exports.modulesToSvgString = modulesToSvgString;
exports._getSvgDataUri = _getSvgDataUri;
exports.getSvgDataUri = getSvgDataUri;
exports.drawCanvas = drawCanvas;
/* No side effect */
