// Generated by BUCKLESCRIPT VERSION 5.0.2, PLEASE EDIT WITH CARE

import * as Caml_array from "../node_modules/bs-platform/lib/es6/caml_array.js";
import * as Caml_option from "../node_modules/bs-platform/lib/es6/caml_option.js";

function getPathString(code, border) {
  var size = code.size;
  var modules = code.getModules();
  var parts = /* array */[];
  for(var y = 0 ,y_finish = size - 1 | 0; y <= y_finish; ++y){
    for(var x = 0 ,x_finish = size - 1 | 0; x <= x_finish; ++x){
      if (Caml_array.caml_array_get(Caml_array.caml_array_get(modules, y), x)) {
        parts.push("M" + (String(x + border | 0) + ("," + (String(y + border | 0) + "h1v1h-1z"))));
      }
      
    }
  }
  return parts.join(" ");
}

var svgNs = "http://www.w3.org/2000/svg";

function createQrCodePathElement(code, border) {
  var path = document.createElementNS(svgNs, "path");
  path.setAttribute("d", getPathString(code, border));
  return path;
}

function createRainbowGradient(lightness) {
  var gradient = document.createElementNS(svgNs, "linearGradient");
  gradient.id = "rainbow";
  for(var i = 0; i <= 7; ++i){
    var stop = document.createElementNS(svgNs, "stop");
    stop.setAttribute("offset", (100.0 * i / 7.0).toString() + "%");
    stop.setAttribute("stop-color", "hsl(" + ((i / 8.0).toString() + ("turn,100%," + ((lightness * 100.0).toString() + "%)"))));
    gradient.appendChild(stop);
  }
  gradient.setAttribute("gradientTransform", "rotate(45)");
  return gradient;
}

function makeAnimate(values, duration, animBegin) {
  var animate = document.createElementNS(svgNs, "animate");
  animate.setAttribute("attributeName", "opacity");
  animate.setAttribute("values", values);
  animate.setAttribute("dur", duration);
  animate.setAttribute("begin", animBegin);
  animate.setAttribute("fill", "freeze");
  animate.setAttribute("calcMode", "spline");
  animate.setAttribute("keyTimes", "0;0.5;1");
  animate.setAttribute("keySplines", Caml_array.caml_make_vect(2, ".5 0 .5 1").join(";"));
  animate.setAttribute("repeatCount", "indefinite");
  return animate;
}

function createSymbol(href, code, hash, maybeDataURL, localeString, border) {
  var size = code.size;
  var sizeWithBorder = size + (border << 1) | 0;
  var viewBox = "0 0 " + (String(sizeWithBorder) + (" " + (String(sizeWithBorder) + "")));
  var symbol = document.createElementNS(svgNs, "symbol");
  symbol.id = "code" + hash;
  symbol.setAttribute("viewBox", viewBox);
  if (maybeDataURL !== undefined) {
    var background = document.createElementNS(svgNs, "image");
    background.setAttribute("x", "0");
    background.setAttribute("y", "0");
    background.setAttribute("width", String(sizeWithBorder));
    background.setAttribute("height", String(sizeWithBorder));
    background.setAttribute("href", maybeDataURL);
    var bgAnimate = makeAnimate("0;1;0", "6s", "0s");
    background.appendChild(bgAnimate);
    symbol.appendChild(background);
  }
  var codeGroup = document.createElementNS(svgNs, "g");
  var rainbow = document.createElementNS(svgNs, "rect");
  rainbow.id = "rainbowMask";
  rainbow.setAttribute("width", "100%");
  rainbow.setAttribute("height", "100%");
  rainbow.setAttribute("fill", "url(#rainbow)");
  codeGroup.appendChild(rainbow);
  var path = createQrCodePathElement(code, border);
  codeGroup.appendChild(path);
  var codeGroupAnimate = makeAnimate("1;0;1", "6s", "0s");
  codeGroupAnimate.id = "clock" + hash;
  codeGroup.appendChild(codeGroupAnimate);
  symbol.appendChild(codeGroup);
  var timeText = document.createElementNS(svgNs, "text");
  timeText.setAttribute("x", (sizeWithBorder / 2.0).toString());
  timeText.setAttribute("y", (border / 2.0).toString());
  timeText.setAttribute("font-size", (border / 2.0).toString() + "px");
  timeText.setAttribute("text-anchor", "middle");
  timeText.setAttribute("alignment-baseline", "middle");
  timeText.setAttribute("style", "text-align: center; font-family: \"Courier New\", monospace;");
  timeText.setAttribute("textLength", "90%");
  timeText.setAttribute("fill", "#FFFFFF");
  timeText.setAttribute("style", "mix-blend-mode: difference");
  timeText.textContent = localeString;
  var timeLink = document.createElementNS(svgNs, "a");
  timeLink.setAttribute("href", href);
  timeLink.appendChild(timeText);
  symbol.appendChild(timeLink);
  return symbol;
}

function createSimpleSvg(href, hash, code, border, timestamp, localeString, maybeDataURL) {
  var svg = document.createElementNS(svgNs, "svg");
  svg.setAttribute("viewBox", "0 0 1 1");
  var defs = document.createElementNS(svgNs, "defs");
  var rainbowGradient = createRainbowGradient(0.85);
  defs.appendChild(rainbowGradient);
  svg.appendChild(defs);
  var symbol = createSymbol(href, code, hash, maybeDataURL, localeString, border);
  svg.appendChild(symbol);
  var use = document.createElementNS(svgNs, "use");
  use.setAttribute("href", "#code" + hash);
  svg.appendChild(use);
  return svg;
}

function createSvgSkeleton(hash) {
  var svg = document.createElementNS(svgNs, "svg");
  svg.setAttribute("viewBox", "0 0 1 1");
  var defs = document.createElementNS(svgNs, "defs");
  var rainbowGradient = createRainbowGradient(0.85);
  defs.appendChild(rainbowGradient);
  svg.appendChild(defs);
  var use = document.createElementNS(svgNs, "use");
  use.setAttribute("href", "#code" + hash);
  svg.appendChild(use);
  return svg;
}

function createSvg(parent, maybePrevious, maybeSnapshot, hash, code) {
  var size = code.size;
  var sizeWithBorder = size + 8 | 0;
  var viewBox = "0 0 " + (String(sizeWithBorder) + (" " + (String(sizeWithBorder) + "")));
  var childSvg = document.createElementNS(svgNs, "svg");
  childSvg.setAttribute("viewBox", viewBox);
  var past = document.createElementNS(svgNs, "g");
  var scaleFactor = 1.0 - 2.0 / sizeWithBorder;
  scaleFactor.toString();
  past.setAttribute("transform", "translate(" + (String(1) + ("," + (String(1) + (") scale(" + (String(scaleFactor) + ")"))))));
  if (maybePrevious !== undefined) {
    past.appendChild(Caml_option.valFromOption(maybePrevious));
  }
  childSvg.appendChild(past);
  if (maybeSnapshot !== undefined) {
    var snapshotImage = document.createElementNS(svgNs, "image");
    snapshotImage.setAttribute("href", maybeSnapshot);
    snapshotImage.setAttribute("x", "0");
    snapshotImage.setAttribute("y", "0");
    snapshotImage.setAttribute("width", String(sizeWithBorder));
    snapshotImage.setAttribute("height", String(sizeWithBorder));
    snapshotImage.setAttribute("style", "opacity: 0.5");
    childSvg.appendChild(snapshotImage);
  }
  var mask = document.createElementNS(svgNs, "mask");
  mask.id = "m" + hash;
  var blank = document.createElementNS(svgNs, "rect");
  blank.setAttribute("width", "100%");
  blank.setAttribute("height", "100%");
  blank.setAttribute("fill", "#FFFFFF");
  mask.appendChild(blank);
  var symbol = document.createElementNS(svgNs, "symbol");
  symbol.id = "s" + hash;
  var path = createQrCodePathElement(code, 4);
  symbol.appendChild(path);
  childSvg.appendChild(symbol);
  var use = document.createElementNS(svgNs, "use");
  use.setAttribute("href", "#s" + hash);
  use.setAttribute("fill", "#000000");
  mask.appendChild(use);
  childSvg.appendChild(mask);
  var rainbow = document.createElementNS(svgNs, "rect");
  rainbow.setAttribute("width", "100%");
  rainbow.setAttribute("height", "100%");
  rainbow.setAttribute("fill", "url(#rainbow)");
  rainbow.setAttribute("fill-opacity", "0.5");
  rainbow.setAttribute("mask", "url(#m" + (hash + ")"));
  childSvg.appendChild(rainbow);
  var use2 = document.createElementNS(svgNs, "use");
  use2.setAttribute("href", "#s" + hash);
  use2.setAttribute("stroke-width", "0.01");
  use2.setAttribute("fill", "#000000");
  use2.setAttribute("fill-opacity", "0.5");
  childSvg.appendChild(use2);
  parent.appendChild(childSvg);
  return childSvg;
}

var $$XMLSerializer = /* module */[];

function svgToDataURL(svg) {
  var xmlSerializer = new XMLSerializer();
  var str = xmlSerializer.serializeToString(svg);
  return "data:image/svg+xml;utf8," + encodeURIComponent(str);
}

function drawCanvas(canvas, code) {
  var size = code.size;
  var width = size + 4 | 0;
  if (canvas.width !== width) {
    canvas.width = width;
    canvas.height = width;
  }
  var ctx = canvas.getContext("2d");
  ctx.globalCompositeOperation = "difference";
  ctx.fillStyle = "#FFFFFF";
  for(var y = -2 ,y_finish = size + 2 | 0; y <= y_finish; ++y){
    for(var x = -2 ,x_finish = size + 2 | 0; x <= x_finish; ++x){
      if (code.getModule(x, y)) {
        ctx.fillRect(x + 2 | 0, y + 2 | 0, 1, 1);
      }
      
    }
  }
  return /* () */0;
}

export {
  getPathString ,
  svgNs ,
  createQrCodePathElement ,
  createRainbowGradient ,
  makeAnimate ,
  createSymbol ,
  createSimpleSvg ,
  createSvgSkeleton ,
  createSvg ,
  $$XMLSerializer ,
  svgToDataURL ,
  drawCanvas ,
  
}
/* No side effect */
