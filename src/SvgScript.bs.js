// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Belt_SetString from "bs-platform/lib/es6/belt_SetString.js";
import * as Util$QueerLoop from "./Util.bs.js";

function setAnimacy(svg, hash) {
  Util$QueerLoop.withQuerySelectorAllFrom(".animate", svg, (function (param) {
          return $$Array.map((function (animated) {
                        animated.setAttribute("class", "code previous");
                        
                      }), param);
        }));
  Util$QueerLoop.withQuerySelectorAllFrom(".previous", svg, (function (param) {
          return $$Array.map((function (animated) {
                        animated.setAttribute("class", "code");
                        
                      }), param);
        }));
  Util$QueerLoop.withQuerySelectorAllFrom(".selected", svg, (function (param) {
          return $$Array.map((function (animated) {
                        animated.setAttribute("class", "code");
                        
                      }), param);
        }));
  return Belt_Option.map(Caml_option.nullable_to_opt(svg.querySelector("#code" + hash)), (function (toAnimate) {
                toAnimate.setAttribute("class", "code animate");
                
              }));
}

function setSelection(svg, hash) {
  Util$QueerLoop.withQuerySelectorAllFrom(".animate", svg, (function (param) {
          return $$Array.map((function (animated) {
                        animated.setAttribute("class", "code");
                        
                      }), param);
        }));
  Util$QueerLoop.withQuerySelectorAllFrom(".previous", svg, (function (param) {
          return $$Array.map((function (animated) {
                        animated.setAttribute("class", "code");
                        
                      }), param);
        }));
  Util$QueerLoop.withQuerySelectorAllFrom(".selected", svg, (function (param) {
          return $$Array.map((function (animated) {
                        animated.setAttribute("class", "code");
                        
                      }), param);
        }));
  return Belt_Option.map(Caml_option.nullable_to_opt(svg.querySelector("#code" + hash)), (function (toAnimate) {
                toAnimate.setAttribute("class", "code selected");
                
              }));
}

function modifyClassSet(f, el) {
  var s = el.getAttribute("class");
  var newSet = (s == null) ? Curry._1(f, undefined) : Curry._1(f, Belt_SetString.fromArray(s.split(" ")));
  el.setAttribute("class", Belt_SetString.toArray(newSet).join(" "));
  
}

function getClassesSvg(el) {
  var s = el.getAttribute("class");
  if (!(s == null)) {
    return Belt_SetString.fromArray(s.split(" "));
  }
  
}

function addClassSvg(el, classNameToAdd) {
  return modifyClassSet((function (s) {
                return Belt_SetString.add(s, classNameToAdd);
              }), el);
}

function removeClassSvg(el, classNameToRemove) {
  return modifyClassSet((function (s) {
                return Belt_SetString.remove(s, classNameToRemove);
              }), el);
}

function toggleClassSvg(el, classNameToToggle) {
  return modifyClassSet((function (s) {
                if (Belt_SetString.has(s, classNameToToggle)) {
                  return Belt_SetString.remove(s, classNameToToggle);
                } else {
                  return Belt_SetString.add(s, classNameToToggle);
                }
              }), el);
}

function toggleHash(hash) {
  Util$QueerLoop.withQuerySelectorDom("#code" + hash, (function (code) {
          return toggleClassSvg(code, "active");
        }));
  var result = Belt_Array.some(Util$QueerLoop.withQuerySelectorAll(".code" + hash, (function (param) {
              return $$Array.map((function (link) {
                            var linkClasses = link.classList;
                            return linkClasses.toggle("active");
                          }), param);
            })), (function (x) {
          return x;
        }));
  Util$QueerLoop.withQuerySelectorAll(".active", (function (a) {
          Util$QueerLoop.withQuerySelectorDom(".code.animate", (function (code) {
                  if (!Belt_SetString.has(getClassesSvg(code), "active")) {
                    if (a.length !== 0) {
                      return addClassSvg(code, "temporarilyInactive");
                    } else {
                      return removeClassSvg(code, "temporarilyInactive");
                    }
                  }
                  
                }));
          
        }));
  return result;
}

export {
  setAnimacy ,
  setSelection ,
  modifyClassSet ,
  getClassesSvg ,
  addClassSvg ,
  removeClassSvg ,
  toggleClassSvg ,
  toggleHash ,
  
}
/* Util-QueerLoop Not a pure module */
