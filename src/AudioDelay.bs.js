// Generated by BUCKLESCRIPT VERSION 5.0.2, PLEASE EDIT WITH CARE

import * as Block from "../node_modules/bs-platform/lib/es6/block.js";
import * as Audio$QueerLoop from "./Audio.bs.js";

function setupDelay(audioContext, sourceNode, output, $staropt$star, $staropt$star$1, $staropt$star$2, param) {
  var gain = $staropt$star !== undefined ? $staropt$star : 0.7;
  var cutoff = $staropt$star$1 !== undefined ? $staropt$star$1 : 2000.0;
  var midiNote = $staropt$star$2 !== undefined ? $staropt$star$2 : 45.0;
  var now = audioContext.currentTime;
  var masterGainNode = audioContext.createGain();
  var masterDelayNode = audioContext.createDelay(4.0);
  masterDelayNode.delayTime.setValueAtTime(4.0, now);
  masterGainNode.gain.setValueAtTime(0.5, now);
  var delayNode = audioContext.createDelay(1.0);
  var biquadFilter = Audio$QueerLoop.makeFilter(audioContext, /* LowPass */Block.__(0, [
          cutoff,
          0.0
        ]));
  var gainNode = audioContext.createGain();
  var delayOffset = 128.0 / audioContext.sampleRate;
  var delayPeriod = 1.0 / Audio$QueerLoop.noteToFrequency(midiNote) - delayOffset;
  console.log(delayPeriod);
  gainNode.gain.setValueAtTime(gain, now);
  delayNode.delayTime.setValueAtTime(delayPeriod, now);
  sourceNode.connect(masterDelayNode);
  masterDelayNode.connect(delayNode);
  delayNode.connect(biquadFilter);
  biquadFilter.connect(gainNode);
  gainNode.connect(delayNode);
  gainNode.connect(masterGainNode);
  masterGainNode.connect(output);
  return /* record */[
          /* delayNode */delayNode,
          /* masterDelayNode */masterDelayNode,
          /* biquadFilter */biquadFilter,
          /* gainNode */gainNode,
          /* masterGainNode */masterGainNode
        ];
}

export {
  setupDelay ,
  
}
/* Audio-QueerLoop Not a pure module */
