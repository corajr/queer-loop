// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Time$QueerLoop = require("../src/Time.bs.js");

Jest.describe("Timestamp parsing", (function (param) {
        Jest.describe("parseTimestampFromText", (function (param) {
                Jest.test("valid ISO string", (function (param) {
                        return Jest.Expect.toEqual(1710936000000.0, Jest.Expect.expect(Time$QueerLoop.parseTimestampFromText("2024-03-20T12:00:00.000Z")));
                      }));
                Jest.test("valid ISO string (no ms)", (function (param) {
                        return Jest.Expect.toEqual(1710936000000.0, Jest.Expect.expect(Time$QueerLoop.parseTimestampFromText("2024-03-20T12:00:00Z")));
                      }));
                Jest.test("invalid date", (function (param) {
                        return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Time$QueerLoop.parseTimestampFromText("invalid date")));
                      }));
                return Jest.test("empty string", (function (param) {
                              return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Time$QueerLoop.parseTimestampFromText("")));
                            }));
              }));
        return Jest.describe("parseTimestampFromFragment", (function (param) {
                      Jest.test("href with Unix milliseconds", (function (param) {
                              return Jest.Expect.toEqual(1710936000000.0, Jest.Expect.expect(Time$QueerLoop.parseTimestampFromFragment("https://example.com/#1710936000000")));
                            }));
                      Jest.test("href with ISO fragment", (function (param) {
                              return Jest.Expect.toEqual(1710936000000.0, Jest.Expect.expect(Time$QueerLoop.parseTimestampFromFragment("https://example.com/#2024-03-20T12:00:00.000Z")));
                            }));
                      Jest.test("href with ISO fragment (no ms)", (function (param) {
                              return Jest.Expect.toEqual(1710936000000.0, Jest.Expect.expect(Time$QueerLoop.parseTimestampFromFragment("https://example.com/#2024-03-20T12:00:00Z")));
                            }));
                      Jest.test("href with invalid fragment", (function (param) {
                              return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Time$QueerLoop.parseTimestampFromFragment("https://example.com/#invalid")));
                            }));
                      Jest.test("href with no fragment", (function (param) {
                              return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Time$QueerLoop.parseTimestampFromFragment("https://example.com/")));
                            }));
                      Jest.test("not a url", (function (param) {
                              return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Time$QueerLoop.parseTimestampFromFragment("not a url")));
                            }));
                      return Jest.test("empty string", (function (param) {
                                    return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Time$QueerLoop.parseTimestampFromFragment("")));
                                  }));
                    }));
      }));

/*  Not a pure module */
