{"version":3,"file":"worker.js","sources":["node_modules/jsqr-es6/dist/jsQR.js","node_modules/bs-platform/lib/es6/caml_option.js","src/JsQr.bs.js","src/DecodeWorker.bs.js"],"sourcesContent":["class BitMatrix {\n    static createEmpty(width, height) {\n        return new BitMatrix(new Uint8ClampedArray(width * height), width);\n    }\n    constructor(data, width) {\n        this.width = width;\n        this.height = data.length / width;\n        this.data = data;\n    }\n    get(x, y) {\n        if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n            return false;\n        }\n        return !!this.data[y * this.width + x];\n    }\n    set(x, y, v) {\n        this.data[y * this.width + x] = v ? 1 : 0;\n    }\n    setRegion(left, top, width, height, v) {\n        for (let y = top; y < top + height; y++) {\n            for (let x = left; x < left + width; x++) {\n                this.set(x, y, !!v);\n            }\n        }\n    }\n}\n\nconst REGION_SIZE = 8;\nconst MIN_DYNAMIC_RANGE = 24;\nfunction numBetween(value, min, max) {\n    return value < min ? min : value > max ? max : value;\n}\n// Like BitMatrix but accepts arbitry Uint8 values\nclass Matrix {\n    constructor(width, height, buffer) {\n        this.width = width;\n        const bufferSize = width * height;\n        if (buffer && buffer.length !== bufferSize) {\n            throw new Error(\"Wrong buffer size\");\n        }\n        this.data = buffer || new Uint8ClampedArray(bufferSize);\n    }\n    get(x, y) {\n        return this.data[y * this.width + x];\n    }\n    set(x, y, value) {\n        this.data[y * this.width + x] = value;\n    }\n}\nfunction binarize(data, width, height, returnInverted, greyscaleWeights, canOverwriteImage) {\n    const pixelCount = width * height;\n    if (data.length !== pixelCount * 4) {\n        throw new Error(\"Malformed data passed to binarizer.\");\n    }\n    // assign the greyscale and binary image within the rgba buffer as the rgba image will not be needed after conversion\n    let bufferOffset = 0;\n    // Convert image to greyscale\n    let greyscaleBuffer;\n    if (canOverwriteImage) {\n        greyscaleBuffer = new Uint8ClampedArray(data.buffer, bufferOffset, pixelCount);\n        bufferOffset += pixelCount;\n    }\n    const greyscalePixels = new Matrix(width, height, greyscaleBuffer);\n    if (greyscaleWeights.useIntegerApproximation) {\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                const pixelPosition = (y * width + x) * 4;\n                const r = data[pixelPosition];\n                const g = data[pixelPosition + 1];\n                const b = data[pixelPosition + 2];\n                greyscalePixels.set(x, y, \n                // tslint:disable-next-line no-bitwise\n                (greyscaleWeights.red * r + greyscaleWeights.green * g + greyscaleWeights.blue * b + 128) >> 8);\n            }\n        }\n    }\n    else {\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                const pixelPosition = (y * width + x) * 4;\n                const r = data[pixelPosition];\n                const g = data[pixelPosition + 1];\n                const b = data[pixelPosition + 2];\n                greyscalePixels.set(x, y, greyscaleWeights.red * r + greyscaleWeights.green * g + greyscaleWeights.blue * b);\n            }\n        }\n    }\n    const horizontalRegionCount = Math.ceil(width / REGION_SIZE);\n    const verticalRegionCount = Math.ceil(height / REGION_SIZE);\n    const blackPointsCount = horizontalRegionCount * verticalRegionCount;\n    let blackPointsBuffer;\n    if (canOverwriteImage) {\n        blackPointsBuffer = new Uint8ClampedArray(data.buffer, bufferOffset, blackPointsCount);\n        bufferOffset += blackPointsCount;\n    }\n    const blackPoints = new Matrix(horizontalRegionCount, verticalRegionCount, blackPointsBuffer);\n    for (let verticalRegion = 0; verticalRegion < verticalRegionCount; verticalRegion++) {\n        for (let hortizontalRegion = 0; hortizontalRegion < horizontalRegionCount; hortizontalRegion++) {\n            let min = Infinity;\n            let max = 0;\n            for (let y = 0; y < REGION_SIZE; y++) {\n                for (let x = 0; x < REGION_SIZE; x++) {\n                    const pixelLumosity = greyscalePixels.get(hortizontalRegion * REGION_SIZE + x, verticalRegion * REGION_SIZE + y);\n                    min = Math.min(min, pixelLumosity);\n                    max = Math.max(max, pixelLumosity);\n                }\n            }\n            // We could also compute the real average of all pixels but following the assumption that the qr code consists\n            // of bright and dark pixels and essentially not much in between, by (min + max)/2 we make the cut really between\n            // those two classes. If using the average over all pixel in a block of mostly bright pixels and few dark pixels,\n            // the avg would tend to the bright side and darker bright pixels could be interpreted as dark.\n            let average = (min + max) / 2;\n            // Small bias towards black by moving the threshold up. We do this, as in the finder patterns white holes tend\n            // to appear which makes them undetectable.\n            const blackBias = 1.1;\n            average = Math.min(255, average * blackBias);\n            if (max - min <= MIN_DYNAMIC_RANGE) {\n                // If variation within the block is low, assume this is a block with only light or only\n                // dark pixels. In that case we do not want to use the average, as it would divide this\n                // low contrast area into black and white pixels, essentially creating data out of noise.\n                //\n                // Default the blackpoint for these blocks to be half the min - effectively white them out\n                average = min / 2;\n                if (verticalRegion > 0 && hortizontalRegion > 0) {\n                    // Correct the \"white background\" assumption for blocks that have neighbors by comparing\n                    // the pixels in this block to the previously calculated black points. This is based on\n                    // the fact that dark barcode symbology is always surrounded by some amount of light\n                    // background for which reasonable black point estimates were made. The bp estimated at\n                    // the boundaries is used for the interior.\n                    // The (min < bp) is arbitrary but works better than other heuristics that were tried.\n                    const averageNeighborBlackPoint = (blackPoints.get(hortizontalRegion, verticalRegion - 1) +\n                        (2 * blackPoints.get(hortizontalRegion - 1, verticalRegion)) +\n                        blackPoints.get(hortizontalRegion - 1, verticalRegion - 1)) / 4;\n                    if (min < averageNeighborBlackPoint) {\n                        average = averageNeighborBlackPoint; // no need to apply black bias as already applied to neighbors\n                    }\n                }\n            }\n            blackPoints.set(hortizontalRegion, verticalRegion, average);\n        }\n    }\n    let binarized;\n    if (canOverwriteImage) {\n        const binarizedBuffer = new Uint8ClampedArray(data.buffer, bufferOffset, pixelCount);\n        bufferOffset += pixelCount;\n        binarized = new BitMatrix(binarizedBuffer, width);\n    }\n    else {\n        binarized = BitMatrix.createEmpty(width, height);\n    }\n    let inverted = null;\n    if (returnInverted) {\n        if (canOverwriteImage) {\n            const invertedBuffer = new Uint8ClampedArray(data.buffer, bufferOffset, pixelCount);\n            inverted = new BitMatrix(invertedBuffer, width);\n        }\n        else {\n            inverted = BitMatrix.createEmpty(width, height);\n        }\n    }\n    for (let verticalRegion = 0; verticalRegion < verticalRegionCount; verticalRegion++) {\n        for (let hortizontalRegion = 0; hortizontalRegion < horizontalRegionCount; hortizontalRegion++) {\n            const left = numBetween(hortizontalRegion, 2, horizontalRegionCount - 3);\n            const top = numBetween(verticalRegion, 2, verticalRegionCount - 3);\n            let sum = 0;\n            for (let xRegion = -2; xRegion <= 2; xRegion++) {\n                for (let yRegion = -2; yRegion <= 2; yRegion++) {\n                    sum += blackPoints.get(left + xRegion, top + yRegion);\n                }\n            }\n            const threshold = sum / 25;\n            for (let xRegion = 0; xRegion < REGION_SIZE; xRegion++) {\n                for (let yRegion = 0; yRegion < REGION_SIZE; yRegion++) {\n                    const x = hortizontalRegion * REGION_SIZE + xRegion;\n                    const y = verticalRegion * REGION_SIZE + yRegion;\n                    const lum = greyscalePixels.get(x, y);\n                    binarized.set(x, y, lum <= threshold);\n                    if (returnInverted) {\n                        inverted.set(x, y, !(lum <= threshold));\n                    }\n                }\n            }\n        }\n    }\n    if (returnInverted) {\n        return { binarized, inverted };\n    }\n    return { binarized };\n}\n\n// tslint:disable:no-bitwise\nclass BitStream {\n    constructor(bytes) {\n        this.byteOffset = 0;\n        this.bitOffset = 0;\n        this.bytes = bytes;\n    }\n    readBits(numBits) {\n        if (numBits < 1 || numBits > 32 || numBits > this.available()) {\n            throw new Error(\"Cannot read \" + numBits.toString() + \" bits\");\n        }\n        let result = 0;\n        // First, read remainder from current byte\n        if (this.bitOffset > 0) {\n            const bitsLeft = 8 - this.bitOffset;\n            const toRead = numBits < bitsLeft ? numBits : bitsLeft;\n            const bitsToNotRead = bitsLeft - toRead;\n            const mask = (0xFF >> (8 - toRead)) << bitsToNotRead;\n            result = (this.bytes[this.byteOffset] & mask) >> bitsToNotRead;\n            numBits -= toRead;\n            this.bitOffset += toRead;\n            if (this.bitOffset === 8) {\n                this.bitOffset = 0;\n                this.byteOffset++;\n            }\n        }\n        // Next read whole bytes\n        if (numBits > 0) {\n            while (numBits >= 8) {\n                result = (result << 8) | (this.bytes[this.byteOffset] & 0xFF);\n                this.byteOffset++;\n                numBits -= 8;\n            }\n            // Finally read a partial byte\n            if (numBits > 0) {\n                const bitsToNotRead = 8 - numBits;\n                const mask = (0xFF >> bitsToNotRead) << bitsToNotRead;\n                result = (result << numBits) | ((this.bytes[this.byteOffset] & mask) >> bitsToNotRead);\n                this.bitOffset += numBits;\n            }\n        }\n        return result;\n    }\n    available() {\n        return 8 * (this.bytes.length - this.byteOffset) - this.bitOffset;\n    }\n}\n\n// tslint:disable:no-bitwise\nvar Mode;\n(function (Mode) {\n    Mode[\"Numeric\"] = \"numeric\";\n    Mode[\"Alphanumeric\"] = \"alphanumeric\";\n    Mode[\"Byte\"] = \"byte\";\n    Mode[\"Kanji\"] = \"kanji\";\n    Mode[\"ECI\"] = \"eci\";\n})(Mode || (Mode = {}));\nvar ModeByte;\n(function (ModeByte) {\n    ModeByte[ModeByte[\"Terminator\"] = 0] = \"Terminator\";\n    ModeByte[ModeByte[\"Numeric\"] = 1] = \"Numeric\";\n    ModeByte[ModeByte[\"Alphanumeric\"] = 2] = \"Alphanumeric\";\n    ModeByte[ModeByte[\"Byte\"] = 4] = \"Byte\";\n    ModeByte[ModeByte[\"Kanji\"] = 8] = \"Kanji\";\n    ModeByte[ModeByte[\"ECI\"] = 7] = \"ECI\";\n    // StructuredAppend = 0x3,\n    // FNC1FirstPosition = 0x5,\n    // FNC1SecondPosition = 0x9,\n})(ModeByte || (ModeByte = {}));\nfunction decodeNumeric(stream, size) {\n    const bytes = [];\n    let text = \"\";\n    const characterCountSize = [10, 12, 14][size];\n    let length = stream.readBits(characterCountSize);\n    // Read digits in groups of 3\n    while (length >= 3) {\n        const num = stream.readBits(10);\n        if (num >= 1000) {\n            throw new Error(\"Invalid numeric value above 999\");\n        }\n        const a = Math.floor(num / 100);\n        const b = Math.floor(num / 10) % 10;\n        const c = num % 10;\n        bytes.push(48 + a, 48 + b, 48 + c);\n        text += a.toString() + b.toString() + c.toString();\n        length -= 3;\n    }\n    // If the number of digits aren't a multiple of 3, the remaining digits are special cased.\n    if (length === 2) {\n        const num = stream.readBits(7);\n        if (num >= 100) {\n            throw new Error(\"Invalid numeric value above 99\");\n        }\n        const a = Math.floor(num / 10);\n        const b = num % 10;\n        bytes.push(48 + a, 48 + b);\n        text += a.toString() + b.toString();\n    }\n    else if (length === 1) {\n        const num = stream.readBits(4);\n        if (num >= 10) {\n            throw new Error(\"Invalid numeric value above 9\");\n        }\n        bytes.push(48 + num);\n        text += num.toString();\n    }\n    return { bytes, text };\n}\nconst AlphanumericCharacterCodes = [\n    \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\n    \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\",\n    \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\",\n    \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\",\n    \" \", \"$\", \"%\", \"*\", \"+\", \"-\", \".\", \"/\", \":\",\n];\nfunction decodeAlphanumeric(stream, size) {\n    const bytes = [];\n    let text = \"\";\n    const characterCountSize = [9, 11, 13][size];\n    let length = stream.readBits(characterCountSize);\n    while (length >= 2) {\n        const v = stream.readBits(11);\n        const a = Math.floor(v / 45);\n        const b = v % 45;\n        bytes.push(AlphanumericCharacterCodes[a].charCodeAt(0), AlphanumericCharacterCodes[b].charCodeAt(0));\n        text += AlphanumericCharacterCodes[a] + AlphanumericCharacterCodes[b];\n        length -= 2;\n    }\n    if (length === 1) {\n        const a = stream.readBits(6);\n        bytes.push(AlphanumericCharacterCodes[a].charCodeAt(0));\n        text += AlphanumericCharacterCodes[a];\n    }\n    return { bytes, text };\n}\nfunction decodeByte(stream, size) {\n    const bytes = [];\n    let text = \"\";\n    const characterCountSize = [8, 16, 16][size];\n    const length = stream.readBits(characterCountSize);\n    for (let i = 0; i < length; i++) {\n        const b = stream.readBits(8);\n        bytes.push(b);\n    }\n    try {\n        text += decodeURIComponent(bytes.map(b => `%${(\"0\" + b.toString(16)).substr(-2)}`).join(\"\"));\n    }\n    catch (_a) {\n        // failed to decode\n    }\n    return { bytes, text };\n}\nfunction decodeKanji(stream, size) {\n    const bytes = [];\n    const characterCountSize = [8, 10, 12][size];\n    const length = stream.readBits(characterCountSize);\n    for (let i = 0; i < length; i++) {\n        const k = stream.readBits(13);\n        let c = (Math.floor(k / 0xC0) << 8) | (k % 0xC0);\n        if (c < 0x1F00) {\n            c += 0x8140;\n        }\n        else {\n            c += 0xC140;\n        }\n        bytes.push(c >> 8, c & 0xFF);\n    }\n    const text = new TextDecoder(\"shift-jis\").decode(Uint8Array.from(bytes));\n    return { bytes, text };\n}\nfunction decode(data, version) {\n    const stream = new BitStream(data);\n    // There are 3 'sizes' based on the version. 1-9 is small (0), 10-26 is medium (1) and 27-40 is large (2).\n    const size = version <= 9 ? 0 : version <= 26 ? 1 : 2;\n    const result = {\n        text: \"\",\n        bytes: [],\n        chunks: [],\n    };\n    while (stream.available() >= 4) {\n        const mode = stream.readBits(4);\n        if (mode === ModeByte.Terminator) {\n            return result;\n        }\n        else if (mode === ModeByte.ECI) {\n            if (stream.readBits(1) === 0) {\n                result.chunks.push({\n                    type: Mode.ECI,\n                    assignmentNumber: stream.readBits(7),\n                });\n            }\n            else if (stream.readBits(1) === 0) {\n                result.chunks.push({\n                    type: Mode.ECI,\n                    assignmentNumber: stream.readBits(14),\n                });\n            }\n            else if (stream.readBits(1) === 0) {\n                result.chunks.push({\n                    type: Mode.ECI,\n                    assignmentNumber: stream.readBits(21),\n                });\n            }\n            else {\n                // ECI data seems corrupted\n                result.chunks.push({\n                    type: Mode.ECI,\n                    assignmentNumber: -1,\n                });\n            }\n        }\n        else if (mode === ModeByte.Numeric) {\n            const numericResult = decodeNumeric(stream, size);\n            result.text += numericResult.text;\n            result.bytes.push(...numericResult.bytes);\n            result.chunks.push({\n                type: Mode.Numeric,\n                text: numericResult.text,\n            });\n        }\n        else if (mode === ModeByte.Alphanumeric) {\n            const alphanumericResult = decodeAlphanumeric(stream, size);\n            result.text += alphanumericResult.text;\n            result.bytes.push(...alphanumericResult.bytes);\n            result.chunks.push({\n                type: Mode.Alphanumeric,\n                text: alphanumericResult.text,\n            });\n        }\n        else if (mode === ModeByte.Byte) {\n            const byteResult = decodeByte(stream, size);\n            result.text += byteResult.text;\n            result.bytes.push(...byteResult.bytes);\n            result.chunks.push({\n                type: Mode.Byte,\n                bytes: byteResult.bytes,\n                text: byteResult.text,\n            });\n        }\n        else if (mode === ModeByte.Kanji) {\n            const kanjiResult = decodeKanji(stream, size);\n            result.text += kanjiResult.text;\n            result.bytes.push(...kanjiResult.bytes);\n            result.chunks.push({\n                type: Mode.Kanji,\n                bytes: kanjiResult.bytes,\n                text: kanjiResult.text,\n            });\n        }\n    }\n    // If there is no data left, or the remaining bits are all 0, then that counts as a termination marker\n    if (stream.available() === 0 || stream.readBits(stream.available()) === 0) {\n        return result;\n    }\n}\n\nclass GenericGFPoly {\n    constructor(field, coefficients) {\n        if (coefficients.length === 0) {\n            throw new Error(\"No coefficients.\");\n        }\n        this.field = field;\n        const coefficientsLength = coefficients.length;\n        if (coefficientsLength > 1 && coefficients[0] === 0) {\n            // Leading term must be non-zero for anything except the constant polynomial \"0\"\n            let firstNonZero = 1;\n            while (firstNonZero < coefficientsLength && coefficients[firstNonZero] === 0) {\n                firstNonZero++;\n            }\n            if (firstNonZero === coefficientsLength) {\n                this.coefficients = field.zero.coefficients;\n            }\n            else {\n                this.coefficients = new Uint8ClampedArray(coefficientsLength - firstNonZero);\n                for (let i = 0; i < this.coefficients.length; i++) {\n                    this.coefficients[i] = coefficients[firstNonZero + i];\n                }\n            }\n        }\n        else {\n            this.coefficients = coefficients;\n        }\n    }\n    degree() {\n        return this.coefficients.length - 1;\n    }\n    isZero() {\n        return this.coefficients[0] === 0;\n    }\n    getCoefficient(degree) {\n        return this.coefficients[this.coefficients.length - 1 - degree];\n    }\n    addOrSubtract(other) {\n        if (this.isZero()) {\n            return other;\n        }\n        if (other.isZero()) {\n            return this;\n        }\n        let smallerCoefficients = this.coefficients;\n        let largerCoefficients = other.coefficients;\n        if (smallerCoefficients.length > largerCoefficients.length) {\n            [smallerCoefficients, largerCoefficients] = [largerCoefficients, smallerCoefficients];\n        }\n        const sumDiff = new Uint8ClampedArray(largerCoefficients.length);\n        const lengthDiff = largerCoefficients.length - smallerCoefficients.length;\n        for (let i = 0; i < lengthDiff; i++) {\n            sumDiff[i] = largerCoefficients[i];\n        }\n        for (let i = lengthDiff; i < largerCoefficients.length; i++) {\n            sumDiff[i] = addOrSubtractGF(smallerCoefficients[i - lengthDiff], largerCoefficients[i]);\n        }\n        return new GenericGFPoly(this.field, sumDiff);\n    }\n    multiply(scalar) {\n        if (scalar === 0) {\n            return this.field.zero;\n        }\n        if (scalar === 1) {\n            return this;\n        }\n        const size = this.coefficients.length;\n        const product = new Uint8ClampedArray(size);\n        for (let i = 0; i < size; i++) {\n            product[i] = this.field.multiply(this.coefficients[i], scalar);\n        }\n        return new GenericGFPoly(this.field, product);\n    }\n    multiplyPoly(other) {\n        if (this.isZero() || other.isZero()) {\n            return this.field.zero;\n        }\n        const aCoefficients = this.coefficients;\n        const aLength = aCoefficients.length;\n        const bCoefficients = other.coefficients;\n        const bLength = bCoefficients.length;\n        const product = new Uint8ClampedArray(aLength + bLength - 1);\n        for (let i = 0; i < aLength; i++) {\n            const aCoeff = aCoefficients[i];\n            for (let j = 0; j < bLength; j++) {\n                product[i + j] = addOrSubtractGF(product[i + j], this.field.multiply(aCoeff, bCoefficients[j]));\n            }\n        }\n        return new GenericGFPoly(this.field, product);\n    }\n    multiplyByMonomial(degree, coefficient) {\n        if (degree < 0) {\n            throw new Error(\"Invalid degree less than 0\");\n        }\n        if (coefficient === 0) {\n            return this.field.zero;\n        }\n        const size = this.coefficients.length;\n        const product = new Uint8ClampedArray(size + degree);\n        for (let i = 0; i < size; i++) {\n            product[i] = this.field.multiply(this.coefficients[i], coefficient);\n        }\n        return new GenericGFPoly(this.field, product);\n    }\n    evaluateAt(a) {\n        let result = 0;\n        if (a === 0) {\n            // Just return the x^0 coefficient\n            return this.getCoefficient(0);\n        }\n        const size = this.coefficients.length;\n        if (a === 1) {\n            // Just the sum of the coefficients\n            this.coefficients.forEach((coefficient) => {\n                result = addOrSubtractGF(result, coefficient);\n            });\n            return result;\n        }\n        result = this.coefficients[0];\n        for (let i = 1; i < size; i++) {\n            result = addOrSubtractGF(this.field.multiply(a, result), this.coefficients[i]);\n        }\n        return result;\n    }\n}\n\nfunction addOrSubtractGF(a, b) {\n    return a ^ b; // tslint:disable-line:no-bitwise\n}\nclass GenericGF {\n    constructor(primitive, size, genBase) {\n        this.primitive = primitive;\n        this.size = size;\n        this.generatorBase = genBase;\n        this.expTable = new Array(this.size);\n        this.logTable = new Array(this.size);\n        let x = 1;\n        for (let i = 0; i < this.size; i++) {\n            this.expTable[i] = x;\n            x = x * 2;\n            if (x >= this.size) {\n                x = (x ^ this.primitive) & (this.size - 1); // tslint:disable-line:no-bitwise\n            }\n        }\n        for (let i = 0; i < this.size - 1; i++) {\n            this.logTable[this.expTable[i]] = i;\n        }\n        this.zero = new GenericGFPoly(this, Uint8ClampedArray.from([0]));\n        this.one = new GenericGFPoly(this, Uint8ClampedArray.from([1]));\n    }\n    multiply(a, b) {\n        if (a === 0 || b === 0) {\n            return 0;\n        }\n        return this.expTable[(this.logTable[a] + this.logTable[b]) % (this.size - 1)];\n    }\n    inverse(a) {\n        if (a === 0) {\n            throw new Error(\"Can't invert 0\");\n        }\n        return this.expTable[this.size - this.logTable[a] - 1];\n    }\n    buildMonomial(degree, coefficient) {\n        if (degree < 0) {\n            throw new Error(\"Invalid monomial degree less than 0\");\n        }\n        if (coefficient === 0) {\n            return this.zero;\n        }\n        const coefficients = new Uint8ClampedArray(degree + 1);\n        coefficients[0] = coefficient;\n        return new GenericGFPoly(this, coefficients);\n    }\n    log(a) {\n        if (a === 0) {\n            throw new Error(\"Can't take log(0)\");\n        }\n        return this.logTable[a];\n    }\n    exp(a) {\n        return this.expTable[a];\n    }\n}\n\nfunction runEuclideanAlgorithm(field, a, b, R) {\n    // Assume a's degree is >= b's\n    if (a.degree() < b.degree()) {\n        [a, b] = [b, a];\n    }\n    let rLast = a;\n    let r = b;\n    let tLast = field.zero;\n    let t = field.one;\n    // Run Euclidean algorithm until r's degree is less than R/2\n    while (r.degree() >= R / 2) {\n        const rLastLast = rLast;\n        const tLastLast = tLast;\n        rLast = r;\n        tLast = t;\n        // Divide rLastLast by rLast, with quotient in q and remainder in r\n        if (rLast.isZero()) {\n            // Euclidean algorithm already terminated?\n            return null;\n        }\n        r = rLastLast;\n        let q = field.zero;\n        const denominatorLeadingTerm = rLast.getCoefficient(rLast.degree());\n        const dltInverse = field.inverse(denominatorLeadingTerm);\n        while (r.degree() >= rLast.degree() && !r.isZero()) {\n            const degreeDiff = r.degree() - rLast.degree();\n            const scale = field.multiply(r.getCoefficient(r.degree()), dltInverse);\n            q = q.addOrSubtract(field.buildMonomial(degreeDiff, scale));\n            r = r.addOrSubtract(rLast.multiplyByMonomial(degreeDiff, scale));\n        }\n        t = q.multiplyPoly(tLast).addOrSubtract(tLastLast);\n        if (r.degree() >= rLast.degree()) {\n            return null;\n        }\n    }\n    const sigmaTildeAtZero = t.getCoefficient(0);\n    if (sigmaTildeAtZero === 0) {\n        return null;\n    }\n    const inverse = field.inverse(sigmaTildeAtZero);\n    return [t.multiply(inverse), r.multiply(inverse)];\n}\nfunction findErrorLocations(field, errorLocator) {\n    // This is a direct application of Chien's search\n    const numErrors = errorLocator.degree();\n    if (numErrors === 1) {\n        return [errorLocator.getCoefficient(1)];\n    }\n    const result = new Array(numErrors);\n    let errorCount = 0;\n    for (let i = 1; i < field.size && errorCount < numErrors; i++) {\n        if (errorLocator.evaluateAt(i) === 0) {\n            result[errorCount] = field.inverse(i);\n            errorCount++;\n        }\n    }\n    if (errorCount !== numErrors) {\n        return null;\n    }\n    return result;\n}\nfunction findErrorMagnitudes(field, errorEvaluator, errorLocations) {\n    // This is directly applying Forney's Formula\n    const s = errorLocations.length;\n    const result = new Array(s);\n    for (let i = 0; i < s; i++) {\n        const xiInverse = field.inverse(errorLocations[i]);\n        let denominator = 1;\n        for (let j = 0; j < s; j++) {\n            if (i !== j) {\n                denominator = field.multiply(denominator, addOrSubtractGF(1, field.multiply(errorLocations[j], xiInverse)));\n            }\n        }\n        result[i] = field.multiply(errorEvaluator.evaluateAt(xiInverse), field.inverse(denominator));\n        if (field.generatorBase !== 0) {\n            result[i] = field.multiply(result[i], xiInverse);\n        }\n    }\n    return result;\n}\nfunction decode$1(bytes, twoS) {\n    const outputBytes = new Uint8ClampedArray(bytes.length);\n    outputBytes.set(bytes);\n    const field = new GenericGF(0x011D, 256, 0); // x^8 + x^4 + x^3 + x^2 + 1\n    const poly = new GenericGFPoly(field, outputBytes);\n    const syndromeCoefficients = new Uint8ClampedArray(twoS);\n    let error = false;\n    for (let s = 0; s < twoS; s++) {\n        const evaluation = poly.evaluateAt(field.exp(s + field.generatorBase));\n        syndromeCoefficients[syndromeCoefficients.length - 1 - s] = evaluation;\n        if (evaluation !== 0) {\n            error = true;\n        }\n    }\n    if (!error) {\n        return outputBytes;\n    }\n    const syndrome = new GenericGFPoly(field, syndromeCoefficients);\n    const sigmaOmega = runEuclideanAlgorithm(field, field.buildMonomial(twoS, 1), syndrome, twoS);\n    if (sigmaOmega === null) {\n        return null;\n    }\n    const errorLocations = findErrorLocations(field, sigmaOmega[0]);\n    if (errorLocations == null) {\n        return null;\n    }\n    const errorMagnitudes = findErrorMagnitudes(field, sigmaOmega[1], errorLocations);\n    for (let i = 0; i < errorLocations.length; i++) {\n        const position = outputBytes.length - 1 - field.log(errorLocations[i]);\n        if (position < 0) {\n            return null;\n        }\n        outputBytes[position] = addOrSubtractGF(outputBytes[position], errorMagnitudes[i]);\n    }\n    return outputBytes;\n}\n\nconst VERSIONS = [\n    {\n        infoBits: null,\n        versionNumber: 1,\n        alignmentPatternCenters: [],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 7,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 19 }],\n            },\n            {\n                ecCodewordsPerBlock: 10,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 16 }],\n            },\n            {\n                ecCodewordsPerBlock: 13,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 13 }],\n            },\n            {\n                ecCodewordsPerBlock: 17,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 9 }],\n            },\n        ],\n    },\n    {\n        infoBits: null,\n        versionNumber: 2,\n        alignmentPatternCenters: [6, 18],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 10,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 34 }],\n            },\n            {\n                ecCodewordsPerBlock: 16,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 28 }],\n            },\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 22 }],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 16 }],\n            },\n        ],\n    },\n    {\n        infoBits: null,\n        versionNumber: 3,\n        alignmentPatternCenters: [6, 22],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 15,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 55 }],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 44 }],\n            },\n            {\n                ecCodewordsPerBlock: 18,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 17 }],\n            },\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 13 }],\n            },\n        ],\n    },\n    {\n        infoBits: null,\n        versionNumber: 4,\n        alignmentPatternCenters: [6, 26],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 20,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 80 }],\n            },\n            {\n                ecCodewordsPerBlock: 18,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 32 }],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 24 }],\n            },\n            {\n                ecCodewordsPerBlock: 16,\n                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 9 }],\n            },\n        ],\n    },\n    {\n        infoBits: null,\n        versionNumber: 5,\n        alignmentPatternCenters: [6, 30],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 108 }],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 43 }],\n            },\n            {\n                ecCodewordsPerBlock: 18,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 16 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 11 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 12 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: null,\n        versionNumber: 6,\n        alignmentPatternCenters: [6, 34],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 18,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 68 }],\n            },\n            {\n                ecCodewordsPerBlock: 16,\n                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 27 }],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 19 }],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 15 }],\n            },\n        ],\n    },\n    {\n        infoBits: 0x07C94,\n        versionNumber: 7,\n        alignmentPatternCenters: [6, 22, 38],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 20,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 78 }],\n            },\n            {\n                ecCodewordsPerBlock: 18,\n                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 31 }],\n            },\n            {\n                ecCodewordsPerBlock: 18,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 14 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 15 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 13 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 14 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x085BC,\n        versionNumber: 8,\n        alignmentPatternCenters: [6, 24, 42],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 97 }],\n            },\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 38 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 39 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 18 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 19 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 14 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 15 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x09A99,\n        versionNumber: 9,\n        alignmentPatternCenters: [6, 26, 46],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 116 }],\n            },\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 36 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 37 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 20,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 16 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 17 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 12 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 13 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x0A4D3,\n        versionNumber: 10,\n        alignmentPatternCenters: [6, 28, 50],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 18,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 68 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 69 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 43 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 44 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 6, dataCodewordsPerBlock: 19 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 20 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 6, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x0BBF6,\n        versionNumber: 11,\n        alignmentPatternCenters: [6, 30, 54],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 20,\n                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 81 }],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 1, dataCodewordsPerBlock: 50 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 51 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 22 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 23 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 12 },\n                    { numBlocks: 8, dataCodewordsPerBlock: 13 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x0C762,\n        versionNumber: 12,\n        alignmentPatternCenters: [6, 32, 58],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 92 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 93 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                    { numBlocks: 6, dataCodewordsPerBlock: 36 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 37 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 20 },\n                    { numBlocks: 6, dataCodewordsPerBlock: 21 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 7, dataCodewordsPerBlock: 14 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 15 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x0D847,\n        versionNumber: 13,\n        alignmentPatternCenters: [6, 34, 62],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 107 }],\n            },\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                    { numBlocks: 8, dataCodewordsPerBlock: 37 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 38 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 8, dataCodewordsPerBlock: 20 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 21 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                    { numBlocks: 12, dataCodewordsPerBlock: 11 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 12 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x0E60D,\n        versionNumber: 14,\n        alignmentPatternCenters: [6, 26, 46, 66],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 115 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 116 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 40 },\n                    { numBlocks: 5, dataCodewordsPerBlock: 41 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 20,\n                ecBlocks: [\n                    { numBlocks: 11, dataCodewordsPerBlock: 16 },\n                    { numBlocks: 5, dataCodewordsPerBlock: 17 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 11, dataCodewordsPerBlock: 12 },\n                    { numBlocks: 5, dataCodewordsPerBlock: 13 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x0F928,\n        versionNumber: 15,\n        alignmentPatternCenters: [6, 26, 48, 70],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                    { numBlocks: 5, dataCodewordsPerBlock: 87 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 88 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 5, dataCodewordsPerBlock: 41 },\n                    { numBlocks: 5, dataCodewordsPerBlock: 42 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 5, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 7, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 11, dataCodewordsPerBlock: 12 },\n                    { numBlocks: 7, dataCodewordsPerBlock: 13 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x10B78,\n        versionNumber: 16,\n        alignmentPatternCenters: [6, 26, 50, 74],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 5, dataCodewordsPerBlock: 98 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 99 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 7, dataCodewordsPerBlock: 45 },\n                    { numBlocks: 3, dataCodewordsPerBlock: 46 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 15, dataCodewordsPerBlock: 19 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 20 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 13, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x1145D,\n        versionNumber: 17,\n        alignmentPatternCenters: [6, 30, 54, 78],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 1, dataCodewordsPerBlock: 107 },\n                    { numBlocks: 5, dataCodewordsPerBlock: 108 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 10, dataCodewordsPerBlock: 46 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 47 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 1, dataCodewordsPerBlock: 22 },\n                    { numBlocks: 15, dataCodewordsPerBlock: 23 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 14 },\n                    { numBlocks: 17, dataCodewordsPerBlock: 15 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x12A17,\n        versionNumber: 18,\n        alignmentPatternCenters: [6, 30, 56, 82],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 5, dataCodewordsPerBlock: 120 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 121 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 9, dataCodewordsPerBlock: 43 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 44 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 17, dataCodewordsPerBlock: 22 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 23 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 14 },\n                    { numBlocks: 19, dataCodewordsPerBlock: 15 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x13532,\n        versionNumber: 19,\n        alignmentPatternCenters: [6, 30, 58, 86],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 113 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 114 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 44 },\n                    { numBlocks: 11, dataCodewordsPerBlock: 45 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 17, dataCodewordsPerBlock: 21 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 22 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 9, dataCodewordsPerBlock: 13 },\n                    { numBlocks: 16, dataCodewordsPerBlock: 14 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x149A6,\n        versionNumber: 20,\n        alignmentPatternCenters: [6, 34, 62, 90],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 107 },\n                    { numBlocks: 5, dataCodewordsPerBlock: 108 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 41 },\n                    { numBlocks: 13, dataCodewordsPerBlock: 42 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 15, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 5, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 15, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 10, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x15683,\n        versionNumber: 21,\n        alignmentPatternCenters: [6, 28, 50, 72, 94],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 116 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 117 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [{ numBlocks: 17, dataCodewordsPerBlock: 42 }],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 17, dataCodewordsPerBlock: 22 },\n                    { numBlocks: 6, dataCodewordsPerBlock: 23 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 19, dataCodewordsPerBlock: 16 },\n                    { numBlocks: 6, dataCodewordsPerBlock: 17 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x168C9,\n        versionNumber: 22,\n        alignmentPatternCenters: [6, 26, 50, 74, 98],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 111 },\n                    { numBlocks: 7, dataCodewordsPerBlock: 112 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [{ numBlocks: 17, dataCodewordsPerBlock: 46 }],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 7, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 16, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [{ numBlocks: 34, dataCodewordsPerBlock: 13 }],\n            },\n        ],\n    },\n    {\n        infoBits: 0x177EC,\n        versionNumber: 23,\n        alignmentPatternCenters: [6, 30, 54, 74, 102],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 121 },\n                    { numBlocks: 5, dataCodewordsPerBlock: 122 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 47 },\n                    { numBlocks: 14, dataCodewordsPerBlock: 48 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 11, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 14, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 16, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 14, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x18EC4,\n        versionNumber: 24,\n        alignmentPatternCenters: [6, 28, 54, 80, 106],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 6, dataCodewordsPerBlock: 117 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 118 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 6, dataCodewordsPerBlock: 45 },\n                    { numBlocks: 14, dataCodewordsPerBlock: 46 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 11, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 16, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 30, dataCodewordsPerBlock: 16 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 17 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x191E1,\n        versionNumber: 25,\n        alignmentPatternCenters: [6, 32, 58, 84, 110],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 8, dataCodewordsPerBlock: 106 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 107 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 8, dataCodewordsPerBlock: 47 },\n                    { numBlocks: 13, dataCodewordsPerBlock: 48 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 7, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 22, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 22, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 13, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x1AFAB,\n        versionNumber: 26,\n        alignmentPatternCenters: [6, 30, 58, 86, 114],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 10, dataCodewordsPerBlock: 114 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 115 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 19, dataCodewordsPerBlock: 46 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 47 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 28, dataCodewordsPerBlock: 22 },\n                    { numBlocks: 6, dataCodewordsPerBlock: 23 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 33, dataCodewordsPerBlock: 16 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 17 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x1B08E,\n        versionNumber: 27,\n        alignmentPatternCenters: [6, 34, 62, 90, 118],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 8, dataCodewordsPerBlock: 122 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 123 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 22, dataCodewordsPerBlock: 45 },\n                    { numBlocks: 3, dataCodewordsPerBlock: 46 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 8, dataCodewordsPerBlock: 23 },\n                    { numBlocks: 26, dataCodewordsPerBlock: 24 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 12, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 28, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x1CC1A,\n        versionNumber: 28,\n        alignmentPatternCenters: [6, 26, 50, 74, 98, 122],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 117 },\n                    { numBlocks: 10, dataCodewordsPerBlock: 118 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 45 },\n                    { numBlocks: 23, dataCodewordsPerBlock: 46 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 31, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 11, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 31, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x1D33F,\n        versionNumber: 29,\n        alignmentPatternCenters: [6, 30, 54, 78, 102, 126],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 7, dataCodewordsPerBlock: 116 },\n                    { numBlocks: 7, dataCodewordsPerBlock: 117 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 21, dataCodewordsPerBlock: 45 },\n                    { numBlocks: 7, dataCodewordsPerBlock: 46 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 1, dataCodewordsPerBlock: 23 },\n                    { numBlocks: 37, dataCodewordsPerBlock: 24 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 19, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 26, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x1ED75,\n        versionNumber: 30,\n        alignmentPatternCenters: [6, 26, 52, 78, 104, 130],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 5, dataCodewordsPerBlock: 115 },\n                    { numBlocks: 10, dataCodewordsPerBlock: 116 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 19, dataCodewordsPerBlock: 47 },\n                    { numBlocks: 10, dataCodewordsPerBlock: 48 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 15, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 25, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 23, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 25, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x1F250,\n        versionNumber: 31,\n        alignmentPatternCenters: [6, 30, 56, 82, 108, 134],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 13, dataCodewordsPerBlock: 115 },\n                    { numBlocks: 3, dataCodewordsPerBlock: 116 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 46 },\n                    { numBlocks: 29, dataCodewordsPerBlock: 47 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 42, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 23, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 28, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x209D5,\n        versionNumber: 32,\n        alignmentPatternCenters: [6, 34, 60, 86, 112, 138],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [{ numBlocks: 17, dataCodewordsPerBlock: 115 }],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 10, dataCodewordsPerBlock: 46 },\n                    { numBlocks: 23, dataCodewordsPerBlock: 47 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 10, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 35, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 19, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 35, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x216F0,\n        versionNumber: 33,\n        alignmentPatternCenters: [6, 30, 58, 86, 114, 142],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 17, dataCodewordsPerBlock: 115 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 116 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 14, dataCodewordsPerBlock: 46 },\n                    { numBlocks: 21, dataCodewordsPerBlock: 47 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 29, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 19, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 11, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 46, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x228BA,\n        versionNumber: 34,\n        alignmentPatternCenters: [6, 34, 62, 90, 118, 146],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 13, dataCodewordsPerBlock: 115 },\n                    { numBlocks: 6, dataCodewordsPerBlock: 116 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 14, dataCodewordsPerBlock: 46 },\n                    { numBlocks: 23, dataCodewordsPerBlock: 47 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 44, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 7, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 59, dataCodewordsPerBlock: 16 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 17 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x2379F,\n        versionNumber: 35,\n        alignmentPatternCenters: [6, 30, 54, 78, 102, 126, 150],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 12, dataCodewordsPerBlock: 121 },\n                    { numBlocks: 7, dataCodewordsPerBlock: 122 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 12, dataCodewordsPerBlock: 47 },\n                    { numBlocks: 26, dataCodewordsPerBlock: 48 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 39, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 14, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 22, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 41, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x24B0B,\n        versionNumber: 36,\n        alignmentPatternCenters: [6, 24, 50, 76, 102, 128, 154],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 6, dataCodewordsPerBlock: 121 },\n                    { numBlocks: 14, dataCodewordsPerBlock: 122 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 6, dataCodewordsPerBlock: 47 },\n                    { numBlocks: 34, dataCodewordsPerBlock: 48 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 46, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 10, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 64, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x2542E,\n        versionNumber: 37,\n        alignmentPatternCenters: [6, 28, 54, 80, 106, 132, 158],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 17, dataCodewordsPerBlock: 122 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 123 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 29, dataCodewordsPerBlock: 46 },\n                    { numBlocks: 14, dataCodewordsPerBlock: 47 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 49, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 10, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 24, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 46, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x26A64,\n        versionNumber: 38,\n        alignmentPatternCenters: [6, 32, 58, 84, 110, 136, 162],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 122 },\n                    { numBlocks: 18, dataCodewordsPerBlock: 123 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 13, dataCodewordsPerBlock: 46 },\n                    { numBlocks: 32, dataCodewordsPerBlock: 47 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 48, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 14, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 42, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 32, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x27541,\n        versionNumber: 39,\n        alignmentPatternCenters: [6, 26, 54, 82, 110, 138, 166],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 20, dataCodewordsPerBlock: 117 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 118 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 40, dataCodewordsPerBlock: 47 },\n                    { numBlocks: 7, dataCodewordsPerBlock: 48 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 43, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 22, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 10, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 67, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x28C69,\n        versionNumber: 40,\n        alignmentPatternCenters: [6, 30, 58, 86, 114, 142, 170],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 19, dataCodewordsPerBlock: 118 },\n                    { numBlocks: 6, dataCodewordsPerBlock: 119 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 18, dataCodewordsPerBlock: 47 },\n                    { numBlocks: 31, dataCodewordsPerBlock: 48 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 34, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 34, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 20, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 61, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n];\n\n// tslint:disable:no-bitwise\nfunction numBitsDiffering(x, y) {\n    let z = x ^ y;\n    let bitCount = 0;\n    while (z) {\n        bitCount++;\n        z &= z - 1;\n    }\n    return bitCount;\n}\nfunction pushBit(bit, byte) {\n    return (byte << 1) | bit;\n}\n// tslint:enable:no-bitwise\nconst FORMAT_INFO_TABLE = [\n    { bits: 0x5412, formatInfo: { errorCorrectionLevel: 1, dataMask: 0 } },\n    { bits: 0x5125, formatInfo: { errorCorrectionLevel: 1, dataMask: 1 } },\n    { bits: 0x5E7C, formatInfo: { errorCorrectionLevel: 1, dataMask: 2 } },\n    { bits: 0x5B4B, formatInfo: { errorCorrectionLevel: 1, dataMask: 3 } },\n    { bits: 0x45F9, formatInfo: { errorCorrectionLevel: 1, dataMask: 4 } },\n    { bits: 0x40CE, formatInfo: { errorCorrectionLevel: 1, dataMask: 5 } },\n    { bits: 0x4F97, formatInfo: { errorCorrectionLevel: 1, dataMask: 6 } },\n    { bits: 0x4AA0, formatInfo: { errorCorrectionLevel: 1, dataMask: 7 } },\n    { bits: 0x77C4, formatInfo: { errorCorrectionLevel: 0, dataMask: 0 } },\n    { bits: 0x72F3, formatInfo: { errorCorrectionLevel: 0, dataMask: 1 } },\n    { bits: 0x7DAA, formatInfo: { errorCorrectionLevel: 0, dataMask: 2 } },\n    { bits: 0x789D, formatInfo: { errorCorrectionLevel: 0, dataMask: 3 } },\n    { bits: 0x662F, formatInfo: { errorCorrectionLevel: 0, dataMask: 4 } },\n    { bits: 0x6318, formatInfo: { errorCorrectionLevel: 0, dataMask: 5 } },\n    { bits: 0x6C41, formatInfo: { errorCorrectionLevel: 0, dataMask: 6 } },\n    { bits: 0x6976, formatInfo: { errorCorrectionLevel: 0, dataMask: 7 } },\n    { bits: 0x1689, formatInfo: { errorCorrectionLevel: 3, dataMask: 0 } },\n    { bits: 0x13BE, formatInfo: { errorCorrectionLevel: 3, dataMask: 1 } },\n    { bits: 0x1CE7, formatInfo: { errorCorrectionLevel: 3, dataMask: 2 } },\n    { bits: 0x19D0, formatInfo: { errorCorrectionLevel: 3, dataMask: 3 } },\n    { bits: 0x0762, formatInfo: { errorCorrectionLevel: 3, dataMask: 4 } },\n    { bits: 0x0255, formatInfo: { errorCorrectionLevel: 3, dataMask: 5 } },\n    { bits: 0x0D0C, formatInfo: { errorCorrectionLevel: 3, dataMask: 6 } },\n    { bits: 0x083B, formatInfo: { errorCorrectionLevel: 3, dataMask: 7 } },\n    { bits: 0x355F, formatInfo: { errorCorrectionLevel: 2, dataMask: 0 } },\n    { bits: 0x3068, formatInfo: { errorCorrectionLevel: 2, dataMask: 1 } },\n    { bits: 0x3F31, formatInfo: { errorCorrectionLevel: 2, dataMask: 2 } },\n    { bits: 0x3A06, formatInfo: { errorCorrectionLevel: 2, dataMask: 3 } },\n    { bits: 0x24B4, formatInfo: { errorCorrectionLevel: 2, dataMask: 4 } },\n    { bits: 0x2183, formatInfo: { errorCorrectionLevel: 2, dataMask: 5 } },\n    { bits: 0x2EDA, formatInfo: { errorCorrectionLevel: 2, dataMask: 6 } },\n    { bits: 0x2BED, formatInfo: { errorCorrectionLevel: 2, dataMask: 7 } },\n];\nconst DATA_MASKS = [\n    (p) => ((p.y + p.x) % 2) === 0,\n    (p) => (p.y % 2) === 0,\n    (p) => p.x % 3 === 0,\n    (p) => (p.y + p.x) % 3 === 0,\n    (p) => (Math.floor(p.y / 2) + Math.floor(p.x / 3)) % 2 === 0,\n    (p) => ((p.x * p.y) % 2) + ((p.x * p.y) % 3) === 0,\n    (p) => ((((p.y * p.x) % 2) + (p.y * p.x) % 3) % 2) === 0,\n    (p) => ((((p.y + p.x) % 2) + (p.y * p.x) % 3) % 2) === 0,\n];\nfunction buildFunctionPatternMask(version) {\n    const dimension = 17 + 4 * version.versionNumber;\n    const matrix = BitMatrix.createEmpty(dimension, dimension);\n    matrix.setRegion(0, 0, 9, 9, true); // Top left finder pattern + separator + format\n    matrix.setRegion(dimension - 8, 0, 8, 9, true); // Top right finder pattern + separator + format\n    matrix.setRegion(0, dimension - 8, 9, 8, true); // Bottom left finder pattern + separator + format\n    // Alignment patterns\n    for (const x of version.alignmentPatternCenters) {\n        for (const y of version.alignmentPatternCenters) {\n            if (!(x === 6 && y === 6 || x === 6 && y === dimension - 7 || x === dimension - 7 && y === 6)) {\n                matrix.setRegion(x - 2, y - 2, 5, 5, true);\n            }\n        }\n    }\n    matrix.setRegion(6, 9, 1, dimension - 17, true); // Vertical timing pattern\n    matrix.setRegion(9, 6, dimension - 17, 1, true); // Horizontal timing pattern\n    if (version.versionNumber > 6) {\n        matrix.setRegion(dimension - 11, 0, 3, 6, true); // Version info, top right\n        matrix.setRegion(0, dimension - 11, 6, 3, true); // Version info, bottom left\n    }\n    return matrix;\n}\nfunction readCodewords(matrix, version, formatInfo) {\n    const dataMask = DATA_MASKS[formatInfo.dataMask];\n    const dimension = matrix.height;\n    const functionPatternMask = buildFunctionPatternMask(version);\n    const codewords = [];\n    let currentByte = 0;\n    let bitsRead = 0;\n    // Read columns in pairs, from right to left\n    let readingUp = true;\n    for (let columnIndex = dimension - 1; columnIndex > 0; columnIndex -= 2) {\n        if (columnIndex === 6) { // Skip whole column with vertical alignment pattern;\n            columnIndex--;\n        }\n        for (let i = 0; i < dimension; i++) {\n            const y = readingUp ? dimension - 1 - i : i;\n            for (let columnOffset = 0; columnOffset < 2; columnOffset++) {\n                const x = columnIndex - columnOffset;\n                if (!functionPatternMask.get(x, y)) {\n                    bitsRead++;\n                    let bit = matrix.get(x, y);\n                    if (dataMask({ y, x })) {\n                        bit = !bit;\n                    }\n                    currentByte = pushBit(bit, currentByte);\n                    if (bitsRead === 8) { // Whole bytes\n                        codewords.push(currentByte);\n                        bitsRead = 0;\n                        currentByte = 0;\n                    }\n                }\n            }\n        }\n        readingUp = !readingUp;\n    }\n    return codewords;\n}\nfunction readVersion(matrix) {\n    const dimension = matrix.height;\n    const provisionalVersion = Math.floor((dimension - 17) / 4);\n    if (provisionalVersion <= 6) { // 6 and under dont have version info in the QR code\n        return VERSIONS[provisionalVersion - 1];\n    }\n    let topRightVersionBits = 0;\n    for (let y = 5; y >= 0; y--) {\n        for (let x = dimension - 9; x >= dimension - 11; x--) {\n            topRightVersionBits = pushBit(matrix.get(x, y), topRightVersionBits);\n        }\n    }\n    let bottomLeftVersionBits = 0;\n    for (let x = 5; x >= 0; x--) {\n        for (let y = dimension - 9; y >= dimension - 11; y--) {\n            bottomLeftVersionBits = pushBit(matrix.get(x, y), bottomLeftVersionBits);\n        }\n    }\n    let bestDifference = Infinity;\n    let bestVersion;\n    for (const version of VERSIONS) {\n        if (version.infoBits === topRightVersionBits || version.infoBits === bottomLeftVersionBits) {\n            return version;\n        }\n        let difference = numBitsDiffering(topRightVersionBits, version.infoBits);\n        if (difference < bestDifference) {\n            bestVersion = version;\n            bestDifference = difference;\n        }\n        difference = numBitsDiffering(bottomLeftVersionBits, version.infoBits);\n        if (difference < bestDifference) {\n            bestVersion = version;\n            bestDifference = difference;\n        }\n    }\n    // We can tolerate up to 3 bits of error since no two version info codewords will\n    // differ in less than 8 bits.\n    if (bestDifference <= 3) {\n        return bestVersion;\n    }\n}\nfunction readFormatInformation(matrix) {\n    let topLeftFormatInfoBits = 0;\n    for (let x = 0; x <= 8; x++) {\n        if (x !== 6) { // Skip timing pattern bit\n            topLeftFormatInfoBits = pushBit(matrix.get(x, 8), topLeftFormatInfoBits);\n        }\n    }\n    for (let y = 7; y >= 0; y--) {\n        if (y !== 6) { // Skip timing pattern bit\n            topLeftFormatInfoBits = pushBit(matrix.get(8, y), topLeftFormatInfoBits);\n        }\n    }\n    const dimension = matrix.height;\n    let topRightBottomRightFormatInfoBits = 0;\n    for (let y = dimension - 1; y >= dimension - 7; y--) { // bottom left\n        topRightBottomRightFormatInfoBits = pushBit(matrix.get(8, y), topRightBottomRightFormatInfoBits);\n    }\n    for (let x = dimension - 8; x < dimension; x++) { // top right\n        topRightBottomRightFormatInfoBits = pushBit(matrix.get(x, 8), topRightBottomRightFormatInfoBits);\n    }\n    let bestDifference = Infinity;\n    let bestFormatInfo = null;\n    for (const { bits, formatInfo } of FORMAT_INFO_TABLE) {\n        if (bits === topLeftFormatInfoBits || bits === topRightBottomRightFormatInfoBits) {\n            return formatInfo;\n        }\n        let difference = numBitsDiffering(topLeftFormatInfoBits, bits);\n        if (difference < bestDifference) {\n            bestFormatInfo = formatInfo;\n            bestDifference = difference;\n        }\n        if (topLeftFormatInfoBits !== topRightBottomRightFormatInfoBits) { // also try the other option\n            difference = numBitsDiffering(topRightBottomRightFormatInfoBits, bits);\n            if (difference < bestDifference) {\n                bestFormatInfo = formatInfo;\n                bestDifference = difference;\n            }\n        }\n    }\n    // Hamming distance of the 32 masked codes is 7, by construction, so <= 3 bits differing means we found a match\n    if (bestDifference <= 3) {\n        return bestFormatInfo;\n    }\n    return null;\n}\nfunction getDataBlocks(codewords, version, ecLevel) {\n    const ecInfo = version.errorCorrectionLevels[ecLevel];\n    const dataBlocks = [];\n    let totalCodewords = 0;\n    ecInfo.ecBlocks.forEach(block => {\n        for (let i = 0; i < block.numBlocks; i++) {\n            dataBlocks.push({ numDataCodewords: block.dataCodewordsPerBlock, codewords: [] });\n            totalCodewords += block.dataCodewordsPerBlock + ecInfo.ecCodewordsPerBlock;\n        }\n    });\n    // In some cases the QR code will be malformed enough that we pull off more or less than we should.\n    // If we pull off less there's nothing we can do.\n    // If we pull off more we can safely truncate\n    if (codewords.length < totalCodewords) {\n        return null;\n    }\n    codewords = codewords.slice(0, totalCodewords);\n    const shortBlockSize = ecInfo.ecBlocks[0].dataCodewordsPerBlock;\n    // Pull codewords to fill the blocks up to the minimum size\n    for (let i = 0; i < shortBlockSize; i++) {\n        for (const dataBlock of dataBlocks) {\n            dataBlock.codewords.push(codewords.shift());\n        }\n    }\n    // If there are any large blocks, pull codewords to fill the last element of those\n    if (ecInfo.ecBlocks.length > 1) {\n        const smallBlockCount = ecInfo.ecBlocks[0].numBlocks;\n        const largeBlockCount = ecInfo.ecBlocks[1].numBlocks;\n        for (let i = 0; i < largeBlockCount; i++) {\n            dataBlocks[smallBlockCount + i].codewords.push(codewords.shift());\n        }\n    }\n    // Add the rest of the codewords to the blocks. These are the error correction codewords.\n    while (codewords.length > 0) {\n        for (const dataBlock of dataBlocks) {\n            dataBlock.codewords.push(codewords.shift());\n        }\n    }\n    return dataBlocks;\n}\nfunction decodeMatrix(matrix) {\n    const version = readVersion(matrix);\n    if (!version) {\n        return null;\n    }\n    const formatInfo = readFormatInformation(matrix);\n    if (!formatInfo) {\n        return null;\n    }\n    const codewords = readCodewords(matrix, version, formatInfo);\n    const dataBlocks = getDataBlocks(codewords, version, formatInfo.errorCorrectionLevel);\n    if (!dataBlocks) {\n        return null;\n    }\n    // Count total number of data bytes\n    const totalBytes = dataBlocks.reduce((a, b) => a + b.numDataCodewords, 0);\n    const resultBytes = new Uint8ClampedArray(totalBytes);\n    let resultIndex = 0;\n    for (const dataBlock of dataBlocks) {\n        const correctedBytes = decode$1(dataBlock.codewords, dataBlock.codewords.length - dataBlock.numDataCodewords);\n        if (!correctedBytes) {\n            return null;\n        }\n        for (let i = 0; i < dataBlock.numDataCodewords; i++) {\n            resultBytes[resultIndex++] = correctedBytes[i];\n        }\n    }\n    try {\n        return decode(resultBytes, version.versionNumber);\n    }\n    catch (_a) {\n        return null;\n    }\n}\nfunction decode$2(matrix) {\n    if (matrix == null) {\n        return null;\n    }\n    const result = decodeMatrix(matrix);\n    if (result) {\n        return result;\n    }\n    // Decoding didn't work, try mirroring the QR across the topLeft -> bottomRight line.\n    for (let x = 0; x < matrix.width; x++) {\n        for (let y = x + 1; y < matrix.height; y++) {\n            if (matrix.get(x, y) !== matrix.get(y, x)) {\n                matrix.set(x, y, !matrix.get(x, y));\n                matrix.set(y, x, !matrix.get(y, x));\n            }\n        }\n    }\n    return decodeMatrix(matrix);\n}\n\nfunction squareToQuadrilateral(p1, p2, p3, p4) {\n    const dx3 = p1.x - p2.x + p3.x - p4.x;\n    const dy3 = p1.y - p2.y + p3.y - p4.y;\n    if (dx3 === 0 && dy3 === 0) { // Affine\n        return {\n            a11: p2.x - p1.x,\n            a12: p2.y - p1.y,\n            a13: 0,\n            a21: p3.x - p2.x,\n            a22: p3.y - p2.y,\n            a23: 0,\n            a31: p1.x,\n            a32: p1.y,\n            a33: 1,\n        };\n    }\n    else {\n        const dx1 = p2.x - p3.x;\n        const dx2 = p4.x - p3.x;\n        const dy1 = p2.y - p3.y;\n        const dy2 = p4.y - p3.y;\n        const denominator = dx1 * dy2 - dx2 * dy1;\n        const a13 = (dx3 * dy2 - dx2 * dy3) / denominator;\n        const a23 = (dx1 * dy3 - dx3 * dy1) / denominator;\n        return {\n            a11: p2.x - p1.x + a13 * p2.x,\n            a12: p2.y - p1.y + a13 * p2.y,\n            a13,\n            a21: p4.x - p1.x + a23 * p4.x,\n            a22: p4.y - p1.y + a23 * p4.y,\n            a23,\n            a31: p1.x,\n            a32: p1.y,\n            a33: 1,\n        };\n    }\n}\nfunction quadrilateralToSquare(p1, p2, p3, p4) {\n    // Here, the adjoint serves as the inverse:\n    const sToQ = squareToQuadrilateral(p1, p2, p3, p4);\n    return {\n        a11: sToQ.a22 * sToQ.a33 - sToQ.a23 * sToQ.a32,\n        a12: sToQ.a13 * sToQ.a32 - sToQ.a12 * sToQ.a33,\n        a13: sToQ.a12 * sToQ.a23 - sToQ.a13 * sToQ.a22,\n        a21: sToQ.a23 * sToQ.a31 - sToQ.a21 * sToQ.a33,\n        a22: sToQ.a11 * sToQ.a33 - sToQ.a13 * sToQ.a31,\n        a23: sToQ.a13 * sToQ.a21 - sToQ.a11 * sToQ.a23,\n        a31: sToQ.a21 * sToQ.a32 - sToQ.a22 * sToQ.a31,\n        a32: sToQ.a12 * sToQ.a31 - sToQ.a11 * sToQ.a32,\n        a33: sToQ.a11 * sToQ.a22 - sToQ.a12 * sToQ.a21,\n    };\n}\nfunction times(a, b) {\n    return {\n        a11: a.a11 * b.a11 + a.a21 * b.a12 + a.a31 * b.a13,\n        a12: a.a12 * b.a11 + a.a22 * b.a12 + a.a32 * b.a13,\n        a13: a.a13 * b.a11 + a.a23 * b.a12 + a.a33 * b.a13,\n        a21: a.a11 * b.a21 + a.a21 * b.a22 + a.a31 * b.a23,\n        a22: a.a12 * b.a21 + a.a22 * b.a22 + a.a32 * b.a23,\n        a23: a.a13 * b.a21 + a.a23 * b.a22 + a.a33 * b.a23,\n        a31: a.a11 * b.a31 + a.a21 * b.a32 + a.a31 * b.a33,\n        a32: a.a12 * b.a31 + a.a22 * b.a32 + a.a32 * b.a33,\n        a33: a.a13 * b.a31 + a.a23 * b.a32 + a.a33 * b.a33,\n    };\n}\nfunction extract(image, location) {\n    const qToS = quadrilateralToSquare({ x: 3.5, y: 3.5 }, { x: location.dimension - 3.5, y: 3.5 }, { x: location.dimension - 6.5, y: location.dimension - 6.5 }, { x: 3.5, y: location.dimension - 3.5 });\n    const sToQ = squareToQuadrilateral(location.topLeft, location.topRight, location.alignmentPattern, location.bottomLeft);\n    const transform = times(sToQ, qToS);\n    const matrix = BitMatrix.createEmpty(location.dimension, location.dimension);\n    const mappingFunction = (x, y) => {\n        const denominator = transform.a13 * x + transform.a23 * y + transform.a33;\n        return {\n            x: (transform.a11 * x + transform.a21 * y + transform.a31) / denominator,\n            y: (transform.a12 * x + transform.a22 * y + transform.a32) / denominator,\n        };\n    };\n    for (let y = 0; y < location.dimension; y++) {\n        for (let x = 0; x < location.dimension; x++) {\n            const xValue = x + 0.5;\n            const yValue = y + 0.5;\n            const sourcePixel = mappingFunction(xValue, yValue);\n            matrix.set(x, y, image.get(Math.floor(sourcePixel.x), Math.floor(sourcePixel.y)));\n        }\n    }\n    return {\n        matrix,\n        mappingFunction,\n    };\n}\n\nconst MAX_FINDERPATTERNS_TO_SEARCH = 4;\nconst MIN_QUAD_RATIO = 0.5;\nconst MAX_QUAD_RATIO = 1.5;\nconst distance = (a, b) => Math.sqrt(Math.pow((b.x - a.x), 2) + Math.pow((b.y - a.y), 2));\nfunction sum(values) {\n    return values.reduce((a, b) => a + b);\n}\n// Takes three finder patterns and organizes them into topLeft, topRight, etc\nfunction reorderFinderPatterns(pattern1, pattern2, pattern3) {\n    // Find distances between pattern centers\n    const oneTwoDistance = distance(pattern1, pattern2);\n    const twoThreeDistance = distance(pattern2, pattern3);\n    const oneThreeDistance = distance(pattern1, pattern3);\n    let bottomLeft;\n    let topLeft;\n    let topRight;\n    // Assume one closest to other two is B; A and C will just be guesses at first\n    if (twoThreeDistance >= oneTwoDistance && twoThreeDistance >= oneThreeDistance) {\n        [bottomLeft, topLeft, topRight] = [pattern2, pattern1, pattern3];\n    }\n    else if (oneThreeDistance >= twoThreeDistance && oneThreeDistance >= oneTwoDistance) {\n        [bottomLeft, topLeft, topRight] = [pattern1, pattern2, pattern3];\n    }\n    else {\n        [bottomLeft, topLeft, topRight] = [pattern1, pattern3, pattern2];\n    }\n    // Use cross product to figure out whether bottomLeft (A) and topRight (C) are correct or flipped in relation to topLeft (B)\n    // This asks whether BC x BA has a positive z component, which is the arrangement we want. If it's negative, then\n    // we've got it flipped around and should swap topRight and bottomLeft.\n    if (((topRight.x - topLeft.x) * (bottomLeft.y - topLeft.y)) - ((topRight.y - topLeft.y) * (bottomLeft.x - topLeft.x)) < 0) {\n        [bottomLeft, topRight] = [topRight, bottomLeft];\n    }\n    return { bottomLeft, topLeft, topRight };\n}\n// Computes the dimension (number of modules on a side) of the QR Code based on the position of the finder patterns\nfunction computeDimension(topLeft, topRight, bottomLeft, matrix) {\n    const moduleSize = (sum(countBlackWhiteRun(topLeft, bottomLeft, matrix, 5)) / 7 + // Divide by 7 since the ratio is 1:1:3:1:1\n        sum(countBlackWhiteRun(topLeft, topRight, matrix, 5)) / 7 +\n        sum(countBlackWhiteRun(bottomLeft, topLeft, matrix, 5)) / 7 +\n        sum(countBlackWhiteRun(topRight, topLeft, matrix, 5)) / 7) / 4;\n    if (moduleSize < 1) {\n        throw new Error(\"Invalid module size\");\n    }\n    const topDimension = Math.round(distance(topLeft, topRight) / moduleSize);\n    const sideDimension = Math.round(distance(topLeft, bottomLeft) / moduleSize);\n    let dimension = Math.floor((topDimension + sideDimension) / 2) + 7;\n    switch (dimension % 4) {\n        case 0:\n            dimension++;\n            break;\n        case 2:\n            dimension--;\n            break;\n    }\n    return { dimension, moduleSize };\n}\n// Takes an origin point and an end point and counts the sizes of the black white run from the origin towards the end point.\n// Returns an array of elements, representing the pixel size of the black white run.\n// Uses a variant of http://en.wikipedia.org/wiki/Bresenham's_line_algorithm\nfunction countBlackWhiteRunTowardsPoint(origin, end, matrix, length) {\n    const switchPoints = [{ x: Math.floor(origin.x), y: Math.floor(origin.y) }];\n    const steep = Math.abs(end.y - origin.y) > Math.abs(end.x - origin.x);\n    let fromX;\n    let fromY;\n    let toX;\n    let toY;\n    if (steep) {\n        fromX = Math.floor(origin.y);\n        fromY = Math.floor(origin.x);\n        toX = Math.floor(end.y);\n        toY = Math.floor(end.x);\n    }\n    else {\n        fromX = Math.floor(origin.x);\n        fromY = Math.floor(origin.y);\n        toX = Math.floor(end.x);\n        toY = Math.floor(end.y);\n    }\n    const dx = Math.abs(toX - fromX);\n    const dy = Math.abs(toY - fromY);\n    let error = Math.floor(-dx / 2);\n    const xStep = fromX < toX ? 1 : -1;\n    const yStep = fromY < toY ? 1 : -1;\n    let currentPixel = true;\n    // Loop up until x == toX, but not beyond\n    for (let x = fromX, y = fromY; x !== toX + xStep; x += xStep) {\n        // Does current pixel mean we have moved white to black or vice versa?\n        // Scanning black in state 0,2 and white in state 1, so if we find the wrong\n        // color, advance to next state or end if we are in state 2 already\n        const realX = steep ? y : x;\n        const realY = steep ? x : y;\n        if (matrix.get(realX, realY) !== currentPixel) {\n            currentPixel = !currentPixel;\n            switchPoints.push({ x: realX, y: realY });\n            if (switchPoints.length === length + 1) {\n                break;\n            }\n        }\n        error += dy;\n        if (error > 0) {\n            if (y === toY) {\n                break;\n            }\n            y += yStep;\n            error -= dx;\n        }\n    }\n    const distances = [];\n    for (let i = 0; i < length; i++) {\n        if (switchPoints[i] && switchPoints[i + 1]) {\n            distances.push(distance(switchPoints[i], switchPoints[i + 1]));\n        }\n        else {\n            distances.push(0);\n        }\n    }\n    return distances;\n}\n// Takes an origin point and an end point and counts the sizes of the black white run in the origin point\n// along the line that intersects with the end point. Returns an array of elements, representing the pixel sizes\n// of the black white run. Takes a length which represents the number of switches from black to white to look for.\nfunction countBlackWhiteRun(origin, end, matrix, length) {\n    const rise = end.y - origin.y;\n    const run = end.x - origin.x;\n    const towardsEnd = countBlackWhiteRunTowardsPoint(origin, end, matrix, Math.ceil(length / 2));\n    const awayFromEnd = countBlackWhiteRunTowardsPoint(origin, { x: origin.x - run, y: origin.y - rise }, matrix, Math.ceil(length / 2));\n    const middleValue = towardsEnd.shift() + awayFromEnd.shift() - 1; // Substract one so we don't double count a pixel\n    return awayFromEnd.concat(middleValue).concat(...towardsEnd);\n}\n// Takes in a black white run and an array of expected ratios. Returns the average size of the run as well as the \"error\" -\n// that is the amount the run diverges from the expected ratio\nfunction scoreBlackWhiteRun(sequence, ratios) {\n    const averageSize = sum(sequence) / sum(ratios);\n    let error = 0;\n    ratios.forEach((ratio, i) => {\n        error += Math.pow((sequence[i] - ratio * averageSize), 2);\n    });\n    return { averageSize, error };\n}\n// Takes an X,Y point and an array of sizes and scores the point against those ratios.\n// For example for a finder pattern takes the ratio list of 1:1:3:1:1 and checks horizontal, vertical and diagonal ratios\n// against that.\nfunction scorePattern(point, ratios, matrix) {\n    try {\n        const horizontalRun = countBlackWhiteRun(point, { x: -1, y: point.y }, matrix, ratios.length);\n        const verticalRun = countBlackWhiteRun(point, { x: point.x, y: -1 }, matrix, ratios.length);\n        const topLeftPoint = {\n            x: Math.max(0, point.x - point.y) - 1,\n            y: Math.max(0, point.y - point.x) - 1,\n        };\n        const topLeftBottomRightRun = countBlackWhiteRun(point, topLeftPoint, matrix, ratios.length);\n        const bottomLeftPoint = {\n            x: Math.min(matrix.width, point.x + point.y) + 1,\n            y: Math.min(matrix.height, point.y + point.x) + 1,\n        };\n        const bottomLeftTopRightRun = countBlackWhiteRun(point, bottomLeftPoint, matrix, ratios.length);\n        const horzError = scoreBlackWhiteRun(horizontalRun, ratios);\n        const vertError = scoreBlackWhiteRun(verticalRun, ratios);\n        const diagDownError = scoreBlackWhiteRun(topLeftBottomRightRun, ratios);\n        const diagUpError = scoreBlackWhiteRun(bottomLeftTopRightRun, ratios);\n        const ratioError = Math.sqrt(horzError.error * horzError.error +\n            vertError.error * vertError.error +\n            diagDownError.error * diagDownError.error +\n            diagUpError.error * diagUpError.error);\n        const avgSize = (horzError.averageSize + vertError.averageSize + diagDownError.averageSize + diagUpError.averageSize) / 4;\n        const sizeError = (Math.pow((horzError.averageSize - avgSize), 2) +\n            Math.pow((vertError.averageSize - avgSize), 2) +\n            Math.pow((diagDownError.averageSize - avgSize), 2) +\n            Math.pow((diagUpError.averageSize - avgSize), 2)) / avgSize;\n        return ratioError + sizeError;\n    }\n    catch (_a) {\n        return Infinity;\n    }\n}\nfunction locate(matrix) {\n    const finderPatternQuads = [];\n    let activeFinderPatternQuads = [];\n    const alignmentPatternQuads = [];\n    let activeAlignmentPatternQuads = [];\n    for (let y = 0; y <= matrix.height; y++) {\n        let length = 0;\n        let lastBit = false;\n        let scans = [0, 0, 0, 0, 0];\n        for (let x = -1; x <= matrix.width; x++) {\n            const v = matrix.get(x, y);\n            if (v === lastBit) {\n                length++;\n            }\n            else {\n                scans = [scans[1], scans[2], scans[3], scans[4], length];\n                length = 1;\n                lastBit = v;\n                // Do the last 5 color changes ~ match the expected ratio for a finder pattern? 1:1:3:1:1 of b:w:b:w:b\n                const averageFinderPatternBlocksize = sum(scans) / 7;\n                const validFinderPattern = Math.abs(scans[0] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize &&\n                    Math.abs(scans[1] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize &&\n                    Math.abs(scans[2] - 3 * averageFinderPatternBlocksize) < 3 * averageFinderPatternBlocksize &&\n                    Math.abs(scans[3] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize &&\n                    Math.abs(scans[4] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize &&\n                    !v; // And make sure the current pixel is white since finder patterns are bordered in white\n                // Do the last 3 color changes ~ match the expected ratio for an alignment pattern? 1:1:1 of w:b:w\n                const averageAlignmentPatternBlocksize = sum(scans.slice(-3)) / 3;\n                const validAlignmentPattern = Math.abs(scans[2] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize &&\n                    Math.abs(scans[3] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize &&\n                    Math.abs(scans[4] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize &&\n                    v; // Is the current pixel black since alignment patterns are bordered in black\n                if (validFinderPattern) {\n                    // Compute the start and end x values of the large center black square\n                    const endX = x - scans[3] - scans[4];\n                    const startX = endX - scans[2];\n                    const line = { startX, endX, y };\n                    // Is there a quad directly above the current spot? If so, extend it with the new line. Otherwise, create a new quad with\n                    // that line as the starting point.\n                    const matchingQuads = activeFinderPatternQuads.filter(q => (startX >= q.bottom.startX && startX <= q.bottom.endX) ||\n                        (endX >= q.bottom.startX && startX <= q.bottom.endX) ||\n                        (startX <= q.bottom.startX && endX >= q.bottom.endX && ((scans[2] / (q.bottom.endX - q.bottom.startX)) < MAX_QUAD_RATIO &&\n                            (scans[2] / (q.bottom.endX - q.bottom.startX)) > MIN_QUAD_RATIO)));\n                    if (matchingQuads.length > 0) {\n                        matchingQuads[0].bottom = line;\n                    }\n                    else {\n                        activeFinderPatternQuads.push({ top: line, bottom: line });\n                    }\n                }\n                if (validAlignmentPattern) {\n                    // Compute the start and end x values of the center black square\n                    const endX = x - scans[4];\n                    const startX = endX - scans[3];\n                    const line = { startX, y, endX };\n                    // Is there a quad directly above the current spot? If so, extend it with the new line. Otherwise, create a new quad with\n                    // that line as the starting point.\n                    const matchingQuads = activeAlignmentPatternQuads.filter(q => (startX >= q.bottom.startX && startX <= q.bottom.endX) ||\n                        (endX >= q.bottom.startX && startX <= q.bottom.endX) ||\n                        (startX <= q.bottom.startX && endX >= q.bottom.endX && ((scans[2] / (q.bottom.endX - q.bottom.startX)) < MAX_QUAD_RATIO &&\n                            (scans[2] / (q.bottom.endX - q.bottom.startX)) > MIN_QUAD_RATIO)));\n                    if (matchingQuads.length > 0) {\n                        matchingQuads[0].bottom = line;\n                    }\n                    else {\n                        activeAlignmentPatternQuads.push({ top: line, bottom: line });\n                    }\n                }\n            }\n        }\n        finderPatternQuads.push(...activeFinderPatternQuads.filter(q => q.bottom.y !== y && q.bottom.y - q.top.y >= 2));\n        activeFinderPatternQuads = activeFinderPatternQuads.filter(q => q.bottom.y === y);\n        alignmentPatternQuads.push(...activeAlignmentPatternQuads.filter(q => q.bottom.y !== y));\n        activeAlignmentPatternQuads = activeAlignmentPatternQuads.filter(q => q.bottom.y === y);\n    }\n    finderPatternQuads.push(...activeFinderPatternQuads.filter(q => q.bottom.y - q.top.y >= 2));\n    alignmentPatternQuads.push(...activeAlignmentPatternQuads);\n    const finderPatternGroups = finderPatternQuads\n        .filter(q => q.bottom.y - q.top.y >= 2) // All quads must be at least 2px tall since the center square is larger than a block\n        .map(q => {\n        const x = (q.top.startX + q.top.endX + q.bottom.startX + q.bottom.endX) / 4;\n        const y = (q.top.y + q.bottom.y + 1) / 2;\n        if (!matrix.get(Math.round(x), Math.round(y))) {\n            return;\n        }\n        const lengths = [q.top.endX - q.top.startX, q.bottom.endX - q.bottom.startX, q.bottom.y - q.top.y + 1];\n        const size = sum(lengths) / lengths.length;\n        const score = scorePattern({ x: Math.round(x), y: Math.round(y) }, [1, 1, 3, 1, 1], matrix);\n        return { score, x, y, size };\n    })\n        .filter(q => !!q) // Filter out any rejected quads from above\n        .sort((a, b) => a.score - b.score)\n        // Now take the top finder pattern options and try to find 2 other options with a similar size.\n        .map((point, i, finderPatterns) => {\n        if (i > MAX_FINDERPATTERNS_TO_SEARCH) {\n            return null;\n        }\n        const otherPoints = finderPatterns\n            .filter((p, ii) => i !== ii)\n            .map(p => ({ x: p.x, y: p.y, score: p.score + (Math.pow((p.size - point.size), 2)) / point.size, size: p.size }))\n            .sort((a, b) => a.score - b.score);\n        if (otherPoints.length < 2) {\n            return null;\n        }\n        const score = point.score + otherPoints[0].score + otherPoints[1].score;\n        return { points: [point].concat(otherPoints.slice(0, 2)), score };\n    })\n        .filter(q => !!q) // Filter out any rejected finder patterns from above\n        .sort((a, b) => a.score - b.score);\n    if (finderPatternGroups.length === 0) {\n        return null;\n    }\n    const { topRight, topLeft, bottomLeft } = reorderFinderPatterns(finderPatternGroups[0].points[0], finderPatternGroups[0].points[1], finderPatternGroups[0].points[2]);\n    // Now that we've found the three finder patterns we can determine the blockSize and the size of the QR code.\n    // We'll use these to help find the alignment pattern but also later when we do the extraction.\n    let dimension;\n    let moduleSize;\n    try {\n        ({ dimension, moduleSize } = computeDimension(topLeft, topRight, bottomLeft, matrix));\n    }\n    catch (e) {\n        return null;\n    }\n    // Now find the alignment pattern\n    const bottomRightFinderPattern = {\n        x: topRight.x - topLeft.x + bottomLeft.x,\n        y: topRight.y - topLeft.y + bottomLeft.y,\n    };\n    const modulesBetweenFinderPatterns = ((distance(topLeft, bottomLeft) + distance(topLeft, topRight)) / 2 / moduleSize);\n    const correctionToTopLeft = 1 - (3 / modulesBetweenFinderPatterns);\n    const expectedAlignmentPattern = {\n        x: topLeft.x + correctionToTopLeft * (bottomRightFinderPattern.x - topLeft.x),\n        y: topLeft.y + correctionToTopLeft * (bottomRightFinderPattern.y - topLeft.y),\n    };\n    const alignmentPatterns = alignmentPatternQuads\n        .map(q => {\n        const x = (q.top.startX + q.top.endX + q.bottom.startX + q.bottom.endX) / 4;\n        const y = (q.top.y + q.bottom.y + 1) / 2;\n        if (!matrix.get(Math.floor(x), Math.floor(y))) {\n            return;\n        }\n        const lengths = [q.top.endX - q.top.startX, q.bottom.endX - q.bottom.startX, (q.bottom.y - q.top.y + 1)];\n        const size = sum(lengths) / lengths.length;\n        const sizeScore = scorePattern({ x: Math.floor(x), y: Math.floor(y) }, [1, 1, 1], matrix);\n        const score = sizeScore + distance({ x, y }, expectedAlignmentPattern);\n        return { x, y, score };\n    })\n        .filter(v => !!v)\n        .sort((a, b) => a.score - b.score);\n    // If there are less than 15 modules between finder patterns it's a version 1 QR code and as such has no alignmemnt pattern\n    // so we can only use our best guess.\n    const alignmentPattern = modulesBetweenFinderPatterns >= 15 && alignmentPatterns.length ? alignmentPatterns[0] : expectedAlignmentPattern;\n    return {\n        alignmentPattern: { x: alignmentPattern.x, y: alignmentPattern.y },\n        bottomLeft: { x: bottomLeft.x, y: bottomLeft.y },\n        dimension,\n        topLeft: { x: topLeft.x, y: topLeft.y },\n        topRight: { x: topRight.x, y: topRight.y },\n    };\n}\n\nfunction scan(matrix) {\n    const location = locate(matrix);\n    if (!location) {\n        return null;\n    }\n    const extracted = extract(matrix, location);\n    const decoded = decode$2(extracted.matrix);\n    if (!decoded) {\n        return null;\n    }\n    return {\n        binaryData: decoded.bytes,\n        data: decoded.text,\n        chunks: decoded.chunks,\n        location: {\n            topRightCorner: extracted.mappingFunction(location.dimension, 0),\n            topLeftCorner: extracted.mappingFunction(0, 0),\n            bottomRightCorner: extracted.mappingFunction(location.dimension, location.dimension),\n            bottomLeftCorner: extracted.mappingFunction(0, location.dimension),\n            topRightFinderPattern: location.topRight,\n            topLeftFinderPattern: location.topLeft,\n            bottomLeftFinderPattern: location.bottomLeft,\n            bottomRightAlignmentPattern: location.alignmentPattern,\n        },\n    };\n}\nconst defaultOptions = {\n    inversionAttempts: \"attemptBoth\",\n    greyScaleWeights: {\n        red: 0.2126,\n        green: 0.7152,\n        blue: 0.0722,\n        useIntegerApproximation: false,\n    },\n    canOverwriteImage: true,\n};\nfunction mergeObject(target, src) {\n    Object.keys(src).forEach(opt => {\n        target[opt] = src[opt];\n    });\n}\nfunction jsQR(data, width, height, providedOptions = {}) {\n    const options = Object.create(null);\n    mergeObject(options, defaultOptions);\n    mergeObject(options, providedOptions);\n    const shouldInvert = options.inversionAttempts === \"attemptBoth\" || options.inversionAttempts === \"invertFirst\";\n    const tryInvertedFirst = options.inversionAttempts === \"onlyInvert\" || options.inversionAttempts === \"invertFirst\";\n    const { binarized, inverted } = binarize(data, width, height, shouldInvert, options.greyScaleWeights, options.canOverwriteImage);\n    let result = scan(tryInvertedFirst ? inverted : binarized);\n    if (!result && (options.inversionAttempts === \"attemptBoth\" || options.inversionAttempts === \"invertFirst\")) {\n        result = scan(tryInvertedFirst ? binarized : inverted);\n    }\n    return result;\n}\njsQR.default = jsQR;\n\nexport default jsQR;\n//# sourceMappingURL=jsQR.js.map\n","\n\n\nvar undefinedHeader = /* array */[];\n\nfunction some(x) {\n  if (x === undefined) {\n    var block = /* tuple */[\n      undefinedHeader,\n      0\n    ];\n    block.tag = 256;\n    return block;\n  } else if (x !== null && x[0] === undefinedHeader) {\n    var nid = x[1] + 1 | 0;\n    var block$1 = /* tuple */[\n      undefinedHeader,\n      nid\n    ];\n    block$1.tag = 256;\n    return block$1;\n  } else {\n    return x;\n  }\n}\n\nfunction nullable_to_opt(x) {\n  if (x === null || x === undefined) {\n    return undefined;\n  } else {\n    return some(x);\n  }\n}\n\nfunction undefined_to_opt(x) {\n  if (x === undefined) {\n    return undefined;\n  } else {\n    return some(x);\n  }\n}\n\nfunction null_to_opt(x) {\n  if (x === null) {\n    return undefined;\n  } else {\n    return some(x);\n  }\n}\n\nfunction valFromOption(x) {\n  if (x !== null && x[0] === undefinedHeader) {\n    var depth = x[1];\n    if (depth === 0) {\n      return undefined;\n    } else {\n      return /* tuple */[\n              undefinedHeader,\n              depth - 1 | 0\n            ];\n    }\n  } else {\n    return x;\n  }\n}\n\nfunction option_get(x) {\n  if (x === undefined) {\n    return undefined;\n  } else {\n    return valFromOption(x);\n  }\n}\n\nfunction option_get_unwrap(x) {\n  if (x === undefined) {\n    return undefined;\n  } else {\n    return valFromOption(x)[1];\n  }\n}\n\nexport {\n  nullable_to_opt ,\n  undefined_to_opt ,\n  null_to_opt ,\n  valFromOption ,\n  some ,\n  option_get ,\n  option_get_unwrap ,\n  \n}\n/* No side effect */\n","// Generated by BUCKLESCRIPT VERSION 5.0.2, PLEASE EDIT WITH CARE\n\nimport * as JsqrEs6 from \"jsqr-es6\";\nimport * as Caml_option from \"../node_modules/bs-platform/lib/es6/caml_option.js\";\n\nfunction string_of_invertOptions(param) {\n  switch (param) {\n    case 0 : \n        return \"attemptBoth\";\n    case 1 : \n        return \"dontInvert\";\n    case 2 : \n        return \"onlyInvert\";\n    case 3 : \n        return \"invertFirst\";\n    \n  }\n}\n\nfunction jsQR(d, w, h, invertOptions) {\n  var optString = string_of_invertOptions(invertOptions);\n  return Caml_option.nullable_to_opt(JsqrEs6.default(d, w, h, {\n                  inversionAttempts: optString,\n                  canOverwriteImage: true\n                }));\n}\n\nvar defaultInversion = /* InvertFirst */3;\n\nexport {\n  string_of_invertOptions ,\n  defaultInversion ,\n  jsQR ,\n  \n}\n/* jsqr-es6 Not a pure module */\n","// Generated by BUCKLESCRIPT VERSION 5.0.2, PLEASE EDIT WITH CARE\n\nimport * as JsQr$QueerLoop from \"./JsQr.bs.js\";\n\nself.onmessage = (function (e) {\n    var match = e.data;\n    var maybeCode = JsQr$QueerLoop.jsQR(match[0], match[1], match[2], JsQr$QueerLoop.defaultInversion);\n    postMessage(maybeCode);\n    return /* () */0;\n  });\n\nexport {\n  \n}\n/*  Not a pure module */\n"],"names":["jsQR","Caml_option.nullable_to_opt","JsqrEs6.default","JsQr$QueerLoop.jsQR","JsQr$QueerLoop.defaultInversion"],"mappings":"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AU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;IAC1E,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;IAC1E,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;IAC1E,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;IAC1E,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;IAC1E,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;IAC1E,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;IAC1E,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;IAC1E,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;IAC1E,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;IAC1E,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;IAC1E,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;IAC1E,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;IAC1E,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;IAC1E,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;IAC1E,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;IAC1E,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;IAC1E,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;IAC1E,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;IAC1E,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;IAC1E,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;IAC1E,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;IAC1E,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;IAC1E,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;IAC1E,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAA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"}