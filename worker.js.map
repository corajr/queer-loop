{"version":3,"file":"worker.js","sources":["node_modules/jsqr-es6/dist/jsQR.js","node_modules/bs-platform/lib/es6/caml_option.js","src/DecodeWorker.bs.js","src/JsQr.bs.js"],"sourcesContent":["class BitMatrix {\n    static createEmpty(width, height) {\n        return new BitMatrix(new Uint8ClampedArray(width * height), width);\n    }\n    constructor(data, width) {\n        this.width = width;\n        this.height = data.length / width;\n        this.data = data;\n    }\n    get(x, y) {\n        if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n            return false;\n        }\n        return !!this.data[y * this.width + x];\n    }\n    set(x, y, v) {\n        this.data[y * this.width + x] = v ? 1 : 0;\n    }\n    setRegion(left, top, width, height, v) {\n        for (let y = top; y < top + height; y++) {\n            for (let x = left; x < left + width; x++) {\n                this.set(x, y, !!v);\n            }\n        }\n    }\n}\n\nconst REGION_SIZE = 8;\nconst MIN_DYNAMIC_RANGE = 24;\nfunction numBetween(value, min, max) {\n    return value < min ? min : value > max ? max : value;\n}\n// Like BitMatrix but accepts arbitry Uint8 values\nclass Matrix {\n    constructor(width, height, buffer) {\n        this.width = width;\n        const bufferSize = width * height;\n        if (buffer && buffer.length !== bufferSize) {\n            throw new Error(\"Wrong buffer size\");\n        }\n        this.data = buffer || new Uint8ClampedArray(bufferSize);\n    }\n    get(x, y) {\n        return this.data[y * this.width + x];\n    }\n    set(x, y, value) {\n        this.data[y * this.width + x] = value;\n    }\n}\nfunction binarize(data, width, height, returnInverted, greyscaleWeights, canOverwriteImage) {\n    const pixelCount = width * height;\n    if (data.length !== pixelCount * 4) {\n        throw new Error(\"Malformed data passed to binarizer.\");\n    }\n    // assign the greyscale and binary image within the rgba buffer as the rgba image will not be needed after conversion\n    let bufferOffset = 0;\n    // Convert image to greyscale\n    let greyscaleBuffer;\n    if (canOverwriteImage) {\n        greyscaleBuffer = new Uint8ClampedArray(data.buffer, bufferOffset, pixelCount);\n        bufferOffset += pixelCount;\n    }\n    const greyscalePixels = new Matrix(width, height, greyscaleBuffer);\n    if (greyscaleWeights.useIntegerApproximation) {\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                const pixelPosition = (y * width + x) * 4;\n                const r = data[pixelPosition];\n                const g = data[pixelPosition + 1];\n                const b = data[pixelPosition + 2];\n                greyscalePixels.set(x, y, \n                // tslint:disable-next-line no-bitwise\n                (greyscaleWeights.red * r + greyscaleWeights.green * g + greyscaleWeights.blue * b + 128) >> 8);\n            }\n        }\n    }\n    else {\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                const pixelPosition = (y * width + x) * 4;\n                const r = data[pixelPosition];\n                const g = data[pixelPosition + 1];\n                const b = data[pixelPosition + 2];\n                greyscalePixels.set(x, y, greyscaleWeights.red * r + greyscaleWeights.green * g + greyscaleWeights.blue * b);\n            }\n        }\n    }\n    const horizontalRegionCount = Math.ceil(width / REGION_SIZE);\n    const verticalRegionCount = Math.ceil(height / REGION_SIZE);\n    const blackPointsCount = horizontalRegionCount * verticalRegionCount;\n    let blackPointsBuffer;\n    if (canOverwriteImage) {\n        blackPointsBuffer = new Uint8ClampedArray(data.buffer, bufferOffset, blackPointsCount);\n        bufferOffset += blackPointsCount;\n    }\n    const blackPoints = new Matrix(horizontalRegionCount, verticalRegionCount, blackPointsBuffer);\n    for (let verticalRegion = 0; verticalRegion < verticalRegionCount; verticalRegion++) {\n        for (let hortizontalRegion = 0; hortizontalRegion < horizontalRegionCount; hortizontalRegion++) {\n            let min = Infinity;\n            let max = 0;\n            for (let y = 0; y < REGION_SIZE; y++) {\n                for (let x = 0; x < REGION_SIZE; x++) {\n                    const pixelLumosity = greyscalePixels.get(hortizontalRegion * REGION_SIZE + x, verticalRegion * REGION_SIZE + y);\n                    min = Math.min(min, pixelLumosity);\n                    max = Math.max(max, pixelLumosity);\n                }\n            }\n            // We could also compute the real average of all pixels but following the assumption that the qr code consists\n            // of bright and dark pixels and essentially not much in between, by (min + max)/2 we make the cut really between\n            // those two classes. If using the average over all pixel in a block of mostly bright pixels and few dark pixels,\n            // the avg would tend to the bright side and darker bright pixels could be interpreted as dark.\n            let average = (min + max) / 2;\n            // Small bias towards black by moving the threshold up. We do this, as in the finder patterns white holes tend\n            // to appear which makes them undetectable.\n            const blackBias = 1.1;\n            average = Math.min(255, average * blackBias);\n            if (max - min <= MIN_DYNAMIC_RANGE) {\n                // If variation within the block is low, assume this is a block with only light or only\n                // dark pixels. In that case we do not want to use the average, as it would divide this\n                // low contrast area into black and white pixels, essentially creating data out of noise.\n                //\n                // Default the blackpoint for these blocks to be half the min - effectively white them out\n                average = min / 2;\n                if (verticalRegion > 0 && hortizontalRegion > 0) {\n                    // Correct the \"white background\" assumption for blocks that have neighbors by comparing\n                    // the pixels in this block to the previously calculated black points. This is based on\n                    // the fact that dark barcode symbology is always surrounded by some amount of light\n                    // background for which reasonable black point estimates were made. The bp estimated at\n                    // the boundaries is used for the interior.\n                    // The (min < bp) is arbitrary but works better than other heuristics that were tried.\n                    const averageNeighborBlackPoint = (blackPoints.get(hortizontalRegion, verticalRegion - 1) +\n                        (2 * blackPoints.get(hortizontalRegion - 1, verticalRegion)) +\n                        blackPoints.get(hortizontalRegion - 1, verticalRegion - 1)) / 4;\n                    if (min < averageNeighborBlackPoint) {\n                        average = averageNeighborBlackPoint; // no need to apply black bias as already applied to neighbors\n                    }\n                }\n            }\n            blackPoints.set(hortizontalRegion, verticalRegion, average);\n        }\n    }\n    let binarized;\n    if (canOverwriteImage) {\n        const binarizedBuffer = new Uint8ClampedArray(data.buffer, bufferOffset, pixelCount);\n        bufferOffset += pixelCount;\n        binarized = new BitMatrix(binarizedBuffer, width);\n    }\n    else {\n        binarized = BitMatrix.createEmpty(width, height);\n    }\n    let inverted = null;\n    if (returnInverted) {\n        if (canOverwriteImage) {\n            const invertedBuffer = new Uint8ClampedArray(data.buffer, bufferOffset, pixelCount);\n            inverted = new BitMatrix(invertedBuffer, width);\n        }\n        else {\n            inverted = BitMatrix.createEmpty(width, height);\n        }\n    }\n    for (let verticalRegion = 0; verticalRegion < verticalRegionCount; verticalRegion++) {\n        for (let hortizontalRegion = 0; hortizontalRegion < horizontalRegionCount; hortizontalRegion++) {\n            const left = numBetween(hortizontalRegion, 2, horizontalRegionCount - 3);\n            const top = numBetween(verticalRegion, 2, verticalRegionCount - 3);\n            let sum = 0;\n            for (let xRegion = -2; xRegion <= 2; xRegion++) {\n                for (let yRegion = -2; yRegion <= 2; yRegion++) {\n                    sum += blackPoints.get(left + xRegion, top + yRegion);\n                }\n            }\n            const threshold = sum / 25;\n            for (let xRegion = 0; xRegion < REGION_SIZE; xRegion++) {\n                for (let yRegion = 0; yRegion < REGION_SIZE; yRegion++) {\n                    const x = hortizontalRegion * REGION_SIZE + xRegion;\n                    const y = verticalRegion * REGION_SIZE + yRegion;\n                    const lum = greyscalePixels.get(x, y);\n                    binarized.set(x, y, lum <= threshold);\n                    if (returnInverted) {\n                        inverted.set(x, y, !(lum <= threshold));\n                    }\n                }\n            }\n        }\n    }\n    if (returnInverted) {\n        return { binarized, inverted };\n    }\n    return { binarized };\n}\n\n// tslint:disable:no-bitwise\nclass BitStream {\n    constructor(bytes) {\n        this.byteOffset = 0;\n        this.bitOffset = 0;\n        this.bytes = bytes;\n    }\n    readBits(numBits) {\n        if (numBits < 1 || numBits > 32 || numBits > this.available()) {\n            throw new Error(\"Cannot read \" + numBits.toString() + \" bits\");\n        }\n        let result = 0;\n        // First, read remainder from current byte\n        if (this.bitOffset > 0) {\n            const bitsLeft = 8 - this.bitOffset;\n            const toRead = numBits < bitsLeft ? numBits : bitsLeft;\n            const bitsToNotRead = bitsLeft - toRead;\n            const mask = (0xFF >> (8 - toRead)) << bitsToNotRead;\n            result = (this.bytes[this.byteOffset] & mask) >> bitsToNotRead;\n            numBits -= toRead;\n            this.bitOffset += toRead;\n            if (this.bitOffset === 8) {\n                this.bitOffset = 0;\n                this.byteOffset++;\n            }\n        }\n        // Next read whole bytes\n        if (numBits > 0) {\n            while (numBits >= 8) {\n                result = (result << 8) | (this.bytes[this.byteOffset] & 0xFF);\n                this.byteOffset++;\n                numBits -= 8;\n            }\n            // Finally read a partial byte\n            if (numBits > 0) {\n                const bitsToNotRead = 8 - numBits;\n                const mask = (0xFF >> bitsToNotRead) << bitsToNotRead;\n                result = (result << numBits) | ((this.bytes[this.byteOffset] & mask) >> bitsToNotRead);\n                this.bitOffset += numBits;\n            }\n        }\n        return result;\n    }\n    available() {\n        return 8 * (this.bytes.length - this.byteOffset) - this.bitOffset;\n    }\n}\n\n// tslint:disable:no-bitwise\nvar Mode;\n(function (Mode) {\n    Mode[\"Numeric\"] = \"numeric\";\n    Mode[\"Alphanumeric\"] = \"alphanumeric\";\n    Mode[\"Byte\"] = \"byte\";\n    Mode[\"Kanji\"] = \"kanji\";\n    Mode[\"ECI\"] = \"eci\";\n})(Mode || (Mode = {}));\nvar ModeByte;\n(function (ModeByte) {\n    ModeByte[ModeByte[\"Terminator\"] = 0] = \"Terminator\";\n    ModeByte[ModeByte[\"Numeric\"] = 1] = \"Numeric\";\n    ModeByte[ModeByte[\"Alphanumeric\"] = 2] = \"Alphanumeric\";\n    ModeByte[ModeByte[\"Byte\"] = 4] = \"Byte\";\n    ModeByte[ModeByte[\"Kanji\"] = 8] = \"Kanji\";\n    ModeByte[ModeByte[\"ECI\"] = 7] = \"ECI\";\n    // StructuredAppend = 0x3,\n    // FNC1FirstPosition = 0x5,\n    // FNC1SecondPosition = 0x9,\n})(ModeByte || (ModeByte = {}));\nfunction decodeNumeric(stream, size) {\n    const bytes = [];\n    let text = \"\";\n    const characterCountSize = [10, 12, 14][size];\n    let length = stream.readBits(characterCountSize);\n    // Read digits in groups of 3\n    while (length >= 3) {\n        const num = stream.readBits(10);\n        if (num >= 1000) {\n            throw new Error(\"Invalid numeric value above 999\");\n        }\n        const a = Math.floor(num / 100);\n        const b = Math.floor(num / 10) % 10;\n        const c = num % 10;\n        bytes.push(48 + a, 48 + b, 48 + c);\n        text += a.toString() + b.toString() + c.toString();\n        length -= 3;\n    }\n    // If the number of digits aren't a multiple of 3, the remaining digits are special cased.\n    if (length === 2) {\n        const num = stream.readBits(7);\n        if (num >= 100) {\n            throw new Error(\"Invalid numeric value above 99\");\n        }\n        const a = Math.floor(num / 10);\n        const b = num % 10;\n        bytes.push(48 + a, 48 + b);\n        text += a.toString() + b.toString();\n    }\n    else if (length === 1) {\n        const num = stream.readBits(4);\n        if (num >= 10) {\n            throw new Error(\"Invalid numeric value above 9\");\n        }\n        bytes.push(48 + num);\n        text += num.toString();\n    }\n    return { bytes, text };\n}\nconst AlphanumericCharacterCodes = [\n    \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\n    \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\",\n    \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\",\n    \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\",\n    \" \", \"$\", \"%\", \"*\", \"+\", \"-\", \".\", \"/\", \":\",\n];\nfunction decodeAlphanumeric(stream, size) {\n    const bytes = [];\n    let text = \"\";\n    const characterCountSize = [9, 11, 13][size];\n    let length = stream.readBits(characterCountSize);\n    while (length >= 2) {\n        const v = stream.readBits(11);\n        const a = Math.floor(v / 45);\n        const b = v % 45;\n        bytes.push(AlphanumericCharacterCodes[a].charCodeAt(0), AlphanumericCharacterCodes[b].charCodeAt(0));\n        text += AlphanumericCharacterCodes[a] + AlphanumericCharacterCodes[b];\n        length -= 2;\n    }\n    if (length === 1) {\n        const a = stream.readBits(6);\n        bytes.push(AlphanumericCharacterCodes[a].charCodeAt(0));\n        text += AlphanumericCharacterCodes[a];\n    }\n    return { bytes, text };\n}\nfunction decodeByte(stream, size) {\n    const bytes = [];\n    let text = \"\";\n    const characterCountSize = [8, 16, 16][size];\n    const length = stream.readBits(characterCountSize);\n    for (let i = 0; i < length; i++) {\n        const b = stream.readBits(8);\n        bytes.push(b);\n    }\n    try {\n        text += decodeURIComponent(bytes.map(b => `%${(\"0\" + b.toString(16)).substr(-2)}`).join(\"\"));\n    }\n    catch (_a) {\n        // failed to decode\n    }\n    return { bytes, text };\n}\nfunction decodeKanji(stream, size) {\n    const bytes = [];\n    const characterCountSize = [8, 10, 12][size];\n    const length = stream.readBits(characterCountSize);\n    for (let i = 0; i < length; i++) {\n        const k = stream.readBits(13);\n        let c = (Math.floor(k / 0xC0) << 8) | (k % 0xC0);\n        if (c < 0x1F00) {\n            c += 0x8140;\n        }\n        else {\n            c += 0xC140;\n        }\n        bytes.push(c >> 8, c & 0xFF);\n    }\n    const text = new TextDecoder(\"shift-jis\").decode(Uint8Array.from(bytes));\n    return { bytes, text };\n}\nfunction decode(data, version) {\n    const stream = new BitStream(data);\n    // There are 3 'sizes' based on the version. 1-9 is small (0), 10-26 is medium (1) and 27-40 is large (2).\n    const size = version <= 9 ? 0 : version <= 26 ? 1 : 2;\n    const result = {\n        text: \"\",\n        bytes: [],\n        chunks: [],\n    };\n    while (stream.available() >= 4) {\n        const mode = stream.readBits(4);\n        if (mode === ModeByte.Terminator) {\n            return result;\n        }\n        else if (mode === ModeByte.ECI) {\n            if (stream.readBits(1) === 0) {\n                result.chunks.push({\n                    type: Mode.ECI,\n                    assignmentNumber: stream.readBits(7),\n                });\n            }\n            else if (stream.readBits(1) === 0) {\n                result.chunks.push({\n                    type: Mode.ECI,\n                    assignmentNumber: stream.readBits(14),\n                });\n            }\n            else if (stream.readBits(1) === 0) {\n                result.chunks.push({\n                    type: Mode.ECI,\n                    assignmentNumber: stream.readBits(21),\n                });\n            }\n            else {\n                // ECI data seems corrupted\n                result.chunks.push({\n                    type: Mode.ECI,\n                    assignmentNumber: -1,\n                });\n            }\n        }\n        else if (mode === ModeByte.Numeric) {\n            const numericResult = decodeNumeric(stream, size);\n            result.text += numericResult.text;\n            result.bytes.push(...numericResult.bytes);\n            result.chunks.push({\n                type: Mode.Numeric,\n                text: numericResult.text,\n            });\n        }\n        else if (mode === ModeByte.Alphanumeric) {\n            const alphanumericResult = decodeAlphanumeric(stream, size);\n            result.text += alphanumericResult.text;\n            result.bytes.push(...alphanumericResult.bytes);\n            result.chunks.push({\n                type: Mode.Alphanumeric,\n                text: alphanumericResult.text,\n            });\n        }\n        else if (mode === ModeByte.Byte) {\n            const byteResult = decodeByte(stream, size);\n            result.text += byteResult.text;\n            result.bytes.push(...byteResult.bytes);\n            result.chunks.push({\n                type: Mode.Byte,\n                bytes: byteResult.bytes,\n                text: byteResult.text,\n            });\n        }\n        else if (mode === ModeByte.Kanji) {\n            const kanjiResult = decodeKanji(stream, size);\n            result.text += kanjiResult.text;\n            result.bytes.push(...kanjiResult.bytes);\n            result.chunks.push({\n                type: Mode.Kanji,\n                bytes: kanjiResult.bytes,\n                text: kanjiResult.text,\n            });\n        }\n    }\n    // If there is no data left, or the remaining bits are all 0, then that counts as a termination marker\n    if (stream.available() === 0 || stream.readBits(stream.available()) === 0) {\n        return result;\n    }\n}\n\nclass GenericGFPoly {\n    constructor(field, coefficients) {\n        if (coefficients.length === 0) {\n            throw new Error(\"No coefficients.\");\n        }\n        this.field = field;\n        const coefficientsLength = coefficients.length;\n        if (coefficientsLength > 1 && coefficients[0] === 0) {\n            // Leading term must be non-zero for anything except the constant polynomial \"0\"\n            let firstNonZero = 1;\n            while (firstNonZero < coefficientsLength && coefficients[firstNonZero] === 0) {\n                firstNonZero++;\n            }\n            if (firstNonZero === coefficientsLength) {\n                this.coefficients = field.zero.coefficients;\n            }\n            else {\n                this.coefficients = new Uint8ClampedArray(coefficientsLength - firstNonZero);\n                for (let i = 0; i < this.coefficients.length; i++) {\n                    this.coefficients[i] = coefficients[firstNonZero + i];\n                }\n            }\n        }\n        else {\n            this.coefficients = coefficients;\n        }\n    }\n    degree() {\n        return this.coefficients.length - 1;\n    }\n    isZero() {\n        return this.coefficients[0] === 0;\n    }\n    getCoefficient(degree) {\n        return this.coefficients[this.coefficients.length - 1 - degree];\n    }\n    addOrSubtract(other) {\n        if (this.isZero()) {\n            return other;\n        }\n        if (other.isZero()) {\n            return this;\n        }\n        let smallerCoefficients = this.coefficients;\n        let largerCoefficients = other.coefficients;\n        if (smallerCoefficients.length > largerCoefficients.length) {\n            [smallerCoefficients, largerCoefficients] = [largerCoefficients, smallerCoefficients];\n        }\n        const sumDiff = new Uint8ClampedArray(largerCoefficients.length);\n        const lengthDiff = largerCoefficients.length - smallerCoefficients.length;\n        for (let i = 0; i < lengthDiff; i++) {\n            sumDiff[i] = largerCoefficients[i];\n        }\n        for (let i = lengthDiff; i < largerCoefficients.length; i++) {\n            sumDiff[i] = addOrSubtractGF(smallerCoefficients[i - lengthDiff], largerCoefficients[i]);\n        }\n        return new GenericGFPoly(this.field, sumDiff);\n    }\n    multiply(scalar) {\n        if (scalar === 0) {\n            return this.field.zero;\n        }\n        if (scalar === 1) {\n            return this;\n        }\n        const size = this.coefficients.length;\n        const product = new Uint8ClampedArray(size);\n        for (let i = 0; i < size; i++) {\n            product[i] = this.field.multiply(this.coefficients[i], scalar);\n        }\n        return new GenericGFPoly(this.field, product);\n    }\n    multiplyPoly(other) {\n        if (this.isZero() || other.isZero()) {\n            return this.field.zero;\n        }\n        const aCoefficients = this.coefficients;\n        const aLength = aCoefficients.length;\n        const bCoefficients = other.coefficients;\n        const bLength = bCoefficients.length;\n        const product = new Uint8ClampedArray(aLength + bLength - 1);\n        for (let i = 0; i < aLength; i++) {\n            const aCoeff = aCoefficients[i];\n            for (let j = 0; j < bLength; j++) {\n                product[i + j] = addOrSubtractGF(product[i + j], this.field.multiply(aCoeff, bCoefficients[j]));\n            }\n        }\n        return new GenericGFPoly(this.field, product);\n    }\n    multiplyByMonomial(degree, coefficient) {\n        if (degree < 0) {\n            throw new Error(\"Invalid degree less than 0\");\n        }\n        if (coefficient === 0) {\n            return this.field.zero;\n        }\n        const size = this.coefficients.length;\n        const product = new Uint8ClampedArray(size + degree);\n        for (let i = 0; i < size; i++) {\n            product[i] = this.field.multiply(this.coefficients[i], coefficient);\n        }\n        return new GenericGFPoly(this.field, product);\n    }\n    evaluateAt(a) {\n        let result = 0;\n        if (a === 0) {\n            // Just return the x^0 coefficient\n            return this.getCoefficient(0);\n        }\n        const size = this.coefficients.length;\n        if (a === 1) {\n            // Just the sum of the coefficients\n            this.coefficients.forEach((coefficient) => {\n                result = addOrSubtractGF(result, coefficient);\n            });\n            return result;\n        }\n        result = this.coefficients[0];\n        for (let i = 1; i < size; i++) {\n            result = addOrSubtractGF(this.field.multiply(a, result), this.coefficients[i]);\n        }\n        return result;\n    }\n}\n\nfunction addOrSubtractGF(a, b) {\n    return a ^ b; // tslint:disable-line:no-bitwise\n}\nclass GenericGF {\n    constructor(primitive, size, genBase) {\n        this.primitive = primitive;\n        this.size = size;\n        this.generatorBase = genBase;\n        this.expTable = new Array(this.size);\n        this.logTable = new Array(this.size);\n        let x = 1;\n        for (let i = 0; i < this.size; i++) {\n            this.expTable[i] = x;\n            x = x * 2;\n            if (x >= this.size) {\n                x = (x ^ this.primitive) & (this.size - 1); // tslint:disable-line:no-bitwise\n            }\n        }\n        for (let i = 0; i < this.size - 1; i++) {\n            this.logTable[this.expTable[i]] = i;\n        }\n        this.zero = new GenericGFPoly(this, Uint8ClampedArray.from([0]));\n        this.one = new GenericGFPoly(this, Uint8ClampedArray.from([1]));\n    }\n    multiply(a, b) {\n        if (a === 0 || b === 0) {\n            return 0;\n        }\n        return this.expTable[(this.logTable[a] + this.logTable[b]) % (this.size - 1)];\n    }\n    inverse(a) {\n        if (a === 0) {\n            throw new Error(\"Can't invert 0\");\n        }\n        return this.expTable[this.size - this.logTable[a] - 1];\n    }\n    buildMonomial(degree, coefficient) {\n        if (degree < 0) {\n            throw new Error(\"Invalid monomial degree less than 0\");\n        }\n        if (coefficient === 0) {\n            return this.zero;\n        }\n        const coefficients = new Uint8ClampedArray(degree + 1);\n        coefficients[0] = coefficient;\n        return new GenericGFPoly(this, coefficients);\n    }\n    log(a) {\n        if (a === 0) {\n            throw new Error(\"Can't take log(0)\");\n        }\n        return this.logTable[a];\n    }\n    exp(a) {\n        return this.expTable[a];\n    }\n}\n\nfunction runEuclideanAlgorithm(field, a, b, R) {\n    // Assume a's degree is >= b's\n    if (a.degree() < b.degree()) {\n        [a, b] = [b, a];\n    }\n    let rLast = a;\n    let r = b;\n    let tLast = field.zero;\n    let t = field.one;\n    // Run Euclidean algorithm until r's degree is less than R/2\n    while (r.degree() >= R / 2) {\n        const rLastLast = rLast;\n        const tLastLast = tLast;\n        rLast = r;\n        tLast = t;\n        // Divide rLastLast by rLast, with quotient in q and remainder in r\n        if (rLast.isZero()) {\n            // Euclidean algorithm already terminated?\n            return null;\n        }\n        r = rLastLast;\n        let q = field.zero;\n        const denominatorLeadingTerm = rLast.getCoefficient(rLast.degree());\n        const dltInverse = field.inverse(denominatorLeadingTerm);\n        while (r.degree() >= rLast.degree() && !r.isZero()) {\n            const degreeDiff = r.degree() - rLast.degree();\n            const scale = field.multiply(r.getCoefficient(r.degree()), dltInverse);\n            q = q.addOrSubtract(field.buildMonomial(degreeDiff, scale));\n            r = r.addOrSubtract(rLast.multiplyByMonomial(degreeDiff, scale));\n        }\n        t = q.multiplyPoly(tLast).addOrSubtract(tLastLast);\n        if (r.degree() >= rLast.degree()) {\n            return null;\n        }\n    }\n    const sigmaTildeAtZero = t.getCoefficient(0);\n    if (sigmaTildeAtZero === 0) {\n        return null;\n    }\n    const inverse = field.inverse(sigmaTildeAtZero);\n    return [t.multiply(inverse), r.multiply(inverse)];\n}\nfunction findErrorLocations(field, errorLocator) {\n    // This is a direct application of Chien's search\n    const numErrors = errorLocator.degree();\n    if (numErrors === 1) {\n        return [errorLocator.getCoefficient(1)];\n    }\n    const result = new Array(numErrors);\n    let errorCount = 0;\n    for (let i = 1; i < field.size && errorCount < numErrors; i++) {\n        if (errorLocator.evaluateAt(i) === 0) {\n            result[errorCount] = field.inverse(i);\n            errorCount++;\n        }\n    }\n    if (errorCount !== numErrors) {\n        return null;\n    }\n    return result;\n}\nfunction findErrorMagnitudes(field, errorEvaluator, errorLocations) {\n    // This is directly applying Forney's Formula\n    const s = errorLocations.length;\n    const result = new Array(s);\n    for (let i = 0; i < s; i++) {\n        const xiInverse = field.inverse(errorLocations[i]);\n        let denominator = 1;\n        for (let j = 0; j < s; j++) {\n            if (i !== j) {\n                denominator = field.multiply(denominator, addOrSubtractGF(1, field.multiply(errorLocations[j], xiInverse)));\n            }\n        }\n        result[i] = field.multiply(errorEvaluator.evaluateAt(xiInverse), field.inverse(denominator));\n        if (field.generatorBase !== 0) {\n            result[i] = field.multiply(result[i], xiInverse);\n        }\n    }\n    return result;\n}\nfunction decode$1(bytes, twoS) {\n    const outputBytes = new Uint8ClampedArray(bytes.length);\n    outputBytes.set(bytes);\n    const field = new GenericGF(0x011D, 256, 0); // x^8 + x^4 + x^3 + x^2 + 1\n    const poly = new GenericGFPoly(field, outputBytes);\n    const syndromeCoefficients = new Uint8ClampedArray(twoS);\n    let error = false;\n    for (let s = 0; s < twoS; s++) {\n        const evaluation = poly.evaluateAt(field.exp(s + field.generatorBase));\n        syndromeCoefficients[syndromeCoefficients.length - 1 - s] = evaluation;\n        if (evaluation !== 0) {\n            error = true;\n        }\n    }\n    if (!error) {\n        return outputBytes;\n    }\n    const syndrome = new GenericGFPoly(field, syndromeCoefficients);\n    const sigmaOmega = runEuclideanAlgorithm(field, field.buildMonomial(twoS, 1), syndrome, twoS);\n    if (sigmaOmega === null) {\n        return null;\n    }\n    const errorLocations = findErrorLocations(field, sigmaOmega[0]);\n    if (errorLocations == null) {\n        return null;\n    }\n    const errorMagnitudes = findErrorMagnitudes(field, sigmaOmega[1], errorLocations);\n    for (let i = 0; i < errorLocations.length; i++) {\n        const position = outputBytes.length - 1 - field.log(errorLocations[i]);\n        if (position < 0) {\n            return null;\n        }\n        outputBytes[position] = addOrSubtractGF(outputBytes[position], errorMagnitudes[i]);\n    }\n    return outputBytes;\n}\n\nconst VERSIONS = [\n    {\n        infoBits: null,\n        versionNumber: 1,\n        alignmentPatternCenters: [],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 7,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 19 }],\n            },\n            {\n                ecCodewordsPerBlock: 10,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 16 }],\n            },\n            {\n                ecCodewordsPerBlock: 13,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 13 }],\n            },\n            {\n                ecCodewordsPerBlock: 17,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 9 }],\n            },\n        ],\n    },\n    {\n        infoBits: null,\n        versionNumber: 2,\n        alignmentPatternCenters: [6, 18],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 10,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 34 }],\n            },\n            {\n                ecCodewordsPerBlock: 16,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 28 }],\n            },\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 22 }],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 16 }],\n            },\n        ],\n    },\n    {\n        infoBits: null,\n        versionNumber: 3,\n        alignmentPatternCenters: [6, 22],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 15,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 55 }],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 44 }],\n            },\n            {\n                ecCodewordsPerBlock: 18,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 17 }],\n            },\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 13 }],\n            },\n        ],\n    },\n    {\n        infoBits: null,\n        versionNumber: 4,\n        alignmentPatternCenters: [6, 26],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 20,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 80 }],\n            },\n            {\n                ecCodewordsPerBlock: 18,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 32 }],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 24 }],\n            },\n            {\n                ecCodewordsPerBlock: 16,\n                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 9 }],\n            },\n        ],\n    },\n    {\n        infoBits: null,\n        versionNumber: 5,\n        alignmentPatternCenters: [6, 30],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 108 }],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 43 }],\n            },\n            {\n                ecCodewordsPerBlock: 18,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 16 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 11 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 12 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: null,\n        versionNumber: 6,\n        alignmentPatternCenters: [6, 34],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 18,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 68 }],\n            },\n            {\n                ecCodewordsPerBlock: 16,\n                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 27 }],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 19 }],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 15 }],\n            },\n        ],\n    },\n    {\n        infoBits: 0x07C94,\n        versionNumber: 7,\n        alignmentPatternCenters: [6, 22, 38],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 20,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 78 }],\n            },\n            {\n                ecCodewordsPerBlock: 18,\n                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 31 }],\n            },\n            {\n                ecCodewordsPerBlock: 18,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 14 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 15 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 13 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 14 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x085BC,\n        versionNumber: 8,\n        alignmentPatternCenters: [6, 24, 42],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 97 }],\n            },\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 38 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 39 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 18 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 19 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 14 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 15 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x09A99,\n        versionNumber: 9,\n        alignmentPatternCenters: [6, 26, 46],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 116 }],\n            },\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 36 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 37 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 20,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 16 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 17 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 12 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 13 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x0A4D3,\n        versionNumber: 10,\n        alignmentPatternCenters: [6, 28, 50],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 18,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 68 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 69 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 43 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 44 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 6, dataCodewordsPerBlock: 19 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 20 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 6, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x0BBF6,\n        versionNumber: 11,\n        alignmentPatternCenters: [6, 30, 54],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 20,\n                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 81 }],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 1, dataCodewordsPerBlock: 50 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 51 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 22 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 23 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 12 },\n                    { numBlocks: 8, dataCodewordsPerBlock: 13 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x0C762,\n        versionNumber: 12,\n        alignmentPatternCenters: [6, 32, 58],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 92 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 93 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                    { numBlocks: 6, dataCodewordsPerBlock: 36 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 37 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 20 },\n                    { numBlocks: 6, dataCodewordsPerBlock: 21 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 7, dataCodewordsPerBlock: 14 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 15 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x0D847,\n        versionNumber: 13,\n        alignmentPatternCenters: [6, 34, 62],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 107 }],\n            },\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                    { numBlocks: 8, dataCodewordsPerBlock: 37 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 38 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 8, dataCodewordsPerBlock: 20 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 21 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                    { numBlocks: 12, dataCodewordsPerBlock: 11 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 12 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x0E60D,\n        versionNumber: 14,\n        alignmentPatternCenters: [6, 26, 46, 66],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 115 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 116 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 40 },\n                    { numBlocks: 5, dataCodewordsPerBlock: 41 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 20,\n                ecBlocks: [\n                    { numBlocks: 11, dataCodewordsPerBlock: 16 },\n                    { numBlocks: 5, dataCodewordsPerBlock: 17 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 11, dataCodewordsPerBlock: 12 },\n                    { numBlocks: 5, dataCodewordsPerBlock: 13 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x0F928,\n        versionNumber: 15,\n        alignmentPatternCenters: [6, 26, 48, 70],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                    { numBlocks: 5, dataCodewordsPerBlock: 87 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 88 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 5, dataCodewordsPerBlock: 41 },\n                    { numBlocks: 5, dataCodewordsPerBlock: 42 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 5, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 7, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 11, dataCodewordsPerBlock: 12 },\n                    { numBlocks: 7, dataCodewordsPerBlock: 13 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x10B78,\n        versionNumber: 16,\n        alignmentPatternCenters: [6, 26, 50, 74],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 5, dataCodewordsPerBlock: 98 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 99 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 7, dataCodewordsPerBlock: 45 },\n                    { numBlocks: 3, dataCodewordsPerBlock: 46 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 15, dataCodewordsPerBlock: 19 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 20 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 13, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x1145D,\n        versionNumber: 17,\n        alignmentPatternCenters: [6, 30, 54, 78],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 1, dataCodewordsPerBlock: 107 },\n                    { numBlocks: 5, dataCodewordsPerBlock: 108 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 10, dataCodewordsPerBlock: 46 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 47 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 1, dataCodewordsPerBlock: 22 },\n                    { numBlocks: 15, dataCodewordsPerBlock: 23 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 14 },\n                    { numBlocks: 17, dataCodewordsPerBlock: 15 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x12A17,\n        versionNumber: 18,\n        alignmentPatternCenters: [6, 30, 56, 82],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 5, dataCodewordsPerBlock: 120 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 121 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 9, dataCodewordsPerBlock: 43 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 44 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 17, dataCodewordsPerBlock: 22 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 23 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 14 },\n                    { numBlocks: 19, dataCodewordsPerBlock: 15 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x13532,\n        versionNumber: 19,\n        alignmentPatternCenters: [6, 30, 58, 86],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 113 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 114 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 44 },\n                    { numBlocks: 11, dataCodewordsPerBlock: 45 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 17, dataCodewordsPerBlock: 21 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 22 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 9, dataCodewordsPerBlock: 13 },\n                    { numBlocks: 16, dataCodewordsPerBlock: 14 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x149A6,\n        versionNumber: 20,\n        alignmentPatternCenters: [6, 34, 62, 90],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 107 },\n                    { numBlocks: 5, dataCodewordsPerBlock: 108 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 41 },\n                    { numBlocks: 13, dataCodewordsPerBlock: 42 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 15, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 5, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 15, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 10, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x15683,\n        versionNumber: 21,\n        alignmentPatternCenters: [6, 28, 50, 72, 94],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 116 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 117 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [{ numBlocks: 17, dataCodewordsPerBlock: 42 }],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 17, dataCodewordsPerBlock: 22 },\n                    { numBlocks: 6, dataCodewordsPerBlock: 23 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 19, dataCodewordsPerBlock: 16 },\n                    { numBlocks: 6, dataCodewordsPerBlock: 17 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x168C9,\n        versionNumber: 22,\n        alignmentPatternCenters: [6, 26, 50, 74, 98],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 111 },\n                    { numBlocks: 7, dataCodewordsPerBlock: 112 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [{ numBlocks: 17, dataCodewordsPerBlock: 46 }],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 7, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 16, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [{ numBlocks: 34, dataCodewordsPerBlock: 13 }],\n            },\n        ],\n    },\n    {\n        infoBits: 0x177EC,\n        versionNumber: 23,\n        alignmentPatternCenters: [6, 30, 54, 74, 102],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 121 },\n                    { numBlocks: 5, dataCodewordsPerBlock: 122 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 47 },\n                    { numBlocks: 14, dataCodewordsPerBlock: 48 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 11, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 14, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 16, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 14, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x18EC4,\n        versionNumber: 24,\n        alignmentPatternCenters: [6, 28, 54, 80, 106],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 6, dataCodewordsPerBlock: 117 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 118 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 6, dataCodewordsPerBlock: 45 },\n                    { numBlocks: 14, dataCodewordsPerBlock: 46 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 11, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 16, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 30, dataCodewordsPerBlock: 16 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 17 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x191E1,\n        versionNumber: 25,\n        alignmentPatternCenters: [6, 32, 58, 84, 110],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 8, dataCodewordsPerBlock: 106 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 107 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 8, dataCodewordsPerBlock: 47 },\n                    { numBlocks: 13, dataCodewordsPerBlock: 48 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 7, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 22, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 22, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 13, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x1AFAB,\n        versionNumber: 26,\n        alignmentPatternCenters: [6, 30, 58, 86, 114],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 10, dataCodewordsPerBlock: 114 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 115 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 19, dataCodewordsPerBlock: 46 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 47 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 28, dataCodewordsPerBlock: 22 },\n                    { numBlocks: 6, dataCodewordsPerBlock: 23 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 33, dataCodewordsPerBlock: 16 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 17 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x1B08E,\n        versionNumber: 27,\n        alignmentPatternCenters: [6, 34, 62, 90, 118],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 8, dataCodewordsPerBlock: 122 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 123 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 22, dataCodewordsPerBlock: 45 },\n                    { numBlocks: 3, dataCodewordsPerBlock: 46 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 8, dataCodewordsPerBlock: 23 },\n                    { numBlocks: 26, dataCodewordsPerBlock: 24 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 12, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 28, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x1CC1A,\n        versionNumber: 28,\n        alignmentPatternCenters: [6, 26, 50, 74, 98, 122],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 117 },\n                    { numBlocks: 10, dataCodewordsPerBlock: 118 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 45 },\n                    { numBlocks: 23, dataCodewordsPerBlock: 46 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 31, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 11, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 31, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x1D33F,\n        versionNumber: 29,\n        alignmentPatternCenters: [6, 30, 54, 78, 102, 126],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 7, dataCodewordsPerBlock: 116 },\n                    { numBlocks: 7, dataCodewordsPerBlock: 117 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 21, dataCodewordsPerBlock: 45 },\n                    { numBlocks: 7, dataCodewordsPerBlock: 46 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 1, dataCodewordsPerBlock: 23 },\n                    { numBlocks: 37, dataCodewordsPerBlock: 24 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 19, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 26, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x1ED75,\n        versionNumber: 30,\n        alignmentPatternCenters: [6, 26, 52, 78, 104, 130],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 5, dataCodewordsPerBlock: 115 },\n                    { numBlocks: 10, dataCodewordsPerBlock: 116 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 19, dataCodewordsPerBlock: 47 },\n                    { numBlocks: 10, dataCodewordsPerBlock: 48 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 15, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 25, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 23, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 25, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x1F250,\n        versionNumber: 31,\n        alignmentPatternCenters: [6, 30, 56, 82, 108, 134],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 13, dataCodewordsPerBlock: 115 },\n                    { numBlocks: 3, dataCodewordsPerBlock: 116 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 46 },\n                    { numBlocks: 29, dataCodewordsPerBlock: 47 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 42, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 23, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 28, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x209D5,\n        versionNumber: 32,\n        alignmentPatternCenters: [6, 34, 60, 86, 112, 138],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [{ numBlocks: 17, dataCodewordsPerBlock: 115 }],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 10, dataCodewordsPerBlock: 46 },\n                    { numBlocks: 23, dataCodewordsPerBlock: 47 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 10, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 35, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 19, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 35, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x216F0,\n        versionNumber: 33,\n        alignmentPatternCenters: [6, 30, 58, 86, 114, 142],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 17, dataCodewordsPerBlock: 115 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 116 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 14, dataCodewordsPerBlock: 46 },\n                    { numBlocks: 21, dataCodewordsPerBlock: 47 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 29, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 19, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 11, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 46, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x228BA,\n        versionNumber: 34,\n        alignmentPatternCenters: [6, 34, 62, 90, 118, 146],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 13, dataCodewordsPerBlock: 115 },\n                    { numBlocks: 6, dataCodewordsPerBlock: 116 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 14, dataCodewordsPerBlock: 46 },\n                    { numBlocks: 23, dataCodewordsPerBlock: 47 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 44, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 7, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 59, dataCodewordsPerBlock: 16 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 17 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x2379F,\n        versionNumber: 35,\n        alignmentPatternCenters: [6, 30, 54, 78, 102, 126, 150],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 12, dataCodewordsPerBlock: 121 },\n                    { numBlocks: 7, dataCodewordsPerBlock: 122 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 12, dataCodewordsPerBlock: 47 },\n                    { numBlocks: 26, dataCodewordsPerBlock: 48 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 39, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 14, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 22, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 41, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x24B0B,\n        versionNumber: 36,\n        alignmentPatternCenters: [6, 24, 50, 76, 102, 128, 154],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 6, dataCodewordsPerBlock: 121 },\n                    { numBlocks: 14, dataCodewordsPerBlock: 122 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 6, dataCodewordsPerBlock: 47 },\n                    { numBlocks: 34, dataCodewordsPerBlock: 48 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 46, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 10, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 64, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x2542E,\n        versionNumber: 37,\n        alignmentPatternCenters: [6, 28, 54, 80, 106, 132, 158],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 17, dataCodewordsPerBlock: 122 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 123 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 29, dataCodewordsPerBlock: 46 },\n                    { numBlocks: 14, dataCodewordsPerBlock: 47 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 49, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 10, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 24, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 46, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x26A64,\n        versionNumber: 38,\n        alignmentPatternCenters: [6, 32, 58, 84, 110, 136, 162],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 122 },\n                    { numBlocks: 18, dataCodewordsPerBlock: 123 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 13, dataCodewordsPerBlock: 46 },\n                    { numBlocks: 32, dataCodewordsPerBlock: 47 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 48, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 14, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 42, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 32, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x27541,\n        versionNumber: 39,\n        alignmentPatternCenters: [6, 26, 54, 82, 110, 138, 166],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 20, dataCodewordsPerBlock: 117 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 118 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 40, dataCodewordsPerBlock: 47 },\n                    { numBlocks: 7, dataCodewordsPerBlock: 48 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 43, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 22, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 10, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 67, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x28C69,\n        versionNumber: 40,\n        alignmentPatternCenters: [6, 30, 58, 86, 114, 142, 170],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 19, dataCodewordsPerBlock: 118 },\n                    { numBlocks: 6, dataCodewordsPerBlock: 119 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 18, dataCodewordsPerBlock: 47 },\n                    { numBlocks: 31, dataCodewordsPerBlock: 48 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 34, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 34, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 20, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 61, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n];\n\n// tslint:disable:no-bitwise\nfunction numBitsDiffering(x, y) {\n    let z = x ^ y;\n    let bitCount = 0;\n    while (z) {\n        bitCount++;\n        z &= z - 1;\n    }\n    return bitCount;\n}\nfunction pushBit(bit, byte) {\n    return (byte << 1) | bit;\n}\n// tslint:enable:no-bitwise\nconst FORMAT_INFO_TABLE = [\n    { bits: 0x5412, formatInfo: { errorCorrectionLevel: 1, dataMask: 0 } },\n    { bits: 0x5125, formatInfo: { errorCorrectionLevel: 1, dataMask: 1 } },\n    { bits: 0x5E7C, formatInfo: { errorCorrectionLevel: 1, dataMask: 2 } },\n    { bits: 0x5B4B, formatInfo: { errorCorrectionLevel: 1, dataMask: 3 } },\n    { bits: 0x45F9, formatInfo: { errorCorrectionLevel: 1, dataMask: 4 } },\n    { bits: 0x40CE, formatInfo: { errorCorrectionLevel: 1, dataMask: 5 } },\n    { bits: 0x4F97, formatInfo: { errorCorrectionLevel: 1, dataMask: 6 } },\n    { bits: 0x4AA0, formatInfo: { errorCorrectionLevel: 1, dataMask: 7 } },\n    { bits: 0x77C4, formatInfo: { errorCorrectionLevel: 0, dataMask: 0 } },\n    { bits: 0x72F3, formatInfo: { errorCorrectionLevel: 0, dataMask: 1 } },\n    { bits: 0x7DAA, formatInfo: { errorCorrectionLevel: 0, dataMask: 2 } },\n    { bits: 0x789D, formatInfo: { errorCorrectionLevel: 0, dataMask: 3 } },\n    { bits: 0x662F, formatInfo: { errorCorrectionLevel: 0, dataMask: 4 } },\n    { bits: 0x6318, formatInfo: { errorCorrectionLevel: 0, dataMask: 5 } },\n    { bits: 0x6C41, formatInfo: { errorCorrectionLevel: 0, dataMask: 6 } },\n    { bits: 0x6976, formatInfo: { errorCorrectionLevel: 0, dataMask: 7 } },\n    { bits: 0x1689, formatInfo: { errorCorrectionLevel: 3, dataMask: 0 } },\n    { bits: 0x13BE, formatInfo: { errorCorrectionLevel: 3, dataMask: 1 } },\n    { bits: 0x1CE7, formatInfo: { errorCorrectionLevel: 3, dataMask: 2 } },\n    { bits: 0x19D0, formatInfo: { errorCorrectionLevel: 3, dataMask: 3 } },\n    { bits: 0x0762, formatInfo: { errorCorrectionLevel: 3, dataMask: 4 } },\n    { bits: 0x0255, formatInfo: { errorCorrectionLevel: 3, dataMask: 5 } },\n    { bits: 0x0D0C, formatInfo: { errorCorrectionLevel: 3, dataMask: 6 } },\n    { bits: 0x083B, formatInfo: { errorCorrectionLevel: 3, dataMask: 7 } },\n    { bits: 0x355F, formatInfo: { errorCorrectionLevel: 2, dataMask: 0 } },\n    { bits: 0x3068, formatInfo: { errorCorrectionLevel: 2, dataMask: 1 } },\n    { bits: 0x3F31, formatInfo: { errorCorrectionLevel: 2, dataMask: 2 } },\n    { bits: 0x3A06, formatInfo: { errorCorrectionLevel: 2, dataMask: 3 } },\n    { bits: 0x24B4, formatInfo: { errorCorrectionLevel: 2, dataMask: 4 } },\n    { bits: 0x2183, formatInfo: { errorCorrectionLevel: 2, dataMask: 5 } },\n    { bits: 0x2EDA, formatInfo: { errorCorrectionLevel: 2, dataMask: 6 } },\n    { bits: 0x2BED, formatInfo: { errorCorrectionLevel: 2, dataMask: 7 } },\n];\nconst DATA_MASKS = [\n    (p) => ((p.y + p.x) % 2) === 0,\n    (p) => (p.y % 2) === 0,\n    (p) => p.x % 3 === 0,\n    (p) => (p.y + p.x) % 3 === 0,\n    (p) => (Math.floor(p.y / 2) + Math.floor(p.x / 3)) % 2 === 0,\n    (p) => ((p.x * p.y) % 2) + ((p.x * p.y) % 3) === 0,\n    (p) => ((((p.y * p.x) % 2) + (p.y * p.x) % 3) % 2) === 0,\n    (p) => ((((p.y + p.x) % 2) + (p.y * p.x) % 3) % 2) === 0,\n];\nfunction buildFunctionPatternMask(version) {\n    const dimension = 17 + 4 * version.versionNumber;\n    const matrix = BitMatrix.createEmpty(dimension, dimension);\n    matrix.setRegion(0, 0, 9, 9, true); // Top left finder pattern + separator + format\n    matrix.setRegion(dimension - 8, 0, 8, 9, true); // Top right finder pattern + separator + format\n    matrix.setRegion(0, dimension - 8, 9, 8, true); // Bottom left finder pattern + separator + format\n    // Alignment patterns\n    for (const x of version.alignmentPatternCenters) {\n        for (const y of version.alignmentPatternCenters) {\n            if (!(x === 6 && y === 6 || x === 6 && y === dimension - 7 || x === dimension - 7 && y === 6)) {\n                matrix.setRegion(x - 2, y - 2, 5, 5, true);\n            }\n        }\n    }\n    matrix.setRegion(6, 9, 1, dimension - 17, true); // Vertical timing pattern\n    matrix.setRegion(9, 6, dimension - 17, 1, true); // Horizontal timing pattern\n    if (version.versionNumber > 6) {\n        matrix.setRegion(dimension - 11, 0, 3, 6, true); // Version info, top right\n        matrix.setRegion(0, dimension - 11, 6, 3, true); // Version info, bottom left\n    }\n    return matrix;\n}\nfunction readCodewords(matrix, version, formatInfo) {\n    const dataMask = DATA_MASKS[formatInfo.dataMask];\n    const dimension = matrix.height;\n    const functionPatternMask = buildFunctionPatternMask(version);\n    const codewords = [];\n    let currentByte = 0;\n    let bitsRead = 0;\n    // Read columns in pairs, from right to left\n    let readingUp = true;\n    for (let columnIndex = dimension - 1; columnIndex > 0; columnIndex -= 2) {\n        if (columnIndex === 6) { // Skip whole column with vertical alignment pattern;\n            columnIndex--;\n        }\n        for (let i = 0; i < dimension; i++) {\n            const y = readingUp ? dimension - 1 - i : i;\n            for (let columnOffset = 0; columnOffset < 2; columnOffset++) {\n                const x = columnIndex - columnOffset;\n                if (!functionPatternMask.get(x, y)) {\n                    bitsRead++;\n                    let bit = matrix.get(x, y);\n                    if (dataMask({ y, x })) {\n                        bit = !bit;\n                    }\n                    currentByte = pushBit(bit, currentByte);\n                    if (bitsRead === 8) { // Whole bytes\n                        codewords.push(currentByte);\n                        bitsRead = 0;\n                        currentByte = 0;\n                    }\n                }\n            }\n        }\n        readingUp = !readingUp;\n    }\n    return codewords;\n}\nfunction readVersion(matrix) {\n    const dimension = matrix.height;\n    const provisionalVersion = Math.floor((dimension - 17) / 4);\n    if (provisionalVersion <= 6) { // 6 and under dont have version info in the QR code\n        return VERSIONS[provisionalVersion - 1];\n    }\n    let topRightVersionBits = 0;\n    for (let y = 5; y >= 0; y--) {\n        for (let x = dimension - 9; x >= dimension - 11; x--) {\n            topRightVersionBits = pushBit(matrix.get(x, y), topRightVersionBits);\n        }\n    }\n    let bottomLeftVersionBits = 0;\n    for (let x = 5; x >= 0; x--) {\n        for (let y = dimension - 9; y >= dimension - 11; y--) {\n            bottomLeftVersionBits = pushBit(matrix.get(x, y), bottomLeftVersionBits);\n        }\n    }\n    let bestDifference = Infinity;\n    let bestVersion;\n    for (const version of VERSIONS) {\n        if (version.infoBits === topRightVersionBits || version.infoBits === bottomLeftVersionBits) {\n            return version;\n        }\n        let difference = numBitsDiffering(topRightVersionBits, version.infoBits);\n        if (difference < bestDifference) {\n            bestVersion = version;\n            bestDifference = difference;\n        }\n        difference = numBitsDiffering(bottomLeftVersionBits, version.infoBits);\n        if (difference < bestDifference) {\n            bestVersion = version;\n            bestDifference = difference;\n        }\n    }\n    // We can tolerate up to 3 bits of error since no two version info codewords will\n    // differ in less than 8 bits.\n    if (bestDifference <= 3) {\n        return bestVersion;\n    }\n}\nfunction readFormatInformation(matrix) {\n    let topLeftFormatInfoBits = 0;\n    for (let x = 0; x <= 8; x++) {\n        if (x !== 6) { // Skip timing pattern bit\n            topLeftFormatInfoBits = pushBit(matrix.get(x, 8), topLeftFormatInfoBits);\n        }\n    }\n    for (let y = 7; y >= 0; y--) {\n        if (y !== 6) { // Skip timing pattern bit\n            topLeftFormatInfoBits = pushBit(matrix.get(8, y), topLeftFormatInfoBits);\n        }\n    }\n    const dimension = matrix.height;\n    let topRightBottomRightFormatInfoBits = 0;\n    for (let y = dimension - 1; y >= dimension - 7; y--) { // bottom left\n        topRightBottomRightFormatInfoBits = pushBit(matrix.get(8, y), topRightBottomRightFormatInfoBits);\n    }\n    for (let x = dimension - 8; x < dimension; x++) { // top right\n        topRightBottomRightFormatInfoBits = pushBit(matrix.get(x, 8), topRightBottomRightFormatInfoBits);\n    }\n    let bestDifference = Infinity;\n    let bestFormatInfo = null;\n    for (const { bits, formatInfo } of FORMAT_INFO_TABLE) {\n        if (bits === topLeftFormatInfoBits || bits === topRightBottomRightFormatInfoBits) {\n            return formatInfo;\n        }\n        let difference = numBitsDiffering(topLeftFormatInfoBits, bits);\n        if (difference < bestDifference) {\n            bestFormatInfo = formatInfo;\n            bestDifference = difference;\n        }\n        if (topLeftFormatInfoBits !== topRightBottomRightFormatInfoBits) { // also try the other option\n            difference = numBitsDiffering(topRightBottomRightFormatInfoBits, bits);\n            if (difference < bestDifference) {\n                bestFormatInfo = formatInfo;\n                bestDifference = difference;\n            }\n        }\n    }\n    // Hamming distance of the 32 masked codes is 7, by construction, so <= 3 bits differing means we found a match\n    if (bestDifference <= 3) {\n        return bestFormatInfo;\n    }\n    return null;\n}\nfunction getDataBlocks(codewords, version, ecLevel) {\n    const ecInfo = version.errorCorrectionLevels[ecLevel];\n    const dataBlocks = [];\n    let totalCodewords = 0;\n    ecInfo.ecBlocks.forEach(block => {\n        for (let i = 0; i < block.numBlocks; i++) {\n            dataBlocks.push({ numDataCodewords: block.dataCodewordsPerBlock, codewords: [] });\n            totalCodewords += block.dataCodewordsPerBlock + ecInfo.ecCodewordsPerBlock;\n        }\n    });\n    // In some cases the QR code will be malformed enough that we pull off more or less than we should.\n    // If we pull off less there's nothing we can do.\n    // If we pull off more we can safely truncate\n    if (codewords.length < totalCodewords) {\n        return null;\n    }\n    codewords = codewords.slice(0, totalCodewords);\n    const shortBlockSize = ecInfo.ecBlocks[0].dataCodewordsPerBlock;\n    // Pull codewords to fill the blocks up to the minimum size\n    for (let i = 0; i < shortBlockSize; i++) {\n        for (const dataBlock of dataBlocks) {\n            dataBlock.codewords.push(codewords.shift());\n        }\n    }\n    // If there are any large blocks, pull codewords to fill the last element of those\n    if (ecInfo.ecBlocks.length > 1) {\n        const smallBlockCount = ecInfo.ecBlocks[0].numBlocks;\n        const largeBlockCount = ecInfo.ecBlocks[1].numBlocks;\n        for (let i = 0; i < largeBlockCount; i++) {\n            dataBlocks[smallBlockCount + i].codewords.push(codewords.shift());\n        }\n    }\n    // Add the rest of the codewords to the blocks. These are the error correction codewords.\n    while (codewords.length > 0) {\n        for (const dataBlock of dataBlocks) {\n            dataBlock.codewords.push(codewords.shift());\n        }\n    }\n    return dataBlocks;\n}\nfunction decodeMatrix(matrix) {\n    const version = readVersion(matrix);\n    if (!version) {\n        return null;\n    }\n    const formatInfo = readFormatInformation(matrix);\n    if (!formatInfo) {\n        return null;\n    }\n    const codewords = readCodewords(matrix, version, formatInfo);\n    const dataBlocks = getDataBlocks(codewords, version, formatInfo.errorCorrectionLevel);\n    if (!dataBlocks) {\n        return null;\n    }\n    // Count total number of data bytes\n    const totalBytes = dataBlocks.reduce((a, b) => a + b.numDataCodewords, 0);\n    const resultBytes = new Uint8ClampedArray(totalBytes);\n    let resultIndex = 0;\n    for (const dataBlock of dataBlocks) {\n        const correctedBytes = decode$1(dataBlock.codewords, dataBlock.codewords.length - dataBlock.numDataCodewords);\n        if (!correctedBytes) {\n            return null;\n        }\n        for (let i = 0; i < dataBlock.numDataCodewords; i++) {\n            resultBytes[resultIndex++] = correctedBytes[i];\n        }\n    }\n    try {\n        return decode(resultBytes, version.versionNumber);\n    }\n    catch (_a) {\n        return null;\n    }\n}\nfunction decode$2(matrix) {\n    if (matrix == null) {\n        return null;\n    }\n    const result = decodeMatrix(matrix);\n    if (result) {\n        return result;\n    }\n    // Decoding didn't work, try mirroring the QR across the topLeft -> bottomRight line.\n    for (let x = 0; x < matrix.width; x++) {\n        for (let y = x + 1; y < matrix.height; y++) {\n            if (matrix.get(x, y) !== matrix.get(y, x)) {\n                matrix.set(x, y, !matrix.get(x, y));\n                matrix.set(y, x, !matrix.get(y, x));\n            }\n        }\n    }\n    return decodeMatrix(matrix);\n}\n\nfunction squareToQuadrilateral(p1, p2, p3, p4) {\n    const dx3 = p1.x - p2.x + p3.x - p4.x;\n    const dy3 = p1.y - p2.y + p3.y - p4.y;\n    if (dx3 === 0 && dy3 === 0) { // Affine\n        return {\n            a11: p2.x - p1.x,\n            a12: p2.y - p1.y,\n            a13: 0,\n            a21: p3.x - p2.x,\n            a22: p3.y - p2.y,\n            a23: 0,\n            a31: p1.x,\n            a32: p1.y,\n            a33: 1,\n        };\n    }\n    else {\n        const dx1 = p2.x - p3.x;\n        const dx2 = p4.x - p3.x;\n        const dy1 = p2.y - p3.y;\n        const dy2 = p4.y - p3.y;\n        const denominator = dx1 * dy2 - dx2 * dy1;\n        const a13 = (dx3 * dy2 - dx2 * dy3) / denominator;\n        const a23 = (dx1 * dy3 - dx3 * dy1) / denominator;\n        return {\n            a11: p2.x - p1.x + a13 * p2.x,\n            a12: p2.y - p1.y + a13 * p2.y,\n            a13,\n            a21: p4.x - p1.x + a23 * p4.x,\n            a22: p4.y - p1.y + a23 * p4.y,\n            a23,\n            a31: p1.x,\n            a32: p1.y,\n            a33: 1,\n        };\n    }\n}\nfunction quadrilateralToSquare(p1, p2, p3, p4) {\n    // Here, the adjoint serves as the inverse:\n    const sToQ = squareToQuadrilateral(p1, p2, p3, p4);\n    return {\n        a11: sToQ.a22 * sToQ.a33 - sToQ.a23 * sToQ.a32,\n        a12: sToQ.a13 * sToQ.a32 - sToQ.a12 * sToQ.a33,\n        a13: sToQ.a12 * sToQ.a23 - sToQ.a13 * sToQ.a22,\n        a21: sToQ.a23 * sToQ.a31 - sToQ.a21 * sToQ.a33,\n        a22: sToQ.a11 * sToQ.a33 - sToQ.a13 * sToQ.a31,\n        a23: sToQ.a13 * sToQ.a21 - sToQ.a11 * sToQ.a23,\n        a31: sToQ.a21 * sToQ.a32 - sToQ.a22 * sToQ.a31,\n        a32: sToQ.a12 * sToQ.a31 - sToQ.a11 * sToQ.a32,\n        a33: sToQ.a11 * sToQ.a22 - sToQ.a12 * sToQ.a21,\n    };\n}\nfunction times(a, b) {\n    return {\n        a11: a.a11 * b.a11 + a.a21 * b.a12 + a.a31 * b.a13,\n        a12: a.a12 * b.a11 + a.a22 * b.a12 + a.a32 * b.a13,\n        a13: a.a13 * b.a11 + a.a23 * b.a12 + a.a33 * b.a13,\n        a21: a.a11 * b.a21 + a.a21 * b.a22 + a.a31 * b.a23,\n        a22: a.a12 * b.a21 + a.a22 * b.a22 + a.a32 * b.a23,\n        a23: a.a13 * b.a21 + a.a23 * b.a22 + a.a33 * b.a23,\n        a31: a.a11 * b.a31 + a.a21 * b.a32 + a.a31 * b.a33,\n        a32: a.a12 * b.a31 + a.a22 * b.a32 + a.a32 * b.a33,\n        a33: a.a13 * b.a31 + a.a23 * b.a32 + a.a33 * b.a33,\n    };\n}\nfunction extract(image, location) {\n    const qToS = quadrilateralToSquare({ x: 3.5, y: 3.5 }, { x: location.dimension - 3.5, y: 3.5 }, { x: location.dimension - 6.5, y: location.dimension - 6.5 }, { x: 3.5, y: location.dimension - 3.5 });\n    const sToQ = squareToQuadrilateral(location.topLeft, location.topRight, location.alignmentPattern, location.bottomLeft);\n    const transform = times(sToQ, qToS);\n    const matrix = BitMatrix.createEmpty(location.dimension, location.dimension);\n    const mappingFunction = (x, y) => {\n        const denominator = transform.a13 * x + transform.a23 * y + transform.a33;\n        return {\n            x: (transform.a11 * x + transform.a21 * y + transform.a31) / denominator,\n            y: (transform.a12 * x + transform.a22 * y + transform.a32) / denominator,\n        };\n    };\n    for (let y = 0; y < location.dimension; y++) {\n        for (let x = 0; x < location.dimension; x++) {\n            const xValue = x + 0.5;\n            const yValue = y + 0.5;\n            const sourcePixel = mappingFunction(xValue, yValue);\n            matrix.set(x, y, image.get(Math.floor(sourcePixel.x), Math.floor(sourcePixel.y)));\n        }\n    }\n    return {\n        matrix,\n        mappingFunction,\n    };\n}\n\nconst MAX_FINDERPATTERNS_TO_SEARCH = 4;\nconst MIN_QUAD_RATIO = 0.5;\nconst MAX_QUAD_RATIO = 1.5;\nconst distance = (a, b) => Math.sqrt(Math.pow((b.x - a.x), 2) + Math.pow((b.y - a.y), 2));\nfunction sum(values) {\n    return values.reduce((a, b) => a + b);\n}\n// Takes three finder patterns and organizes them into topLeft, topRight, etc\nfunction reorderFinderPatterns(pattern1, pattern2, pattern3) {\n    // Find distances between pattern centers\n    const oneTwoDistance = distance(pattern1, pattern2);\n    const twoThreeDistance = distance(pattern2, pattern3);\n    const oneThreeDistance = distance(pattern1, pattern3);\n    let bottomLeft;\n    let topLeft;\n    let topRight;\n    // Assume one closest to other two is B; A and C will just be guesses at first\n    if (twoThreeDistance >= oneTwoDistance && twoThreeDistance >= oneThreeDistance) {\n        [bottomLeft, topLeft, topRight] = [pattern2, pattern1, pattern3];\n    }\n    else if (oneThreeDistance >= twoThreeDistance && oneThreeDistance >= oneTwoDistance) {\n        [bottomLeft, topLeft, topRight] = [pattern1, pattern2, pattern3];\n    }\n    else {\n        [bottomLeft, topLeft, topRight] = [pattern1, pattern3, pattern2];\n    }\n    // Use cross product to figure out whether bottomLeft (A) and topRight (C) are correct or flipped in relation to topLeft (B)\n    // This asks whether BC x BA has a positive z component, which is the arrangement we want. If it's negative, then\n    // we've got it flipped around and should swap topRight and bottomLeft.\n    if (((topRight.x - topLeft.x) * (bottomLeft.y - topLeft.y)) - ((topRight.y - topLeft.y) * (bottomLeft.x - topLeft.x)) < 0) {\n        [bottomLeft, topRight] = [topRight, bottomLeft];\n    }\n    return { bottomLeft, topLeft, topRight };\n}\n// Computes the dimension (number of modules on a side) of the QR Code based on the position of the finder patterns\nfunction computeDimension(topLeft, topRight, bottomLeft, matrix) {\n    const moduleSize = (sum(countBlackWhiteRun(topLeft, bottomLeft, matrix, 5)) / 7 + // Divide by 7 since the ratio is 1:1:3:1:1\n        sum(countBlackWhiteRun(topLeft, topRight, matrix, 5)) / 7 +\n        sum(countBlackWhiteRun(bottomLeft, topLeft, matrix, 5)) / 7 +\n        sum(countBlackWhiteRun(topRight, topLeft, matrix, 5)) / 7) / 4;\n    if (moduleSize < 1) {\n        throw new Error(\"Invalid module size\");\n    }\n    const topDimension = Math.round(distance(topLeft, topRight) / moduleSize);\n    const sideDimension = Math.round(distance(topLeft, bottomLeft) / moduleSize);\n    let dimension = Math.floor((topDimension + sideDimension) / 2) + 7;\n    switch (dimension % 4) {\n        case 0:\n            dimension++;\n            break;\n        case 2:\n            dimension--;\n            break;\n    }\n    return { dimension, moduleSize };\n}\n// Takes an origin point and an end point and counts the sizes of the black white run from the origin towards the end point.\n// Returns an array of elements, representing the pixel size of the black white run.\n// Uses a variant of http://en.wikipedia.org/wiki/Bresenham's_line_algorithm\nfunction countBlackWhiteRunTowardsPoint(origin, end, matrix, length) {\n    const switchPoints = [{ x: Math.floor(origin.x), y: Math.floor(origin.y) }];\n    const steep = Math.abs(end.y - origin.y) > Math.abs(end.x - origin.x);\n    let fromX;\n    let fromY;\n    let toX;\n    let toY;\n    if (steep) {\n        fromX = Math.floor(origin.y);\n        fromY = Math.floor(origin.x);\n        toX = Math.floor(end.y);\n        toY = Math.floor(end.x);\n    }\n    else {\n        fromX = Math.floor(origin.x);\n        fromY = Math.floor(origin.y);\n        toX = Math.floor(end.x);\n        toY = Math.floor(end.y);\n    }\n    const dx = Math.abs(toX - fromX);\n    const dy = Math.abs(toY - fromY);\n    let error = Math.floor(-dx / 2);\n    const xStep = fromX < toX ? 1 : -1;\n    const yStep = fromY < toY ? 1 : -1;\n    let currentPixel = true;\n    // Loop up until x == toX, but not beyond\n    for (let x = fromX, y = fromY; x !== toX + xStep; x += xStep) {\n        // Does current pixel mean we have moved white to black or vice versa?\n        // Scanning black in state 0,2 and white in state 1, so if we find the wrong\n        // color, advance to next state or end if we are in state 2 already\n        const realX = steep ? y : x;\n        const realY = steep ? x : y;\n        if (matrix.get(realX, realY) !== currentPixel) {\n            currentPixel = !currentPixel;\n            switchPoints.push({ x: realX, y: realY });\n            if (switchPoints.length === length + 1) {\n                break;\n            }\n        }\n        error += dy;\n        if (error > 0) {\n            if (y === toY) {\n                break;\n            }\n            y += yStep;\n            error -= dx;\n        }\n    }\n    const distances = [];\n    for (let i = 0; i < length; i++) {\n        if (switchPoints[i] && switchPoints[i + 1]) {\n            distances.push(distance(switchPoints[i], switchPoints[i + 1]));\n        }\n        else {\n            distances.push(0);\n        }\n    }\n    return distances;\n}\n// Takes an origin point and an end point and counts the sizes of the black white run in the origin point\n// along the line that intersects with the end point. Returns an array of elements, representing the pixel sizes\n// of the black white run. Takes a length which represents the number of switches from black to white to look for.\nfunction countBlackWhiteRun(origin, end, matrix, length) {\n    const rise = end.y - origin.y;\n    const run = end.x - origin.x;\n    const towardsEnd = countBlackWhiteRunTowardsPoint(origin, end, matrix, Math.ceil(length / 2));\n    const awayFromEnd = countBlackWhiteRunTowardsPoint(origin, { x: origin.x - run, y: origin.y - rise }, matrix, Math.ceil(length / 2));\n    const middleValue = towardsEnd.shift() + awayFromEnd.shift() - 1; // Substract one so we don't double count a pixel\n    return awayFromEnd.concat(middleValue).concat(...towardsEnd);\n}\n// Takes in a black white run and an array of expected ratios. Returns the average size of the run as well as the \"error\" -\n// that is the amount the run diverges from the expected ratio\nfunction scoreBlackWhiteRun(sequence, ratios) {\n    const averageSize = sum(sequence) / sum(ratios);\n    let error = 0;\n    ratios.forEach((ratio, i) => {\n        error += Math.pow((sequence[i] - ratio * averageSize), 2);\n    });\n    return { averageSize, error };\n}\n// Takes an X,Y point and an array of sizes and scores the point against those ratios.\n// For example for a finder pattern takes the ratio list of 1:1:3:1:1 and checks horizontal, vertical and diagonal ratios\n// against that.\nfunction scorePattern(point, ratios, matrix) {\n    try {\n        const horizontalRun = countBlackWhiteRun(point, { x: -1, y: point.y }, matrix, ratios.length);\n        const verticalRun = countBlackWhiteRun(point, { x: point.x, y: -1 }, matrix, ratios.length);\n        const topLeftPoint = {\n            x: Math.max(0, point.x - point.y) - 1,\n            y: Math.max(0, point.y - point.x) - 1,\n        };\n        const topLeftBottomRightRun = countBlackWhiteRun(point, topLeftPoint, matrix, ratios.length);\n        const bottomLeftPoint = {\n            x: Math.min(matrix.width, point.x + point.y) + 1,\n            y: Math.min(matrix.height, point.y + point.x) + 1,\n        };\n        const bottomLeftTopRightRun = countBlackWhiteRun(point, bottomLeftPoint, matrix, ratios.length);\n        const horzError = scoreBlackWhiteRun(horizontalRun, ratios);\n        const vertError = scoreBlackWhiteRun(verticalRun, ratios);\n        const diagDownError = scoreBlackWhiteRun(topLeftBottomRightRun, ratios);\n        const diagUpError = scoreBlackWhiteRun(bottomLeftTopRightRun, ratios);\n        const ratioError = Math.sqrt(horzError.error * horzError.error +\n            vertError.error * vertError.error +\n            diagDownError.error * diagDownError.error +\n            diagUpError.error * diagUpError.error);\n        const avgSize = (horzError.averageSize + vertError.averageSize + diagDownError.averageSize + diagUpError.averageSize) / 4;\n        const sizeError = (Math.pow((horzError.averageSize - avgSize), 2) +\n            Math.pow((vertError.averageSize - avgSize), 2) +\n            Math.pow((diagDownError.averageSize - avgSize), 2) +\n            Math.pow((diagUpError.averageSize - avgSize), 2)) / avgSize;\n        return ratioError + sizeError;\n    }\n    catch (_a) {\n        return Infinity;\n    }\n}\nfunction locate(matrix) {\n    const finderPatternQuads = [];\n    let activeFinderPatternQuads = [];\n    const alignmentPatternQuads = [];\n    let activeAlignmentPatternQuads = [];\n    for (let y = 0; y <= matrix.height; y++) {\n        let length = 0;\n        let lastBit = false;\n        let scans = [0, 0, 0, 0, 0];\n        for (let x = -1; x <= matrix.width; x++) {\n            const v = matrix.get(x, y);\n            if (v === lastBit) {\n                length++;\n            }\n            else {\n                scans = [scans[1], scans[2], scans[3], scans[4], length];\n                length = 1;\n                lastBit = v;\n                // Do the last 5 color changes ~ match the expected ratio for a finder pattern? 1:1:3:1:1 of b:w:b:w:b\n                const averageFinderPatternBlocksize = sum(scans) / 7;\n                const validFinderPattern = Math.abs(scans[0] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize &&\n                    Math.abs(scans[1] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize &&\n                    Math.abs(scans[2] - 3 * averageFinderPatternBlocksize) < 3 * averageFinderPatternBlocksize &&\n                    Math.abs(scans[3] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize &&\n                    Math.abs(scans[4] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize &&\n                    !v; // And make sure the current pixel is white since finder patterns are bordered in white\n                // Do the last 3 color changes ~ match the expected ratio for an alignment pattern? 1:1:1 of w:b:w\n                const averageAlignmentPatternBlocksize = sum(scans.slice(-3)) / 3;\n                const validAlignmentPattern = Math.abs(scans[2] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize &&\n                    Math.abs(scans[3] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize &&\n                    Math.abs(scans[4] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize &&\n                    v; // Is the current pixel black since alignment patterns are bordered in black\n                if (validFinderPattern) {\n                    // Compute the start and end x values of the large center black square\n                    const endX = x - scans[3] - scans[4];\n                    const startX = endX - scans[2];\n                    const line = { startX, endX, y };\n                    // Is there a quad directly above the current spot? If so, extend it with the new line. Otherwise, create a new quad with\n                    // that line as the starting point.\n                    const matchingQuads = activeFinderPatternQuads.filter(q => (startX >= q.bottom.startX && startX <= q.bottom.endX) ||\n                        (endX >= q.bottom.startX && startX <= q.bottom.endX) ||\n                        (startX <= q.bottom.startX && endX >= q.bottom.endX && ((scans[2] / (q.bottom.endX - q.bottom.startX)) < MAX_QUAD_RATIO &&\n                            (scans[2] / (q.bottom.endX - q.bottom.startX)) > MIN_QUAD_RATIO)));\n                    if (matchingQuads.length > 0) {\n                        matchingQuads[0].bottom = line;\n                    }\n                    else {\n                        activeFinderPatternQuads.push({ top: line, bottom: line });\n                    }\n                }\n                if (validAlignmentPattern) {\n                    // Compute the start and end x values of the center black square\n                    const endX = x - scans[4];\n                    const startX = endX - scans[3];\n                    const line = { startX, y, endX };\n                    // Is there a quad directly above the current spot? If so, extend it with the new line. Otherwise, create a new quad with\n                    // that line as the starting point.\n                    const matchingQuads = activeAlignmentPatternQuads.filter(q => (startX >= q.bottom.startX && startX <= q.bottom.endX) ||\n                        (endX >= q.bottom.startX && startX <= q.bottom.endX) ||\n                        (startX <= q.bottom.startX && endX >= q.bottom.endX && ((scans[2] / (q.bottom.endX - q.bottom.startX)) < MAX_QUAD_RATIO &&\n                            (scans[2] / (q.bottom.endX - q.bottom.startX)) > MIN_QUAD_RATIO)));\n                    if (matchingQuads.length > 0) {\n                        matchingQuads[0].bottom = line;\n                    }\n                    else {\n                        activeAlignmentPatternQuads.push({ top: line, bottom: line });\n                    }\n                }\n            }\n        }\n        finderPatternQuads.push(...activeFinderPatternQuads.filter(q => q.bottom.y !== y && q.bottom.y - q.top.y >= 2));\n        activeFinderPatternQuads = activeFinderPatternQuads.filter(q => q.bottom.y === y);\n        alignmentPatternQuads.push(...activeAlignmentPatternQuads.filter(q => q.bottom.y !== y));\n        activeAlignmentPatternQuads = activeAlignmentPatternQuads.filter(q => q.bottom.y === y);\n    }\n    finderPatternQuads.push(...activeFinderPatternQuads.filter(q => q.bottom.y - q.top.y >= 2));\n    alignmentPatternQuads.push(...activeAlignmentPatternQuads);\n    const finderPatternGroups = finderPatternQuads\n        .filter(q => q.bottom.y - q.top.y >= 2) // All quads must be at least 2px tall since the center square is larger than a block\n        .map(q => {\n        const x = (q.top.startX + q.top.endX + q.bottom.startX + q.bottom.endX) / 4;\n        const y = (q.top.y + q.bottom.y + 1) / 2;\n        if (!matrix.get(Math.round(x), Math.round(y))) {\n            return;\n        }\n        const lengths = [q.top.endX - q.top.startX, q.bottom.endX - q.bottom.startX, q.bottom.y - q.top.y + 1];\n        const size = sum(lengths) / lengths.length;\n        const score = scorePattern({ x: Math.round(x), y: Math.round(y) }, [1, 1, 3, 1, 1], matrix);\n        return { score, x, y, size };\n    })\n        .filter(q => !!q) // Filter out any rejected quads from above\n        .sort((a, b) => a.score - b.score)\n        // Now take the top finder pattern options and try to find 2 other options with a similar size.\n        .map((point, i, finderPatterns) => {\n        if (i > MAX_FINDERPATTERNS_TO_SEARCH) {\n            return null;\n        }\n        const otherPoints = finderPatterns\n            .filter((p, ii) => i !== ii)\n            .map(p => ({ x: p.x, y: p.y, score: p.score + (Math.pow((p.size - point.size), 2)) / point.size, size: p.size }))\n            .sort((a, b) => a.score - b.score);\n        if (otherPoints.length < 2) {\n            return null;\n        }\n        const score = point.score + otherPoints[0].score + otherPoints[1].score;\n        return { points: [point].concat(otherPoints.slice(0, 2)), score };\n    })\n        .filter(q => !!q) // Filter out any rejected finder patterns from above\n        .sort((a, b) => a.score - b.score);\n    if (finderPatternGroups.length === 0) {\n        return null;\n    }\n    const { topRight, topLeft, bottomLeft } = reorderFinderPatterns(finderPatternGroups[0].points[0], finderPatternGroups[0].points[1], finderPatternGroups[0].points[2]);\n    // Now that we've found the three finder patterns we can determine the blockSize and the size of the QR code.\n    // We'll use these to help find the alignment pattern but also later when we do the extraction.\n    let dimension;\n    let moduleSize;\n    try {\n        ({ dimension, moduleSize } = computeDimension(topLeft, topRight, bottomLeft, matrix));\n    }\n    catch (e) {\n        return null;\n    }\n    // Now find the alignment pattern\n    const bottomRightFinderPattern = {\n        x: topRight.x - topLeft.x + bottomLeft.x,\n        y: topRight.y - topLeft.y + bottomLeft.y,\n    };\n    const modulesBetweenFinderPatterns = ((distance(topLeft, bottomLeft) + distance(topLeft, topRight)) / 2 / moduleSize);\n    const correctionToTopLeft = 1 - (3 / modulesBetweenFinderPatterns);\n    const expectedAlignmentPattern = {\n        x: topLeft.x + correctionToTopLeft * (bottomRightFinderPattern.x - topLeft.x),\n        y: topLeft.y + correctionToTopLeft * (bottomRightFinderPattern.y - topLeft.y),\n    };\n    const alignmentPatterns = alignmentPatternQuads\n        .map(q => {\n        const x = (q.top.startX + q.top.endX + q.bottom.startX + q.bottom.endX) / 4;\n        const y = (q.top.y + q.bottom.y + 1) / 2;\n        if (!matrix.get(Math.floor(x), Math.floor(y))) {\n            return;\n        }\n        const lengths = [q.top.endX - q.top.startX, q.bottom.endX - q.bottom.startX, (q.bottom.y - q.top.y + 1)];\n        const size = sum(lengths) / lengths.length;\n        const sizeScore = scorePattern({ x: Math.floor(x), y: Math.floor(y) }, [1, 1, 1], matrix);\n        const score = sizeScore + distance({ x, y }, expectedAlignmentPattern);\n        return { x, y, score };\n    })\n        .filter(v => !!v)\n        .sort((a, b) => a.score - b.score);\n    // If there are less than 15 modules between finder patterns it's a version 1 QR code and as such has no alignmemnt pattern\n    // so we can only use our best guess.\n    const alignmentPattern = modulesBetweenFinderPatterns >= 15 && alignmentPatterns.length ? alignmentPatterns[0] : expectedAlignmentPattern;\n    return {\n        alignmentPattern: { x: alignmentPattern.x, y: alignmentPattern.y },\n        bottomLeft: { x: bottomLeft.x, y: bottomLeft.y },\n        dimension,\n        topLeft: { x: topLeft.x, y: topLeft.y },\n        topRight: { x: topRight.x, y: topRight.y },\n    };\n}\n\nfunction scan(matrix) {\n    const location = locate(matrix);\n    if (!location) {\n        return null;\n    }\n    const extracted = extract(matrix, location);\n    const decoded = decode$2(extracted.matrix);\n    if (!decoded) {\n        return null;\n    }\n    return {\n        binaryData: decoded.bytes,\n        data: decoded.text,\n        chunks: decoded.chunks,\n        location: {\n            topRightCorner: extracted.mappingFunction(location.dimension, 0),\n            topLeftCorner: extracted.mappingFunction(0, 0),\n            bottomRightCorner: extracted.mappingFunction(location.dimension, location.dimension),\n            bottomLeftCorner: extracted.mappingFunction(0, location.dimension),\n            topRightFinderPattern: location.topRight,\n            topLeftFinderPattern: location.topLeft,\n            bottomLeftFinderPattern: location.bottomLeft,\n            bottomRightAlignmentPattern: location.alignmentPattern,\n        },\n    };\n}\nconst defaultOptions = {\n    inversionAttempts: \"attemptBoth\",\n    greyScaleWeights: {\n        red: 0.2126,\n        green: 0.7152,\n        blue: 0.0722,\n        useIntegerApproximation: false,\n    },\n    canOverwriteImage: true,\n};\nfunction mergeObject(target, src) {\n    Object.keys(src).forEach(opt => {\n        target[opt] = src[opt];\n    });\n}\nfunction jsQR(data, width, height, providedOptions = {}) {\n    const options = Object.create(null);\n    mergeObject(options, defaultOptions);\n    mergeObject(options, providedOptions);\n    const shouldInvert = options.inversionAttempts === \"attemptBoth\" || options.inversionAttempts === \"invertFirst\";\n    const tryInvertedFirst = options.inversionAttempts === \"onlyInvert\" || options.inversionAttempts === \"invertFirst\";\n    const { binarized, inverted } = binarize(data, width, height, shouldInvert, options.greyScaleWeights, options.canOverwriteImage);\n    let result = scan(tryInvertedFirst ? inverted : binarized);\n    if (!result && (options.inversionAttempts === \"attemptBoth\" || options.inversionAttempts === \"invertFirst\")) {\n        result = scan(tryInvertedFirst ? binarized : inverted);\n    }\n    return result;\n}\njsQR.default = jsQR;\n\nexport default jsQR;\n//# sourceMappingURL=jsQR.js.map\n","\n\n\nvar undefinedHeader = /* array */[];\n\nfunction some(x) {\n  if (x === undefined) {\n    var block = /* tuple */[\n      undefinedHeader,\n      0\n    ];\n    block.tag = 256;\n    return block;\n  } else if (x !== null && x[0] === undefinedHeader) {\n    var nid = x[1] + 1 | 0;\n    var block$1 = /* tuple */[\n      undefinedHeader,\n      nid\n    ];\n    block$1.tag = 256;\n    return block$1;\n  } else {\n    return x;\n  }\n}\n\nfunction nullable_to_opt(x) {\n  if (x === null || x === undefined) {\n    return undefined;\n  } else {\n    return some(x);\n  }\n}\n\nfunction undefined_to_opt(x) {\n  if (x === undefined) {\n    return undefined;\n  } else {\n    return some(x);\n  }\n}\n\nfunction null_to_opt(x) {\n  if (x === null) {\n    return undefined;\n  } else {\n    return some(x);\n  }\n}\n\nfunction valFromOption(x) {\n  if (x !== null && x[0] === undefinedHeader) {\n    var depth = x[1];\n    if (depth === 0) {\n      return undefined;\n    } else {\n      return /* tuple */[\n              undefinedHeader,\n              depth - 1 | 0\n            ];\n    }\n  } else {\n    return x;\n  }\n}\n\nfunction option_get(x) {\n  if (x === undefined) {\n    return undefined;\n  } else {\n    return valFromOption(x);\n  }\n}\n\nfunction option_get_unwrap(x) {\n  if (x === undefined) {\n    return undefined;\n  } else {\n    return valFromOption(x)[1];\n  }\n}\n\nexport {\n  nullable_to_opt ,\n  undefined_to_opt ,\n  null_to_opt ,\n  valFromOption ,\n  some ,\n  option_get ,\n  option_get_unwrap ,\n  \n}\n/* No side effect */\n","// Generated by BUCKLESCRIPT VERSION 5.0.2, PLEASE EDIT WITH CARE\n\nimport * as JsQr$QueerLoop from \"./JsQr.bs.js\";\n\nself.onmessage = (function (e) {\n    var match = e.data;\n    var maybeCode = JsQr$QueerLoop.jsQR(match[0], match[1], match[2], /* DontInvert */1);\n    postMessage(maybeCode);\n    return /* () */0;\n  });\n\nexport {\n  \n}\n/*  Not a pure module */\n","// Generated by BUCKLESCRIPT VERSION 5.0.2, PLEASE EDIT WITH CARE\n\nimport * as JsqrEs6 from \"jsqr-es6\";\nimport * as Caml_option from \"../node_modules/bs-platform/lib/es6/caml_option.js\";\n\nfunction string_of_invertOptions(param) {\n  switch (param) {\n    case 0 : \n        return \"attemptBoth\";\n    case 1 : \n        return \"dontInvert\";\n    case 2 : \n        return \"onlyInvert\";\n    case 3 : \n        return \"invertFirst\";\n    \n  }\n}\n\nfunction jsQR(d, w, h, invertOptions) {\n  var optString = string_of_invertOptions(invertOptions);\n  return Caml_option.nullable_to_opt(JsqrEs6.default(d, w, h, {\n                  inversionAttempts: optString,\n                  canOverwriteImage: true\n                }));\n}\n\nexport {\n  string_of_invertOptions ,\n  jsQR ,\n  \n}\n/* jsqr-es6 Not a pure module */\n"],"names":["BitMatrix","[object Object]","width","height","Uint8ClampedArray","data","this","length","x","y","v","left","top","set","REGION_SIZE","MIN_DYNAMIC_RANGE","numBetween","value","min","max","Matrix","buffer","bufferSize","Error","BitStream","bytes","byteOffset","bitOffset","numBits","available","toString","result","bitsLeft","toRead","bitsToNotRead","mask","Mode","ModeByte","decodeNumeric","stream","size","text","characterCountSize","readBits","num","a","Math","floor","b","c","push","AlphanumericCharacterCodes","decodeAlphanumeric","charCodeAt","decodeByte","i","decodeURIComponent","map","substr","join","_a","decodeKanji","k","TextDecoder","decode","Uint8Array","from","GenericGFPoly","field","coefficients","coefficientsLength","firstNonZero","zero","degree","other","isZero","smallerCoefficients","largerCoefficients","sumDiff","lengthDiff","addOrSubtractGF","scalar","product","multiply","aCoefficients","aLength","bCoefficients","bLength","aCoeff","j","coefficient","getCoefficient","forEach","GenericGF","primitive","genBase","generatorBase","expTable","Array","logTable","one","decode$1","twoS","outputBytes","poly","syndromeCoefficients","error","s","evaluation","evaluateAt","exp","syndrome","sigmaOmega","R","rLast","r","tLast","t","rLastLast","tLastLast","q","denominatorLeadingTerm","dltInverse","inverse","degreeDiff","scale","addOrSubtract","buildMonomial","multiplyByMonomial","multiplyPoly","sigmaTildeAtZero","runEuclideanAlgorithm","errorLocations","errorLocator","numErrors","errorCount","findErrorLocations","errorMagnitudes","errorEvaluator","xiInverse","denominator","findErrorMagnitudes","position","log","VERSIONS","infoBits","versionNumber","alignmentPatternCenters","errorCorrectionLevels","ecCodewordsPerBlock","ecBlocks","numBlocks","dataCodewordsPerBlock","numBitsDiffering","z","bitCount","pushBit","bit","byte","FORMAT_INFO_TABLE","bits","formatInfo","errorCorrectionLevel","dataMask","DATA_MASKS","p","readCodewords","matrix","version","dimension","functionPatternMask","createEmpty","setRegion","buildFunctionPatternMask","codewords","currentByte","bitsRead","readingUp","columnIndex","columnOffset","get","decodeMatrix","provisionalVersion","topRightVersionBits","bottomLeftVersionBits","bestVersion","bestDifference","Infinity","difference","readVersion","topLeftFormatInfoBits","topRightBottomRightFormatInfoBits","bestFormatInfo","readFormatInformation","dataBlocks","ecLevel","ecInfo","totalCodewords","block","numDataCodewords","slice","shortBlockSize","dataBlock","shift","smallBlockCount","largeBlockCount","getDataBlocks","totalBytes","reduce","resultBytes","resultIndex","correctedBytes","chunks","mode","Terminator","ECI","type","assignmentNumber","Numeric","numericResult","Alphanumeric","alphanumericResult","Byte","byteResult","Kanji","kanjiResult","squareToQuadrilateral","p1","p2","p3","p4","dx3","dy3","a11","a12","a13","a21","a22","a23","a31","a32","a33","dx1","dx2","dy1","dy2","extract","image","location","qToS","sToQ","quadrilateralToSquare","topLeft","topRight","alignmentPattern","bottomLeft","transform","mappingFunction","sourcePixel","MAX_FINDERPATTERNS_TO_SEARCH","MIN_QUAD_RATIO","MAX_QUAD_RATIO","distance","sqrt","pow","sum","values","countBlackWhiteRunTowardsPoint","origin","end","switchPoints","steep","abs","fromX","fromY","toX","toY","dx","dy","xStep","yStep","currentPixel","realX","realY","distances","countBlackWhiteRun","rise","run","towardsEnd","ceil","awayFromEnd","middleValue","concat","scoreBlackWhiteRun","sequence","ratios","averageSize","ratio","scorePattern","point","horizontalRun","verticalRun","topLeftBottomRightRun","bottomLeftTopRightRun","horzError","vertError","diagDownError","diagUpError","ratioError","avgSize","locate","finderPatternQuads","activeFinderPatternQuads","alignmentPatternQuads","activeAlignmentPatternQuads","lastBit","scans","averageFinderPatternBlocksize","validFinderPattern","averageAlignmentPatternBlocksize","validAlignmentPattern","endX","startX","line","matchingQuads","filter","bottom","finderPatternGroups","round","lengths","score","sort","finderPatterns","otherPoints","ii","points","pattern1","pattern2","pattern3","oneTwoDistance","twoThreeDistance","oneThreeDistance","reorderFinderPatterns","moduleSize","topDimension","sideDimension","computeDimension","e","bottomRightFinderPattern","modulesBetweenFinderPatterns","correctionToTopLeft","expectedAlignmentPattern","alignmentPatterns","scan","extracted","decoded","decode$2","binaryData","topRightCorner","topLeftCorner","bottomRightCorner","bottomLeftCorner","topRightFinderPattern","topLeftFinderPattern","bottomLeftFinderPattern","bottomRightAlignmentPattern","defaultOptions","inversionAttempts","greyScaleWeights","red","green","blue","useIntegerApproximation","canOverwriteImage","mergeObject","target","src","Object","keys","opt","jsQR","providedOptions","options","create","shouldInvert","tryInvertedFirst","binarized","inverted","returnInverted","greyscaleWeights","pixelCount","greyscaleBuffer","bufferOffset","greyscalePixels","pixelPosition","g","horizontalRegionCount","verticalRegionCount","blackPointsCount","blackPointsBuffer","blackPoints","verticalRegion","hortizontalRegion","pixelLumosity","average","blackBias","averageNeighborBlackPoint","binarizedBuffer","invertedBuffer","xRegion","yRegion","threshold","lum","binarize","default","undefinedHeader","nullable_to_opt","undefined","tag","nid","block$1","some","self","onmessage","d","w","h","match","maybeCode","Caml_option.nullable_to_opt","JsqrEs6.default","param","string_of_invertOptions","postMessage"],"mappings":"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"}