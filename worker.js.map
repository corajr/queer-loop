{"version":3,"file":"worker.js","sources":["node_modules/bs-platform/lib/es6/caml_option.js","node_modules/jsqr-es6/dist/jsQR.js","src/DecodeWorker.bs.js","src/JsQr.bs.js"],"sourcesContent":["\n\n\nvar undefinedHeader = /* array */[];\n\nfunction some(x) {\n  if (x === undefined) {\n    var block = /* tuple */[\n      undefinedHeader,\n      0\n    ];\n    block.tag = 256;\n    return block;\n  } else if (x !== null && x[0] === undefinedHeader) {\n    var nid = x[1] + 1 | 0;\n    var block$1 = /* tuple */[\n      undefinedHeader,\n      nid\n    ];\n    block$1.tag = 256;\n    return block$1;\n  } else {\n    return x;\n  }\n}\n\nfunction nullable_to_opt(x) {\n  if (x === null || x === undefined) {\n    return ;\n  } else {\n    return some(x);\n  }\n}\n\nfunction undefined_to_opt(x) {\n  if (x === undefined) {\n    return ;\n  } else {\n    return some(x);\n  }\n}\n\nfunction null_to_opt(x) {\n  if (x === null) {\n    return ;\n  } else {\n    return some(x);\n  }\n}\n\nfunction valFromOption(x) {\n  if (x !== null && x[0] === undefinedHeader) {\n    var depth = x[1];\n    if (depth === 0) {\n      return ;\n    } else {\n      return /* tuple */[\n              undefinedHeader,\n              depth - 1 | 0\n            ];\n    }\n  } else {\n    return x;\n  }\n}\n\nfunction option_get(x) {\n  if (x === undefined) {\n    return ;\n  } else {\n    return valFromOption(x);\n  }\n}\n\nfunction option_get_unwrap(x) {\n  if (x === undefined) {\n    return ;\n  } else {\n    return valFromOption(x)[1];\n  }\n}\n\nexport {\n  nullable_to_opt ,\n  undefined_to_opt ,\n  null_to_opt ,\n  valFromOption ,\n  some ,\n  option_get ,\n  option_get_unwrap ,\n  \n}\n/* No side effect */\n","class BitMatrix {\n    static createEmpty(width, height) {\n        return new BitMatrix(new Uint8ClampedArray(width * height), width);\n    }\n    constructor(data, width) {\n        this.width = width;\n        this.height = data.length / width;\n        this.data = data;\n    }\n    get(x, y) {\n        if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n            return false;\n        }\n        return !!this.data[y * this.width + x];\n    }\n    set(x, y, v) {\n        this.data[y * this.width + x] = v ? 1 : 0;\n    }\n    setRegion(left, top, width, height, v) {\n        for (let y = top; y < top + height; y++) {\n            for (let x = left; x < left + width; x++) {\n                this.set(x, y, !!v);\n            }\n        }\n    }\n}\n\nconst REGION_SIZE = 8;\nconst MIN_DYNAMIC_RANGE = 24;\nfunction numBetween(value, min, max) {\n    return value < min ? min : value > max ? max : value;\n}\n// Like BitMatrix but accepts arbitry Uint8 values\nclass Matrix {\n    constructor(width, height, buffer) {\n        this.width = width;\n        const bufferSize = width * height;\n        if (buffer && buffer.length !== bufferSize) {\n            throw new Error(\"Wrong buffer size\");\n        }\n        this.data = buffer || new Uint8ClampedArray(bufferSize);\n    }\n    get(x, y) {\n        return this.data[y * this.width + x];\n    }\n    set(x, y, value) {\n        this.data[y * this.width + x] = value;\n    }\n}\nfunction binarize(data, width, height, returnInverted, greyscaleWeights, canOverwriteImage) {\n    const pixelCount = width * height;\n    if (data.length !== pixelCount * 4) {\n        throw new Error(\"Malformed data passed to binarizer.\");\n    }\n    // assign the greyscale and binary image within the rgba buffer as the rgba image will not be needed after conversion\n    let bufferOffset = 0;\n    // Convert image to greyscale\n    let greyscaleBuffer;\n    if (canOverwriteImage) {\n        greyscaleBuffer = new Uint8ClampedArray(data.buffer, bufferOffset, pixelCount);\n        bufferOffset += pixelCount;\n    }\n    const greyscalePixels = new Matrix(width, height, greyscaleBuffer);\n    if (greyscaleWeights.useIntegerApproximation) {\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                const pixelPosition = (y * width + x) * 4;\n                const r = data[pixelPosition];\n                const g = data[pixelPosition + 1];\n                const b = data[pixelPosition + 2];\n                greyscalePixels.set(x, y, \n                // tslint:disable-next-line no-bitwise\n                (greyscaleWeights.red * r + greyscaleWeights.green * g + greyscaleWeights.blue * b + 128) >> 8);\n            }\n        }\n    }\n    else {\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                const pixelPosition = (y * width + x) * 4;\n                const r = data[pixelPosition];\n                const g = data[pixelPosition + 1];\n                const b = data[pixelPosition + 2];\n                greyscalePixels.set(x, y, greyscaleWeights.red * r + greyscaleWeights.green * g + greyscaleWeights.blue * b);\n            }\n        }\n    }\n    const horizontalRegionCount = Math.ceil(width / REGION_SIZE);\n    const verticalRegionCount = Math.ceil(height / REGION_SIZE);\n    const blackPointsCount = horizontalRegionCount * verticalRegionCount;\n    let blackPointsBuffer;\n    if (canOverwriteImage) {\n        blackPointsBuffer = new Uint8ClampedArray(data.buffer, bufferOffset, blackPointsCount);\n        bufferOffset += blackPointsCount;\n    }\n    const blackPoints = new Matrix(horizontalRegionCount, verticalRegionCount, blackPointsBuffer);\n    for (let verticalRegion = 0; verticalRegion < verticalRegionCount; verticalRegion++) {\n        for (let hortizontalRegion = 0; hortizontalRegion < horizontalRegionCount; hortizontalRegion++) {\n            let min = Infinity;\n            let max = 0;\n            for (let y = 0; y < REGION_SIZE; y++) {\n                for (let x = 0; x < REGION_SIZE; x++) {\n                    const pixelLumosity = greyscalePixels.get(hortizontalRegion * REGION_SIZE + x, verticalRegion * REGION_SIZE + y);\n                    min = Math.min(min, pixelLumosity);\n                    max = Math.max(max, pixelLumosity);\n                }\n            }\n            // We could also compute the real average of all pixels but following the assumption that the qr code consists\n            // of bright and dark pixels and essentially not much in between, by (min + max)/2 we make the cut really between\n            // those two classes. If using the average over all pixel in a block of mostly bright pixels and few dark pixels,\n            // the avg would tend to the bright side and darker bright pixels could be interpreted as dark.\n            let average = (min + max) / 2;\n            // Small bias towards black by moving the threshold up. We do this, as in the finder patterns white holes tend\n            // to appear which makes them undetectable.\n            const blackBias = 1.1;\n            average = Math.min(255, average * blackBias);\n            if (max - min <= MIN_DYNAMIC_RANGE) {\n                // If variation within the block is low, assume this is a block with only light or only\n                // dark pixels. In that case we do not want to use the average, as it would divide this\n                // low contrast area into black and white pixels, essentially creating data out of noise.\n                //\n                // Default the blackpoint for these blocks to be half the min - effectively white them out\n                average = min / 2;\n                if (verticalRegion > 0 && hortizontalRegion > 0) {\n                    // Correct the \"white background\" assumption for blocks that have neighbors by comparing\n                    // the pixels in this block to the previously calculated black points. This is based on\n                    // the fact that dark barcode symbology is always surrounded by some amount of light\n                    // background for which reasonable black point estimates were made. The bp estimated at\n                    // the boundaries is used for the interior.\n                    // The (min < bp) is arbitrary but works better than other heuristics that were tried.\n                    const averageNeighborBlackPoint = (blackPoints.get(hortizontalRegion, verticalRegion - 1) +\n                        (2 * blackPoints.get(hortizontalRegion - 1, verticalRegion)) +\n                        blackPoints.get(hortizontalRegion - 1, verticalRegion - 1)) / 4;\n                    if (min < averageNeighborBlackPoint) {\n                        average = averageNeighborBlackPoint; // no need to apply black bias as already applied to neighbors\n                    }\n                }\n            }\n            blackPoints.set(hortizontalRegion, verticalRegion, average);\n        }\n    }\n    let binarized;\n    if (canOverwriteImage) {\n        const binarizedBuffer = new Uint8ClampedArray(data.buffer, bufferOffset, pixelCount);\n        bufferOffset += pixelCount;\n        binarized = new BitMatrix(binarizedBuffer, width);\n    }\n    else {\n        binarized = BitMatrix.createEmpty(width, height);\n    }\n    let inverted = null;\n    if (returnInverted) {\n        if (canOverwriteImage) {\n            const invertedBuffer = new Uint8ClampedArray(data.buffer, bufferOffset, pixelCount);\n            inverted = new BitMatrix(invertedBuffer, width);\n        }\n        else {\n            inverted = BitMatrix.createEmpty(width, height);\n        }\n    }\n    for (let verticalRegion = 0; verticalRegion < verticalRegionCount; verticalRegion++) {\n        for (let hortizontalRegion = 0; hortizontalRegion < horizontalRegionCount; hortizontalRegion++) {\n            const left = numBetween(hortizontalRegion, 2, horizontalRegionCount - 3);\n            const top = numBetween(verticalRegion, 2, verticalRegionCount - 3);\n            let sum = 0;\n            for (let xRegion = -2; xRegion <= 2; xRegion++) {\n                for (let yRegion = -2; yRegion <= 2; yRegion++) {\n                    sum += blackPoints.get(left + xRegion, top + yRegion);\n                }\n            }\n            const threshold = sum / 25;\n            for (let xRegion = 0; xRegion < REGION_SIZE; xRegion++) {\n                for (let yRegion = 0; yRegion < REGION_SIZE; yRegion++) {\n                    const x = hortizontalRegion * REGION_SIZE + xRegion;\n                    const y = verticalRegion * REGION_SIZE + yRegion;\n                    const lum = greyscalePixels.get(x, y);\n                    binarized.set(x, y, lum <= threshold);\n                    if (returnInverted) {\n                        inverted.set(x, y, !(lum <= threshold));\n                    }\n                }\n            }\n        }\n    }\n    if (returnInverted) {\n        return { binarized, inverted };\n    }\n    return { binarized };\n}\n\n// tslint:disable:no-bitwise\nclass BitStream {\n    constructor(bytes) {\n        this.byteOffset = 0;\n        this.bitOffset = 0;\n        this.bytes = bytes;\n    }\n    readBits(numBits) {\n        if (numBits < 1 || numBits > 32 || numBits > this.available()) {\n            throw new Error(\"Cannot read \" + numBits.toString() + \" bits\");\n        }\n        let result = 0;\n        // First, read remainder from current byte\n        if (this.bitOffset > 0) {\n            const bitsLeft = 8 - this.bitOffset;\n            const toRead = numBits < bitsLeft ? numBits : bitsLeft;\n            const bitsToNotRead = bitsLeft - toRead;\n            const mask = (0xFF >> (8 - toRead)) << bitsToNotRead;\n            result = (this.bytes[this.byteOffset] & mask) >> bitsToNotRead;\n            numBits -= toRead;\n            this.bitOffset += toRead;\n            if (this.bitOffset === 8) {\n                this.bitOffset = 0;\n                this.byteOffset++;\n            }\n        }\n        // Next read whole bytes\n        if (numBits > 0) {\n            while (numBits >= 8) {\n                result = (result << 8) | (this.bytes[this.byteOffset] & 0xFF);\n                this.byteOffset++;\n                numBits -= 8;\n            }\n            // Finally read a partial byte\n            if (numBits > 0) {\n                const bitsToNotRead = 8 - numBits;\n                const mask = (0xFF >> bitsToNotRead) << bitsToNotRead;\n                result = (result << numBits) | ((this.bytes[this.byteOffset] & mask) >> bitsToNotRead);\n                this.bitOffset += numBits;\n            }\n        }\n        return result;\n    }\n    available() {\n        return 8 * (this.bytes.length - this.byteOffset) - this.bitOffset;\n    }\n}\n\n// tslint:disable:no-bitwise\nvar Mode;\n(function (Mode) {\n    Mode[\"Numeric\"] = \"numeric\";\n    Mode[\"Alphanumeric\"] = \"alphanumeric\";\n    Mode[\"Byte\"] = \"byte\";\n    Mode[\"Kanji\"] = \"kanji\";\n    Mode[\"ECI\"] = \"eci\";\n})(Mode || (Mode = {}));\nvar ModeByte;\n(function (ModeByte) {\n    ModeByte[ModeByte[\"Terminator\"] = 0] = \"Terminator\";\n    ModeByte[ModeByte[\"Numeric\"] = 1] = \"Numeric\";\n    ModeByte[ModeByte[\"Alphanumeric\"] = 2] = \"Alphanumeric\";\n    ModeByte[ModeByte[\"Byte\"] = 4] = \"Byte\";\n    ModeByte[ModeByte[\"Kanji\"] = 8] = \"Kanji\";\n    ModeByte[ModeByte[\"ECI\"] = 7] = \"ECI\";\n    // StructuredAppend = 0x3,\n    // FNC1FirstPosition = 0x5,\n    // FNC1SecondPosition = 0x9,\n})(ModeByte || (ModeByte = {}));\nfunction decodeNumeric(stream, size) {\n    const bytes = [];\n    let text = \"\";\n    const characterCountSize = [10, 12, 14][size];\n    let length = stream.readBits(characterCountSize);\n    // Read digits in groups of 3\n    while (length >= 3) {\n        const num = stream.readBits(10);\n        if (num >= 1000) {\n            throw new Error(\"Invalid numeric value above 999\");\n        }\n        const a = Math.floor(num / 100);\n        const b = Math.floor(num / 10) % 10;\n        const c = num % 10;\n        bytes.push(48 + a, 48 + b, 48 + c);\n        text += a.toString() + b.toString() + c.toString();\n        length -= 3;\n    }\n    // If the number of digits aren't a multiple of 3, the remaining digits are special cased.\n    if (length === 2) {\n        const num = stream.readBits(7);\n        if (num >= 100) {\n            throw new Error(\"Invalid numeric value above 99\");\n        }\n        const a = Math.floor(num / 10);\n        const b = num % 10;\n        bytes.push(48 + a, 48 + b);\n        text += a.toString() + b.toString();\n    }\n    else if (length === 1) {\n        const num = stream.readBits(4);\n        if (num >= 10) {\n            throw new Error(\"Invalid numeric value above 9\");\n        }\n        bytes.push(48 + num);\n        text += num.toString();\n    }\n    return { bytes, text };\n}\nconst AlphanumericCharacterCodes = [\n    \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\n    \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\",\n    \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\",\n    \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\",\n    \" \", \"$\", \"%\", \"*\", \"+\", \"-\", \".\", \"/\", \":\",\n];\nfunction decodeAlphanumeric(stream, size) {\n    const bytes = [];\n    let text = \"\";\n    const characterCountSize = [9, 11, 13][size];\n    let length = stream.readBits(characterCountSize);\n    while (length >= 2) {\n        const v = stream.readBits(11);\n        const a = Math.floor(v / 45);\n        const b = v % 45;\n        bytes.push(AlphanumericCharacterCodes[a].charCodeAt(0), AlphanumericCharacterCodes[b].charCodeAt(0));\n        text += AlphanumericCharacterCodes[a] + AlphanumericCharacterCodes[b];\n        length -= 2;\n    }\n    if (length === 1) {\n        const a = stream.readBits(6);\n        bytes.push(AlphanumericCharacterCodes[a].charCodeAt(0));\n        text += AlphanumericCharacterCodes[a];\n    }\n    return { bytes, text };\n}\nfunction decodeByte(stream, size) {\n    const bytes = [];\n    let text = \"\";\n    const characterCountSize = [8, 16, 16][size];\n    const length = stream.readBits(characterCountSize);\n    for (let i = 0; i < length; i++) {\n        const b = stream.readBits(8);\n        bytes.push(b);\n    }\n    try {\n        text += decodeURIComponent(bytes.map(b => `%${(\"0\" + b.toString(16)).substr(-2)}`).join(\"\"));\n    }\n    catch (_a) {\n        // failed to decode\n    }\n    return { bytes, text };\n}\nfunction decodeKanji(stream, size) {\n    const bytes = [];\n    const characterCountSize = [8, 10, 12][size];\n    const length = stream.readBits(characterCountSize);\n    for (let i = 0; i < length; i++) {\n        const k = stream.readBits(13);\n        let c = (Math.floor(k / 0xC0) << 8) | (k % 0xC0);\n        if (c < 0x1F00) {\n            c += 0x8140;\n        }\n        else {\n            c += 0xC140;\n        }\n        bytes.push(c >> 8, c & 0xFF);\n    }\n    const text = new TextDecoder(\"shift-jis\").decode(Uint8Array.from(bytes));\n    return { bytes, text };\n}\nfunction decode(data, version) {\n    const stream = new BitStream(data);\n    // There are 3 'sizes' based on the version. 1-9 is small (0), 10-26 is medium (1) and 27-40 is large (2).\n    const size = version <= 9 ? 0 : version <= 26 ? 1 : 2;\n    const result = {\n        text: \"\",\n        bytes: [],\n        chunks: [],\n    };\n    while (stream.available() >= 4) {\n        const mode = stream.readBits(4);\n        if (mode === ModeByte.Terminator) {\n            return result;\n        }\n        else if (mode === ModeByte.ECI) {\n            if (stream.readBits(1) === 0) {\n                result.chunks.push({\n                    type: Mode.ECI,\n                    assignmentNumber: stream.readBits(7),\n                });\n            }\n            else if (stream.readBits(1) === 0) {\n                result.chunks.push({\n                    type: Mode.ECI,\n                    assignmentNumber: stream.readBits(14),\n                });\n            }\n            else if (stream.readBits(1) === 0) {\n                result.chunks.push({\n                    type: Mode.ECI,\n                    assignmentNumber: stream.readBits(21),\n                });\n            }\n            else {\n                // ECI data seems corrupted\n                result.chunks.push({\n                    type: Mode.ECI,\n                    assignmentNumber: -1,\n                });\n            }\n        }\n        else if (mode === ModeByte.Numeric) {\n            const numericResult = decodeNumeric(stream, size);\n            result.text += numericResult.text;\n            result.bytes.push(...numericResult.bytes);\n            result.chunks.push({\n                type: Mode.Numeric,\n                text: numericResult.text,\n            });\n        }\n        else if (mode === ModeByte.Alphanumeric) {\n            const alphanumericResult = decodeAlphanumeric(stream, size);\n            result.text += alphanumericResult.text;\n            result.bytes.push(...alphanumericResult.bytes);\n            result.chunks.push({\n                type: Mode.Alphanumeric,\n                text: alphanumericResult.text,\n            });\n        }\n        else if (mode === ModeByte.Byte) {\n            const byteResult = decodeByte(stream, size);\n            result.text += byteResult.text;\n            result.bytes.push(...byteResult.bytes);\n            result.chunks.push({\n                type: Mode.Byte,\n                bytes: byteResult.bytes,\n                text: byteResult.text,\n            });\n        }\n        else if (mode === ModeByte.Kanji) {\n            const kanjiResult = decodeKanji(stream, size);\n            result.text += kanjiResult.text;\n            result.bytes.push(...kanjiResult.bytes);\n            result.chunks.push({\n                type: Mode.Kanji,\n                bytes: kanjiResult.bytes,\n                text: kanjiResult.text,\n            });\n        }\n    }\n    // If there is no data left, or the remaining bits are all 0, then that counts as a termination marker\n    if (stream.available() === 0 || stream.readBits(stream.available()) === 0) {\n        return result;\n    }\n}\n\nclass GenericGFPoly {\n    constructor(field, coefficients) {\n        if (coefficients.length === 0) {\n            throw new Error(\"No coefficients.\");\n        }\n        this.field = field;\n        const coefficientsLength = coefficients.length;\n        if (coefficientsLength > 1 && coefficients[0] === 0) {\n            // Leading term must be non-zero for anything except the constant polynomial \"0\"\n            let firstNonZero = 1;\n            while (firstNonZero < coefficientsLength && coefficients[firstNonZero] === 0) {\n                firstNonZero++;\n            }\n            if (firstNonZero === coefficientsLength) {\n                this.coefficients = field.zero.coefficients;\n            }\n            else {\n                this.coefficients = new Uint8ClampedArray(coefficientsLength - firstNonZero);\n                for (let i = 0; i < this.coefficients.length; i++) {\n                    this.coefficients[i] = coefficients[firstNonZero + i];\n                }\n            }\n        }\n        else {\n            this.coefficients = coefficients;\n        }\n    }\n    degree() {\n        return this.coefficients.length - 1;\n    }\n    isZero() {\n        return this.coefficients[0] === 0;\n    }\n    getCoefficient(degree) {\n        return this.coefficients[this.coefficients.length - 1 - degree];\n    }\n    addOrSubtract(other) {\n        if (this.isZero()) {\n            return other;\n        }\n        if (other.isZero()) {\n            return this;\n        }\n        let smallerCoefficients = this.coefficients;\n        let largerCoefficients = other.coefficients;\n        if (smallerCoefficients.length > largerCoefficients.length) {\n            [smallerCoefficients, largerCoefficients] = [largerCoefficients, smallerCoefficients];\n        }\n        const sumDiff = new Uint8ClampedArray(largerCoefficients.length);\n        const lengthDiff = largerCoefficients.length - smallerCoefficients.length;\n        for (let i = 0; i < lengthDiff; i++) {\n            sumDiff[i] = largerCoefficients[i];\n        }\n        for (let i = lengthDiff; i < largerCoefficients.length; i++) {\n            sumDiff[i] = addOrSubtractGF(smallerCoefficients[i - lengthDiff], largerCoefficients[i]);\n        }\n        return new GenericGFPoly(this.field, sumDiff);\n    }\n    multiply(scalar) {\n        if (scalar === 0) {\n            return this.field.zero;\n        }\n        if (scalar === 1) {\n            return this;\n        }\n        const size = this.coefficients.length;\n        const product = new Uint8ClampedArray(size);\n        for (let i = 0; i < size; i++) {\n            product[i] = this.field.multiply(this.coefficients[i], scalar);\n        }\n        return new GenericGFPoly(this.field, product);\n    }\n    multiplyPoly(other) {\n        if (this.isZero() || other.isZero()) {\n            return this.field.zero;\n        }\n        const aCoefficients = this.coefficients;\n        const aLength = aCoefficients.length;\n        const bCoefficients = other.coefficients;\n        const bLength = bCoefficients.length;\n        const product = new Uint8ClampedArray(aLength + bLength - 1);\n        for (let i = 0; i < aLength; i++) {\n            const aCoeff = aCoefficients[i];\n            for (let j = 0; j < bLength; j++) {\n                product[i + j] = addOrSubtractGF(product[i + j], this.field.multiply(aCoeff, bCoefficients[j]));\n            }\n        }\n        return new GenericGFPoly(this.field, product);\n    }\n    multiplyByMonomial(degree, coefficient) {\n        if (degree < 0) {\n            throw new Error(\"Invalid degree less than 0\");\n        }\n        if (coefficient === 0) {\n            return this.field.zero;\n        }\n        const size = this.coefficients.length;\n        const product = new Uint8ClampedArray(size + degree);\n        for (let i = 0; i < size; i++) {\n            product[i] = this.field.multiply(this.coefficients[i], coefficient);\n        }\n        return new GenericGFPoly(this.field, product);\n    }\n    evaluateAt(a) {\n        let result = 0;\n        if (a === 0) {\n            // Just return the x^0 coefficient\n            return this.getCoefficient(0);\n        }\n        const size = this.coefficients.length;\n        if (a === 1) {\n            // Just the sum of the coefficients\n            this.coefficients.forEach((coefficient) => {\n                result = addOrSubtractGF(result, coefficient);\n            });\n            return result;\n        }\n        result = this.coefficients[0];\n        for (let i = 1; i < size; i++) {\n            result = addOrSubtractGF(this.field.multiply(a, result), this.coefficients[i]);\n        }\n        return result;\n    }\n}\n\nfunction addOrSubtractGF(a, b) {\n    return a ^ b; // tslint:disable-line:no-bitwise\n}\nclass GenericGF {\n    constructor(primitive, size, genBase) {\n        this.primitive = primitive;\n        this.size = size;\n        this.generatorBase = genBase;\n        this.expTable = new Array(this.size);\n        this.logTable = new Array(this.size);\n        let x = 1;\n        for (let i = 0; i < this.size; i++) {\n            this.expTable[i] = x;\n            x = x * 2;\n            if (x >= this.size) {\n                x = (x ^ this.primitive) & (this.size - 1); // tslint:disable-line:no-bitwise\n            }\n        }\n        for (let i = 0; i < this.size - 1; i++) {\n            this.logTable[this.expTable[i]] = i;\n        }\n        this.zero = new GenericGFPoly(this, Uint8ClampedArray.from([0]));\n        this.one = new GenericGFPoly(this, Uint8ClampedArray.from([1]));\n    }\n    multiply(a, b) {\n        if (a === 0 || b === 0) {\n            return 0;\n        }\n        return this.expTable[(this.logTable[a] + this.logTable[b]) % (this.size - 1)];\n    }\n    inverse(a) {\n        if (a === 0) {\n            throw new Error(\"Can't invert 0\");\n        }\n        return this.expTable[this.size - this.logTable[a] - 1];\n    }\n    buildMonomial(degree, coefficient) {\n        if (degree < 0) {\n            throw new Error(\"Invalid monomial degree less than 0\");\n        }\n        if (coefficient === 0) {\n            return this.zero;\n        }\n        const coefficients = new Uint8ClampedArray(degree + 1);\n        coefficients[0] = coefficient;\n        return new GenericGFPoly(this, coefficients);\n    }\n    log(a) {\n        if (a === 0) {\n            throw new Error(\"Can't take log(0)\");\n        }\n        return this.logTable[a];\n    }\n    exp(a) {\n        return this.expTable[a];\n    }\n}\n\nfunction runEuclideanAlgorithm(field, a, b, R) {\n    // Assume a's degree is >= b's\n    if (a.degree() < b.degree()) {\n        [a, b] = [b, a];\n    }\n    let rLast = a;\n    let r = b;\n    let tLast = field.zero;\n    let t = field.one;\n    // Run Euclidean algorithm until r's degree is less than R/2\n    while (r.degree() >= R / 2) {\n        const rLastLast = rLast;\n        const tLastLast = tLast;\n        rLast = r;\n        tLast = t;\n        // Divide rLastLast by rLast, with quotient in q and remainder in r\n        if (rLast.isZero()) {\n            // Euclidean algorithm already terminated?\n            return null;\n        }\n        r = rLastLast;\n        let q = field.zero;\n        const denominatorLeadingTerm = rLast.getCoefficient(rLast.degree());\n        const dltInverse = field.inverse(denominatorLeadingTerm);\n        while (r.degree() >= rLast.degree() && !r.isZero()) {\n            const degreeDiff = r.degree() - rLast.degree();\n            const scale = field.multiply(r.getCoefficient(r.degree()), dltInverse);\n            q = q.addOrSubtract(field.buildMonomial(degreeDiff, scale));\n            r = r.addOrSubtract(rLast.multiplyByMonomial(degreeDiff, scale));\n        }\n        t = q.multiplyPoly(tLast).addOrSubtract(tLastLast);\n        if (r.degree() >= rLast.degree()) {\n            return null;\n        }\n    }\n    const sigmaTildeAtZero = t.getCoefficient(0);\n    if (sigmaTildeAtZero === 0) {\n        return null;\n    }\n    const inverse = field.inverse(sigmaTildeAtZero);\n    return [t.multiply(inverse), r.multiply(inverse)];\n}\nfunction findErrorLocations(field, errorLocator) {\n    // This is a direct application of Chien's search\n    const numErrors = errorLocator.degree();\n    if (numErrors === 1) {\n        return [errorLocator.getCoefficient(1)];\n    }\n    const result = new Array(numErrors);\n    let errorCount = 0;\n    for (let i = 1; i < field.size && errorCount < numErrors; i++) {\n        if (errorLocator.evaluateAt(i) === 0) {\n            result[errorCount] = field.inverse(i);\n            errorCount++;\n        }\n    }\n    if (errorCount !== numErrors) {\n        return null;\n    }\n    return result;\n}\nfunction findErrorMagnitudes(field, errorEvaluator, errorLocations) {\n    // This is directly applying Forney's Formula\n    const s = errorLocations.length;\n    const result = new Array(s);\n    for (let i = 0; i < s; i++) {\n        const xiInverse = field.inverse(errorLocations[i]);\n        let denominator = 1;\n        for (let j = 0; j < s; j++) {\n            if (i !== j) {\n                denominator = field.multiply(denominator, addOrSubtractGF(1, field.multiply(errorLocations[j], xiInverse)));\n            }\n        }\n        result[i] = field.multiply(errorEvaluator.evaluateAt(xiInverse), field.inverse(denominator));\n        if (field.generatorBase !== 0) {\n            result[i] = field.multiply(result[i], xiInverse);\n        }\n    }\n    return result;\n}\nfunction decode$1(bytes, twoS) {\n    const outputBytes = new Uint8ClampedArray(bytes.length);\n    outputBytes.set(bytes);\n    const field = new GenericGF(0x011D, 256, 0); // x^8 + x^4 + x^3 + x^2 + 1\n    const poly = new GenericGFPoly(field, outputBytes);\n    const syndromeCoefficients = new Uint8ClampedArray(twoS);\n    let error = false;\n    for (let s = 0; s < twoS; s++) {\n        const evaluation = poly.evaluateAt(field.exp(s + field.generatorBase));\n        syndromeCoefficients[syndromeCoefficients.length - 1 - s] = evaluation;\n        if (evaluation !== 0) {\n            error = true;\n        }\n    }\n    if (!error) {\n        return outputBytes;\n    }\n    const syndrome = new GenericGFPoly(field, syndromeCoefficients);\n    const sigmaOmega = runEuclideanAlgorithm(field, field.buildMonomial(twoS, 1), syndrome, twoS);\n    if (sigmaOmega === null) {\n        return null;\n    }\n    const errorLocations = findErrorLocations(field, sigmaOmega[0]);\n    if (errorLocations == null) {\n        return null;\n    }\n    const errorMagnitudes = findErrorMagnitudes(field, sigmaOmega[1], errorLocations);\n    for (let i = 0; i < errorLocations.length; i++) {\n        const position = outputBytes.length - 1 - field.log(errorLocations[i]);\n        if (position < 0) {\n            return null;\n        }\n        outputBytes[position] = addOrSubtractGF(outputBytes[position], errorMagnitudes[i]);\n    }\n    return outputBytes;\n}\n\nconst VERSIONS = [\n    {\n        infoBits: null,\n        versionNumber: 1,\n        alignmentPatternCenters: [],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 7,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 19 }],\n            },\n            {\n                ecCodewordsPerBlock: 10,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 16 }],\n            },\n            {\n                ecCodewordsPerBlock: 13,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 13 }],\n            },\n            {\n                ecCodewordsPerBlock: 17,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 9 }],\n            },\n        ],\n    },\n    {\n        infoBits: null,\n        versionNumber: 2,\n        alignmentPatternCenters: [6, 18],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 10,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 34 }],\n            },\n            {\n                ecCodewordsPerBlock: 16,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 28 }],\n            },\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 22 }],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 16 }],\n            },\n        ],\n    },\n    {\n        infoBits: null,\n        versionNumber: 3,\n        alignmentPatternCenters: [6, 22],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 15,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 55 }],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 44 }],\n            },\n            {\n                ecCodewordsPerBlock: 18,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 17 }],\n            },\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 13 }],\n            },\n        ],\n    },\n    {\n        infoBits: null,\n        versionNumber: 4,\n        alignmentPatternCenters: [6, 26],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 20,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 80 }],\n            },\n            {\n                ecCodewordsPerBlock: 18,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 32 }],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 24 }],\n            },\n            {\n                ecCodewordsPerBlock: 16,\n                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 9 }],\n            },\n        ],\n    },\n    {\n        infoBits: null,\n        versionNumber: 5,\n        alignmentPatternCenters: [6, 30],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 108 }],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 43 }],\n            },\n            {\n                ecCodewordsPerBlock: 18,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 16 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 11 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 12 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: null,\n        versionNumber: 6,\n        alignmentPatternCenters: [6, 34],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 18,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 68 }],\n            },\n            {\n                ecCodewordsPerBlock: 16,\n                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 27 }],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 19 }],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 15 }],\n            },\n        ],\n    },\n    {\n        infoBits: 0x07C94,\n        versionNumber: 7,\n        alignmentPatternCenters: [6, 22, 38],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 20,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 78 }],\n            },\n            {\n                ecCodewordsPerBlock: 18,\n                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 31 }],\n            },\n            {\n                ecCodewordsPerBlock: 18,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 14 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 15 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 13 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 14 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x085BC,\n        versionNumber: 8,\n        alignmentPatternCenters: [6, 24, 42],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 97 }],\n            },\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 38 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 39 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 18 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 19 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 14 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 15 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x09A99,\n        versionNumber: 9,\n        alignmentPatternCenters: [6, 26, 46],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 116 }],\n            },\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 36 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 37 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 20,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 16 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 17 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 12 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 13 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x0A4D3,\n        versionNumber: 10,\n        alignmentPatternCenters: [6, 28, 50],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 18,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 68 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 69 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 43 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 44 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 6, dataCodewordsPerBlock: 19 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 20 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 6, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x0BBF6,\n        versionNumber: 11,\n        alignmentPatternCenters: [6, 30, 54],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 20,\n                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 81 }],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 1, dataCodewordsPerBlock: 50 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 51 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 22 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 23 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 12 },\n                    { numBlocks: 8, dataCodewordsPerBlock: 13 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x0C762,\n        versionNumber: 12,\n        alignmentPatternCenters: [6, 32, 58],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 92 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 93 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                    { numBlocks: 6, dataCodewordsPerBlock: 36 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 37 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 20 },\n                    { numBlocks: 6, dataCodewordsPerBlock: 21 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 7, dataCodewordsPerBlock: 14 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 15 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x0D847,\n        versionNumber: 13,\n        alignmentPatternCenters: [6, 34, 62],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 107 }],\n            },\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                    { numBlocks: 8, dataCodewordsPerBlock: 37 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 38 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 8, dataCodewordsPerBlock: 20 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 21 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                    { numBlocks: 12, dataCodewordsPerBlock: 11 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 12 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x0E60D,\n        versionNumber: 14,\n        alignmentPatternCenters: [6, 26, 46, 66],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 115 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 116 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 40 },\n                    { numBlocks: 5, dataCodewordsPerBlock: 41 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 20,\n                ecBlocks: [\n                    { numBlocks: 11, dataCodewordsPerBlock: 16 },\n                    { numBlocks: 5, dataCodewordsPerBlock: 17 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 11, dataCodewordsPerBlock: 12 },\n                    { numBlocks: 5, dataCodewordsPerBlock: 13 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x0F928,\n        versionNumber: 15,\n        alignmentPatternCenters: [6, 26, 48, 70],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                    { numBlocks: 5, dataCodewordsPerBlock: 87 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 88 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 5, dataCodewordsPerBlock: 41 },\n                    { numBlocks: 5, dataCodewordsPerBlock: 42 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 5, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 7, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 11, dataCodewordsPerBlock: 12 },\n                    { numBlocks: 7, dataCodewordsPerBlock: 13 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x10B78,\n        versionNumber: 16,\n        alignmentPatternCenters: [6, 26, 50, 74],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 5, dataCodewordsPerBlock: 98 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 99 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 7, dataCodewordsPerBlock: 45 },\n                    { numBlocks: 3, dataCodewordsPerBlock: 46 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 15, dataCodewordsPerBlock: 19 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 20 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 13, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x1145D,\n        versionNumber: 17,\n        alignmentPatternCenters: [6, 30, 54, 78],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 1, dataCodewordsPerBlock: 107 },\n                    { numBlocks: 5, dataCodewordsPerBlock: 108 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 10, dataCodewordsPerBlock: 46 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 47 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 1, dataCodewordsPerBlock: 22 },\n                    { numBlocks: 15, dataCodewordsPerBlock: 23 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 14 },\n                    { numBlocks: 17, dataCodewordsPerBlock: 15 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x12A17,\n        versionNumber: 18,\n        alignmentPatternCenters: [6, 30, 56, 82],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 5, dataCodewordsPerBlock: 120 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 121 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 9, dataCodewordsPerBlock: 43 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 44 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 17, dataCodewordsPerBlock: 22 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 23 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 14 },\n                    { numBlocks: 19, dataCodewordsPerBlock: 15 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x13532,\n        versionNumber: 19,\n        alignmentPatternCenters: [6, 30, 58, 86],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 113 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 114 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 44 },\n                    { numBlocks: 11, dataCodewordsPerBlock: 45 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 17, dataCodewordsPerBlock: 21 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 22 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 9, dataCodewordsPerBlock: 13 },\n                    { numBlocks: 16, dataCodewordsPerBlock: 14 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x149A6,\n        versionNumber: 20,\n        alignmentPatternCenters: [6, 34, 62, 90],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 107 },\n                    { numBlocks: 5, dataCodewordsPerBlock: 108 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 41 },\n                    { numBlocks: 13, dataCodewordsPerBlock: 42 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 15, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 5, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 15, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 10, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x15683,\n        versionNumber: 21,\n        alignmentPatternCenters: [6, 28, 50, 72, 94],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 116 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 117 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [{ numBlocks: 17, dataCodewordsPerBlock: 42 }],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 17, dataCodewordsPerBlock: 22 },\n                    { numBlocks: 6, dataCodewordsPerBlock: 23 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 19, dataCodewordsPerBlock: 16 },\n                    { numBlocks: 6, dataCodewordsPerBlock: 17 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x168C9,\n        versionNumber: 22,\n        alignmentPatternCenters: [6, 26, 50, 74, 98],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 111 },\n                    { numBlocks: 7, dataCodewordsPerBlock: 112 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [{ numBlocks: 17, dataCodewordsPerBlock: 46 }],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 7, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 16, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [{ numBlocks: 34, dataCodewordsPerBlock: 13 }],\n            },\n        ],\n    },\n    {\n        infoBits: 0x177EC,\n        versionNumber: 23,\n        alignmentPatternCenters: [6, 30, 54, 74, 102],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 121 },\n                    { numBlocks: 5, dataCodewordsPerBlock: 122 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 47 },\n                    { numBlocks: 14, dataCodewordsPerBlock: 48 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 11, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 14, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 16, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 14, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x18EC4,\n        versionNumber: 24,\n        alignmentPatternCenters: [6, 28, 54, 80, 106],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 6, dataCodewordsPerBlock: 117 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 118 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 6, dataCodewordsPerBlock: 45 },\n                    { numBlocks: 14, dataCodewordsPerBlock: 46 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 11, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 16, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 30, dataCodewordsPerBlock: 16 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 17 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x191E1,\n        versionNumber: 25,\n        alignmentPatternCenters: [6, 32, 58, 84, 110],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 8, dataCodewordsPerBlock: 106 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 107 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 8, dataCodewordsPerBlock: 47 },\n                    { numBlocks: 13, dataCodewordsPerBlock: 48 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 7, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 22, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 22, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 13, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x1AFAB,\n        versionNumber: 26,\n        alignmentPatternCenters: [6, 30, 58, 86, 114],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 10, dataCodewordsPerBlock: 114 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 115 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 19, dataCodewordsPerBlock: 46 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 47 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 28, dataCodewordsPerBlock: 22 },\n                    { numBlocks: 6, dataCodewordsPerBlock: 23 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 33, dataCodewordsPerBlock: 16 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 17 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x1B08E,\n        versionNumber: 27,\n        alignmentPatternCenters: [6, 34, 62, 90, 118],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 8, dataCodewordsPerBlock: 122 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 123 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 22, dataCodewordsPerBlock: 45 },\n                    { numBlocks: 3, dataCodewordsPerBlock: 46 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 8, dataCodewordsPerBlock: 23 },\n                    { numBlocks: 26, dataCodewordsPerBlock: 24 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 12, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 28, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x1CC1A,\n        versionNumber: 28,\n        alignmentPatternCenters: [6, 26, 50, 74, 98, 122],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 117 },\n                    { numBlocks: 10, dataCodewordsPerBlock: 118 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 45 },\n                    { numBlocks: 23, dataCodewordsPerBlock: 46 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 31, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 11, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 31, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x1D33F,\n        versionNumber: 29,\n        alignmentPatternCenters: [6, 30, 54, 78, 102, 126],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 7, dataCodewordsPerBlock: 116 },\n                    { numBlocks: 7, dataCodewordsPerBlock: 117 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 21, dataCodewordsPerBlock: 45 },\n                    { numBlocks: 7, dataCodewordsPerBlock: 46 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 1, dataCodewordsPerBlock: 23 },\n                    { numBlocks: 37, dataCodewordsPerBlock: 24 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 19, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 26, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x1ED75,\n        versionNumber: 30,\n        alignmentPatternCenters: [6, 26, 52, 78, 104, 130],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 5, dataCodewordsPerBlock: 115 },\n                    { numBlocks: 10, dataCodewordsPerBlock: 116 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 19, dataCodewordsPerBlock: 47 },\n                    { numBlocks: 10, dataCodewordsPerBlock: 48 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 15, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 25, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 23, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 25, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x1F250,\n        versionNumber: 31,\n        alignmentPatternCenters: [6, 30, 56, 82, 108, 134],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 13, dataCodewordsPerBlock: 115 },\n                    { numBlocks: 3, dataCodewordsPerBlock: 116 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 46 },\n                    { numBlocks: 29, dataCodewordsPerBlock: 47 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 42, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 23, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 28, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x209D5,\n        versionNumber: 32,\n        alignmentPatternCenters: [6, 34, 60, 86, 112, 138],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [{ numBlocks: 17, dataCodewordsPerBlock: 115 }],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 10, dataCodewordsPerBlock: 46 },\n                    { numBlocks: 23, dataCodewordsPerBlock: 47 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 10, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 35, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 19, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 35, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x216F0,\n        versionNumber: 33,\n        alignmentPatternCenters: [6, 30, 58, 86, 114, 142],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 17, dataCodewordsPerBlock: 115 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 116 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 14, dataCodewordsPerBlock: 46 },\n                    { numBlocks: 21, dataCodewordsPerBlock: 47 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 29, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 19, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 11, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 46, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x228BA,\n        versionNumber: 34,\n        alignmentPatternCenters: [6, 34, 62, 90, 118, 146],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 13, dataCodewordsPerBlock: 115 },\n                    { numBlocks: 6, dataCodewordsPerBlock: 116 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 14, dataCodewordsPerBlock: 46 },\n                    { numBlocks: 23, dataCodewordsPerBlock: 47 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 44, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 7, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 59, dataCodewordsPerBlock: 16 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 17 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x2379F,\n        versionNumber: 35,\n        alignmentPatternCenters: [6, 30, 54, 78, 102, 126, 150],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 12, dataCodewordsPerBlock: 121 },\n                    { numBlocks: 7, dataCodewordsPerBlock: 122 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 12, dataCodewordsPerBlock: 47 },\n                    { numBlocks: 26, dataCodewordsPerBlock: 48 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 39, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 14, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 22, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 41, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x24B0B,\n        versionNumber: 36,\n        alignmentPatternCenters: [6, 24, 50, 76, 102, 128, 154],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 6, dataCodewordsPerBlock: 121 },\n                    { numBlocks: 14, dataCodewordsPerBlock: 122 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 6, dataCodewordsPerBlock: 47 },\n                    { numBlocks: 34, dataCodewordsPerBlock: 48 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 46, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 10, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 64, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x2542E,\n        versionNumber: 37,\n        alignmentPatternCenters: [6, 28, 54, 80, 106, 132, 158],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 17, dataCodewordsPerBlock: 122 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 123 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 29, dataCodewordsPerBlock: 46 },\n                    { numBlocks: 14, dataCodewordsPerBlock: 47 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 49, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 10, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 24, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 46, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x26A64,\n        versionNumber: 38,\n        alignmentPatternCenters: [6, 32, 58, 84, 110, 136, 162],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 122 },\n                    { numBlocks: 18, dataCodewordsPerBlock: 123 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 13, dataCodewordsPerBlock: 46 },\n                    { numBlocks: 32, dataCodewordsPerBlock: 47 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 48, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 14, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 42, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 32, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x27541,\n        versionNumber: 39,\n        alignmentPatternCenters: [6, 26, 54, 82, 110, 138, 166],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 20, dataCodewordsPerBlock: 117 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 118 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 40, dataCodewordsPerBlock: 47 },\n                    { numBlocks: 7, dataCodewordsPerBlock: 48 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 43, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 22, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 10, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 67, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x28C69,\n        versionNumber: 40,\n        alignmentPatternCenters: [6, 30, 58, 86, 114, 142, 170],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 19, dataCodewordsPerBlock: 118 },\n                    { numBlocks: 6, dataCodewordsPerBlock: 119 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 18, dataCodewordsPerBlock: 47 },\n                    { numBlocks: 31, dataCodewordsPerBlock: 48 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 34, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 34, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 20, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 61, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n];\n\n// tslint:disable:no-bitwise\nfunction numBitsDiffering(x, y) {\n    let z = x ^ y;\n    let bitCount = 0;\n    while (z) {\n        bitCount++;\n        z &= z - 1;\n    }\n    return bitCount;\n}\nfunction pushBit(bit, byte) {\n    return (byte << 1) | bit;\n}\n// tslint:enable:no-bitwise\nconst FORMAT_INFO_TABLE = [\n    { bits: 0x5412, formatInfo: { errorCorrectionLevel: 1, dataMask: 0 } },\n    { bits: 0x5125, formatInfo: { errorCorrectionLevel: 1, dataMask: 1 } },\n    { bits: 0x5E7C, formatInfo: { errorCorrectionLevel: 1, dataMask: 2 } },\n    { bits: 0x5B4B, formatInfo: { errorCorrectionLevel: 1, dataMask: 3 } },\n    { bits: 0x45F9, formatInfo: { errorCorrectionLevel: 1, dataMask: 4 } },\n    { bits: 0x40CE, formatInfo: { errorCorrectionLevel: 1, dataMask: 5 } },\n    { bits: 0x4F97, formatInfo: { errorCorrectionLevel: 1, dataMask: 6 } },\n    { bits: 0x4AA0, formatInfo: { errorCorrectionLevel: 1, dataMask: 7 } },\n    { bits: 0x77C4, formatInfo: { errorCorrectionLevel: 0, dataMask: 0 } },\n    { bits: 0x72F3, formatInfo: { errorCorrectionLevel: 0, dataMask: 1 } },\n    { bits: 0x7DAA, formatInfo: { errorCorrectionLevel: 0, dataMask: 2 } },\n    { bits: 0x789D, formatInfo: { errorCorrectionLevel: 0, dataMask: 3 } },\n    { bits: 0x662F, formatInfo: { errorCorrectionLevel: 0, dataMask: 4 } },\n    { bits: 0x6318, formatInfo: { errorCorrectionLevel: 0, dataMask: 5 } },\n    { bits: 0x6C41, formatInfo: { errorCorrectionLevel: 0, dataMask: 6 } },\n    { bits: 0x6976, formatInfo: { errorCorrectionLevel: 0, dataMask: 7 } },\n    { bits: 0x1689, formatInfo: { errorCorrectionLevel: 3, dataMask: 0 } },\n    { bits: 0x13BE, formatInfo: { errorCorrectionLevel: 3, dataMask: 1 } },\n    { bits: 0x1CE7, formatInfo: { errorCorrectionLevel: 3, dataMask: 2 } },\n    { bits: 0x19D0, formatInfo: { errorCorrectionLevel: 3, dataMask: 3 } },\n    { bits: 0x0762, formatInfo: { errorCorrectionLevel: 3, dataMask: 4 } },\n    { bits: 0x0255, formatInfo: { errorCorrectionLevel: 3, dataMask: 5 } },\n    { bits: 0x0D0C, formatInfo: { errorCorrectionLevel: 3, dataMask: 6 } },\n    { bits: 0x083B, formatInfo: { errorCorrectionLevel: 3, dataMask: 7 } },\n    { bits: 0x355F, formatInfo: { errorCorrectionLevel: 2, dataMask: 0 } },\n    { bits: 0x3068, formatInfo: { errorCorrectionLevel: 2, dataMask: 1 } },\n    { bits: 0x3F31, formatInfo: { errorCorrectionLevel: 2, dataMask: 2 } },\n    { bits: 0x3A06, formatInfo: { errorCorrectionLevel: 2, dataMask: 3 } },\n    { bits: 0x24B4, formatInfo: { errorCorrectionLevel: 2, dataMask: 4 } },\n    { bits: 0x2183, formatInfo: { errorCorrectionLevel: 2, dataMask: 5 } },\n    { bits: 0x2EDA, formatInfo: { errorCorrectionLevel: 2, dataMask: 6 } },\n    { bits: 0x2BED, formatInfo: { errorCorrectionLevel: 2, dataMask: 7 } },\n];\nconst DATA_MASKS = [\n    (p) => ((p.y + p.x) % 2) === 0,\n    (p) => (p.y % 2) === 0,\n    (p) => p.x % 3 === 0,\n    (p) => (p.y + p.x) % 3 === 0,\n    (p) => (Math.floor(p.y / 2) + Math.floor(p.x / 3)) % 2 === 0,\n    (p) => ((p.x * p.y) % 2) + ((p.x * p.y) % 3) === 0,\n    (p) => ((((p.y * p.x) % 2) + (p.y * p.x) % 3) % 2) === 0,\n    (p) => ((((p.y + p.x) % 2) + (p.y * p.x) % 3) % 2) === 0,\n];\nfunction buildFunctionPatternMask(version) {\n    const dimension = 17 + 4 * version.versionNumber;\n    const matrix = BitMatrix.createEmpty(dimension, dimension);\n    matrix.setRegion(0, 0, 9, 9, true); // Top left finder pattern + separator + format\n    matrix.setRegion(dimension - 8, 0, 8, 9, true); // Top right finder pattern + separator + format\n    matrix.setRegion(0, dimension - 8, 9, 8, true); // Bottom left finder pattern + separator + format\n    // Alignment patterns\n    for (const x of version.alignmentPatternCenters) {\n        for (const y of version.alignmentPatternCenters) {\n            if (!(x === 6 && y === 6 || x === 6 && y === dimension - 7 || x === dimension - 7 && y === 6)) {\n                matrix.setRegion(x - 2, y - 2, 5, 5, true);\n            }\n        }\n    }\n    matrix.setRegion(6, 9, 1, dimension - 17, true); // Vertical timing pattern\n    matrix.setRegion(9, 6, dimension - 17, 1, true); // Horizontal timing pattern\n    if (version.versionNumber > 6) {\n        matrix.setRegion(dimension - 11, 0, 3, 6, true); // Version info, top right\n        matrix.setRegion(0, dimension - 11, 6, 3, true); // Version info, bottom left\n    }\n    return matrix;\n}\nfunction readCodewords(matrix, version, formatInfo) {\n    const dataMask = DATA_MASKS[formatInfo.dataMask];\n    const dimension = matrix.height;\n    const functionPatternMask = buildFunctionPatternMask(version);\n    const codewords = [];\n    let currentByte = 0;\n    let bitsRead = 0;\n    // Read columns in pairs, from right to left\n    let readingUp = true;\n    for (let columnIndex = dimension - 1; columnIndex > 0; columnIndex -= 2) {\n        if (columnIndex === 6) { // Skip whole column with vertical alignment pattern;\n            columnIndex--;\n        }\n        for (let i = 0; i < dimension; i++) {\n            const y = readingUp ? dimension - 1 - i : i;\n            for (let columnOffset = 0; columnOffset < 2; columnOffset++) {\n                const x = columnIndex - columnOffset;\n                if (!functionPatternMask.get(x, y)) {\n                    bitsRead++;\n                    let bit = matrix.get(x, y);\n                    if (dataMask({ y, x })) {\n                        bit = !bit;\n                    }\n                    currentByte = pushBit(bit, currentByte);\n                    if (bitsRead === 8) { // Whole bytes\n                        codewords.push(currentByte);\n                        bitsRead = 0;\n                        currentByte = 0;\n                    }\n                }\n            }\n        }\n        readingUp = !readingUp;\n    }\n    return codewords;\n}\nfunction readVersion(matrix) {\n    const dimension = matrix.height;\n    const provisionalVersion = Math.floor((dimension - 17) / 4);\n    if (provisionalVersion <= 6) { // 6 and under dont have version info in the QR code\n        return VERSIONS[provisionalVersion - 1];\n    }\n    let topRightVersionBits = 0;\n    for (let y = 5; y >= 0; y--) {\n        for (let x = dimension - 9; x >= dimension - 11; x--) {\n            topRightVersionBits = pushBit(matrix.get(x, y), topRightVersionBits);\n        }\n    }\n    let bottomLeftVersionBits = 0;\n    for (let x = 5; x >= 0; x--) {\n        for (let y = dimension - 9; y >= dimension - 11; y--) {\n            bottomLeftVersionBits = pushBit(matrix.get(x, y), bottomLeftVersionBits);\n        }\n    }\n    let bestDifference = Infinity;\n    let bestVersion;\n    for (const version of VERSIONS) {\n        if (version.infoBits === topRightVersionBits || version.infoBits === bottomLeftVersionBits) {\n            return version;\n        }\n        let difference = numBitsDiffering(topRightVersionBits, version.infoBits);\n        if (difference < bestDifference) {\n            bestVersion = version;\n            bestDifference = difference;\n        }\n        difference = numBitsDiffering(bottomLeftVersionBits, version.infoBits);\n        if (difference < bestDifference) {\n            bestVersion = version;\n            bestDifference = difference;\n        }\n    }\n    // We can tolerate up to 3 bits of error since no two version info codewords will\n    // differ in less than 8 bits.\n    if (bestDifference <= 3) {\n        return bestVersion;\n    }\n}\nfunction readFormatInformation(matrix) {\n    let topLeftFormatInfoBits = 0;\n    for (let x = 0; x <= 8; x++) {\n        if (x !== 6) { // Skip timing pattern bit\n            topLeftFormatInfoBits = pushBit(matrix.get(x, 8), topLeftFormatInfoBits);\n        }\n    }\n    for (let y = 7; y >= 0; y--) {\n        if (y !== 6) { // Skip timing pattern bit\n            topLeftFormatInfoBits = pushBit(matrix.get(8, y), topLeftFormatInfoBits);\n        }\n    }\n    const dimension = matrix.height;\n    let topRightBottomRightFormatInfoBits = 0;\n    for (let y = dimension - 1; y >= dimension - 7; y--) { // bottom left\n        topRightBottomRightFormatInfoBits = pushBit(matrix.get(8, y), topRightBottomRightFormatInfoBits);\n    }\n    for (let x = dimension - 8; x < dimension; x++) { // top right\n        topRightBottomRightFormatInfoBits = pushBit(matrix.get(x, 8), topRightBottomRightFormatInfoBits);\n    }\n    let bestDifference = Infinity;\n    let bestFormatInfo = null;\n    for (const { bits, formatInfo } of FORMAT_INFO_TABLE) {\n        if (bits === topLeftFormatInfoBits || bits === topRightBottomRightFormatInfoBits) {\n            return formatInfo;\n        }\n        let difference = numBitsDiffering(topLeftFormatInfoBits, bits);\n        if (difference < bestDifference) {\n            bestFormatInfo = formatInfo;\n            bestDifference = difference;\n        }\n        if (topLeftFormatInfoBits !== topRightBottomRightFormatInfoBits) { // also try the other option\n            difference = numBitsDiffering(topRightBottomRightFormatInfoBits, bits);\n            if (difference < bestDifference) {\n                bestFormatInfo = formatInfo;\n                bestDifference = difference;\n            }\n        }\n    }\n    // Hamming distance of the 32 masked codes is 7, by construction, so <= 3 bits differing means we found a match\n    if (bestDifference <= 3) {\n        return bestFormatInfo;\n    }\n    return null;\n}\nfunction getDataBlocks(codewords, version, ecLevel) {\n    const ecInfo = version.errorCorrectionLevels[ecLevel];\n    const dataBlocks = [];\n    let totalCodewords = 0;\n    ecInfo.ecBlocks.forEach(block => {\n        for (let i = 0; i < block.numBlocks; i++) {\n            dataBlocks.push({ numDataCodewords: block.dataCodewordsPerBlock, codewords: [] });\n            totalCodewords += block.dataCodewordsPerBlock + ecInfo.ecCodewordsPerBlock;\n        }\n    });\n    // In some cases the QR code will be malformed enough that we pull off more or less than we should.\n    // If we pull off less there's nothing we can do.\n    // If we pull off more we can safely truncate\n    if (codewords.length < totalCodewords) {\n        return null;\n    }\n    codewords = codewords.slice(0, totalCodewords);\n    const shortBlockSize = ecInfo.ecBlocks[0].dataCodewordsPerBlock;\n    // Pull codewords to fill the blocks up to the minimum size\n    for (let i = 0; i < shortBlockSize; i++) {\n        for (const dataBlock of dataBlocks) {\n            dataBlock.codewords.push(codewords.shift());\n        }\n    }\n    // If there are any large blocks, pull codewords to fill the last element of those\n    if (ecInfo.ecBlocks.length > 1) {\n        const smallBlockCount = ecInfo.ecBlocks[0].numBlocks;\n        const largeBlockCount = ecInfo.ecBlocks[1].numBlocks;\n        for (let i = 0; i < largeBlockCount; i++) {\n            dataBlocks[smallBlockCount + i].codewords.push(codewords.shift());\n        }\n    }\n    // Add the rest of the codewords to the blocks. These are the error correction codewords.\n    while (codewords.length > 0) {\n        for (const dataBlock of dataBlocks) {\n            dataBlock.codewords.push(codewords.shift());\n        }\n    }\n    return dataBlocks;\n}\nfunction decodeMatrix(matrix) {\n    const version = readVersion(matrix);\n    if (!version) {\n        return null;\n    }\n    const formatInfo = readFormatInformation(matrix);\n    if (!formatInfo) {\n        return null;\n    }\n    const codewords = readCodewords(matrix, version, formatInfo);\n    const dataBlocks = getDataBlocks(codewords, version, formatInfo.errorCorrectionLevel);\n    if (!dataBlocks) {\n        return null;\n    }\n    // Count total number of data bytes\n    const totalBytes = dataBlocks.reduce((a, b) => a + b.numDataCodewords, 0);\n    const resultBytes = new Uint8ClampedArray(totalBytes);\n    let resultIndex = 0;\n    for (const dataBlock of dataBlocks) {\n        const correctedBytes = decode$1(dataBlock.codewords, dataBlock.codewords.length - dataBlock.numDataCodewords);\n        if (!correctedBytes) {\n            return null;\n        }\n        for (let i = 0; i < dataBlock.numDataCodewords; i++) {\n            resultBytes[resultIndex++] = correctedBytes[i];\n        }\n    }\n    try {\n        return decode(resultBytes, version.versionNumber);\n    }\n    catch (_a) {\n        return null;\n    }\n}\nfunction decode$2(matrix) {\n    if (matrix == null) {\n        return null;\n    }\n    const result = decodeMatrix(matrix);\n    if (result) {\n        return result;\n    }\n    // Decoding didn't work, try mirroring the QR across the topLeft -> bottomRight line.\n    for (let x = 0; x < matrix.width; x++) {\n        for (let y = x + 1; y < matrix.height; y++) {\n            if (matrix.get(x, y) !== matrix.get(y, x)) {\n                matrix.set(x, y, !matrix.get(x, y));\n                matrix.set(y, x, !matrix.get(y, x));\n            }\n        }\n    }\n    return decodeMatrix(matrix);\n}\n\nfunction squareToQuadrilateral(p1, p2, p3, p4) {\n    const dx3 = p1.x - p2.x + p3.x - p4.x;\n    const dy3 = p1.y - p2.y + p3.y - p4.y;\n    if (dx3 === 0 && dy3 === 0) { // Affine\n        return {\n            a11: p2.x - p1.x,\n            a12: p2.y - p1.y,\n            a13: 0,\n            a21: p3.x - p2.x,\n            a22: p3.y - p2.y,\n            a23: 0,\n            a31: p1.x,\n            a32: p1.y,\n            a33: 1,\n        };\n    }\n    else {\n        const dx1 = p2.x - p3.x;\n        const dx2 = p4.x - p3.x;\n        const dy1 = p2.y - p3.y;\n        const dy2 = p4.y - p3.y;\n        const denominator = dx1 * dy2 - dx2 * dy1;\n        const a13 = (dx3 * dy2 - dx2 * dy3) / denominator;\n        const a23 = (dx1 * dy3 - dx3 * dy1) / denominator;\n        return {\n            a11: p2.x - p1.x + a13 * p2.x,\n            a12: p2.y - p1.y + a13 * p2.y,\n            a13,\n            a21: p4.x - p1.x + a23 * p4.x,\n            a22: p4.y - p1.y + a23 * p4.y,\n            a23,\n            a31: p1.x,\n            a32: p1.y,\n            a33: 1,\n        };\n    }\n}\nfunction quadrilateralToSquare(p1, p2, p3, p4) {\n    // Here, the adjoint serves as the inverse:\n    const sToQ = squareToQuadrilateral(p1, p2, p3, p4);\n    return {\n        a11: sToQ.a22 * sToQ.a33 - sToQ.a23 * sToQ.a32,\n        a12: sToQ.a13 * sToQ.a32 - sToQ.a12 * sToQ.a33,\n        a13: sToQ.a12 * sToQ.a23 - sToQ.a13 * sToQ.a22,\n        a21: sToQ.a23 * sToQ.a31 - sToQ.a21 * sToQ.a33,\n        a22: sToQ.a11 * sToQ.a33 - sToQ.a13 * sToQ.a31,\n        a23: sToQ.a13 * sToQ.a21 - sToQ.a11 * sToQ.a23,\n        a31: sToQ.a21 * sToQ.a32 - sToQ.a22 * sToQ.a31,\n        a32: sToQ.a12 * sToQ.a31 - sToQ.a11 * sToQ.a32,\n        a33: sToQ.a11 * sToQ.a22 - sToQ.a12 * sToQ.a21,\n    };\n}\nfunction times(a, b) {\n    return {\n        a11: a.a11 * b.a11 + a.a21 * b.a12 + a.a31 * b.a13,\n        a12: a.a12 * b.a11 + a.a22 * b.a12 + a.a32 * b.a13,\n        a13: a.a13 * b.a11 + a.a23 * b.a12 + a.a33 * b.a13,\n        a21: a.a11 * b.a21 + a.a21 * b.a22 + a.a31 * b.a23,\n        a22: a.a12 * b.a21 + a.a22 * b.a22 + a.a32 * b.a23,\n        a23: a.a13 * b.a21 + a.a23 * b.a22 + a.a33 * b.a23,\n        a31: a.a11 * b.a31 + a.a21 * b.a32 + a.a31 * b.a33,\n        a32: a.a12 * b.a31 + a.a22 * b.a32 + a.a32 * b.a33,\n        a33: a.a13 * b.a31 + a.a23 * b.a32 + a.a33 * b.a33,\n    };\n}\nfunction extract(image, location) {\n    const qToS = quadrilateralToSquare({ x: 3.5, y: 3.5 }, { x: location.dimension - 3.5, y: 3.5 }, { x: location.dimension - 6.5, y: location.dimension - 6.5 }, { x: 3.5, y: location.dimension - 3.5 });\n    const sToQ = squareToQuadrilateral(location.topLeft, location.topRight, location.alignmentPattern, location.bottomLeft);\n    const transform = times(sToQ, qToS);\n    const matrix = BitMatrix.createEmpty(location.dimension, location.dimension);\n    const mappingFunction = (x, y) => {\n        const denominator = transform.a13 * x + transform.a23 * y + transform.a33;\n        return {\n            x: (transform.a11 * x + transform.a21 * y + transform.a31) / denominator,\n            y: (transform.a12 * x + transform.a22 * y + transform.a32) / denominator,\n        };\n    };\n    for (let y = 0; y < location.dimension; y++) {\n        for (let x = 0; x < location.dimension; x++) {\n            const xValue = x + 0.5;\n            const yValue = y + 0.5;\n            const sourcePixel = mappingFunction(xValue, yValue);\n            matrix.set(x, y, image.get(Math.floor(sourcePixel.x), Math.floor(sourcePixel.y)));\n        }\n    }\n    return {\n        matrix,\n        mappingFunction,\n    };\n}\n\nconst MAX_FINDERPATTERNS_TO_SEARCH = 4;\nconst MIN_QUAD_RATIO = 0.5;\nconst MAX_QUAD_RATIO = 1.5;\nconst distance = (a, b) => Math.sqrt(Math.pow((b.x - a.x), 2) + Math.pow((b.y - a.y), 2));\nfunction sum(values) {\n    return values.reduce((a, b) => a + b);\n}\n// Takes three finder patterns and organizes them into topLeft, topRight, etc\nfunction reorderFinderPatterns(pattern1, pattern2, pattern3) {\n    // Find distances between pattern centers\n    const oneTwoDistance = distance(pattern1, pattern2);\n    const twoThreeDistance = distance(pattern2, pattern3);\n    const oneThreeDistance = distance(pattern1, pattern3);\n    let bottomLeft;\n    let topLeft;\n    let topRight;\n    // Assume one closest to other two is B; A and C will just be guesses at first\n    if (twoThreeDistance >= oneTwoDistance && twoThreeDistance >= oneThreeDistance) {\n        [bottomLeft, topLeft, topRight] = [pattern2, pattern1, pattern3];\n    }\n    else if (oneThreeDistance >= twoThreeDistance && oneThreeDistance >= oneTwoDistance) {\n        [bottomLeft, topLeft, topRight] = [pattern1, pattern2, pattern3];\n    }\n    else {\n        [bottomLeft, topLeft, topRight] = [pattern1, pattern3, pattern2];\n    }\n    // Use cross product to figure out whether bottomLeft (A) and topRight (C) are correct or flipped in relation to topLeft (B)\n    // This asks whether BC x BA has a positive z component, which is the arrangement we want. If it's negative, then\n    // we've got it flipped around and should swap topRight and bottomLeft.\n    if (((topRight.x - topLeft.x) * (bottomLeft.y - topLeft.y)) - ((topRight.y - topLeft.y) * (bottomLeft.x - topLeft.x)) < 0) {\n        [bottomLeft, topRight] = [topRight, bottomLeft];\n    }\n    return { bottomLeft, topLeft, topRight };\n}\n// Computes the dimension (number of modules on a side) of the QR Code based on the position of the finder patterns\nfunction computeDimension(topLeft, topRight, bottomLeft, matrix) {\n    const moduleSize = (sum(countBlackWhiteRun(topLeft, bottomLeft, matrix, 5)) / 7 + // Divide by 7 since the ratio is 1:1:3:1:1\n        sum(countBlackWhiteRun(topLeft, topRight, matrix, 5)) / 7 +\n        sum(countBlackWhiteRun(bottomLeft, topLeft, matrix, 5)) / 7 +\n        sum(countBlackWhiteRun(topRight, topLeft, matrix, 5)) / 7) / 4;\n    if (moduleSize < 1) {\n        throw new Error(\"Invalid module size\");\n    }\n    const topDimension = Math.round(distance(topLeft, topRight) / moduleSize);\n    const sideDimension = Math.round(distance(topLeft, bottomLeft) / moduleSize);\n    let dimension = Math.floor((topDimension + sideDimension) / 2) + 7;\n    switch (dimension % 4) {\n        case 0:\n            dimension++;\n            break;\n        case 2:\n            dimension--;\n            break;\n    }\n    return { dimension, moduleSize };\n}\n// Takes an origin point and an end point and counts the sizes of the black white run from the origin towards the end point.\n// Returns an array of elements, representing the pixel size of the black white run.\n// Uses a variant of http://en.wikipedia.org/wiki/Bresenham's_line_algorithm\nfunction countBlackWhiteRunTowardsPoint(origin, end, matrix, length) {\n    const switchPoints = [{ x: Math.floor(origin.x), y: Math.floor(origin.y) }];\n    const steep = Math.abs(end.y - origin.y) > Math.abs(end.x - origin.x);\n    let fromX;\n    let fromY;\n    let toX;\n    let toY;\n    if (steep) {\n        fromX = Math.floor(origin.y);\n        fromY = Math.floor(origin.x);\n        toX = Math.floor(end.y);\n        toY = Math.floor(end.x);\n    }\n    else {\n        fromX = Math.floor(origin.x);\n        fromY = Math.floor(origin.y);\n        toX = Math.floor(end.x);\n        toY = Math.floor(end.y);\n    }\n    const dx = Math.abs(toX - fromX);\n    const dy = Math.abs(toY - fromY);\n    let error = Math.floor(-dx / 2);\n    const xStep = fromX < toX ? 1 : -1;\n    const yStep = fromY < toY ? 1 : -1;\n    let currentPixel = true;\n    // Loop up until x == toX, but not beyond\n    for (let x = fromX, y = fromY; x !== toX + xStep; x += xStep) {\n        // Does current pixel mean we have moved white to black or vice versa?\n        // Scanning black in state 0,2 and white in state 1, so if we find the wrong\n        // color, advance to next state or end if we are in state 2 already\n        const realX = steep ? y : x;\n        const realY = steep ? x : y;\n        if (matrix.get(realX, realY) !== currentPixel) {\n            currentPixel = !currentPixel;\n            switchPoints.push({ x: realX, y: realY });\n            if (switchPoints.length === length + 1) {\n                break;\n            }\n        }\n        error += dy;\n        if (error > 0) {\n            if (y === toY) {\n                break;\n            }\n            y += yStep;\n            error -= dx;\n        }\n    }\n    const distances = [];\n    for (let i = 0; i < length; i++) {\n        if (switchPoints[i] && switchPoints[i + 1]) {\n            distances.push(distance(switchPoints[i], switchPoints[i + 1]));\n        }\n        else {\n            distances.push(0);\n        }\n    }\n    return distances;\n}\n// Takes an origin point and an end point and counts the sizes of the black white run in the origin point\n// along the line that intersects with the end point. Returns an array of elements, representing the pixel sizes\n// of the black white run. Takes a length which represents the number of switches from black to white to look for.\nfunction countBlackWhiteRun(origin, end, matrix, length) {\n    const rise = end.y - origin.y;\n    const run = end.x - origin.x;\n    const towardsEnd = countBlackWhiteRunTowardsPoint(origin, end, matrix, Math.ceil(length / 2));\n    const awayFromEnd = countBlackWhiteRunTowardsPoint(origin, { x: origin.x - run, y: origin.y - rise }, matrix, Math.ceil(length / 2));\n    const middleValue = towardsEnd.shift() + awayFromEnd.shift() - 1; // Substract one so we don't double count a pixel\n    return awayFromEnd.concat(middleValue).concat(...towardsEnd);\n}\n// Takes in a black white run and an array of expected ratios. Returns the average size of the run as well as the \"error\" -\n// that is the amount the run diverges from the expected ratio\nfunction scoreBlackWhiteRun(sequence, ratios) {\n    const averageSize = sum(sequence) / sum(ratios);\n    let error = 0;\n    ratios.forEach((ratio, i) => {\n        error += Math.pow((sequence[i] - ratio * averageSize), 2);\n    });\n    return { averageSize, error };\n}\n// Takes an X,Y point and an array of sizes and scores the point against those ratios.\n// For example for a finder pattern takes the ratio list of 1:1:3:1:1 and checks horizontal, vertical and diagonal ratios\n// against that.\nfunction scorePattern(point, ratios, matrix) {\n    try {\n        const horizontalRun = countBlackWhiteRun(point, { x: -1, y: point.y }, matrix, ratios.length);\n        const verticalRun = countBlackWhiteRun(point, { x: point.x, y: -1 }, matrix, ratios.length);\n        const topLeftPoint = {\n            x: Math.max(0, point.x - point.y) - 1,\n            y: Math.max(0, point.y - point.x) - 1,\n        };\n        const topLeftBottomRightRun = countBlackWhiteRun(point, topLeftPoint, matrix, ratios.length);\n        const bottomLeftPoint = {\n            x: Math.min(matrix.width, point.x + point.y) + 1,\n            y: Math.min(matrix.height, point.y + point.x) + 1,\n        };\n        const bottomLeftTopRightRun = countBlackWhiteRun(point, bottomLeftPoint, matrix, ratios.length);\n        const horzError = scoreBlackWhiteRun(horizontalRun, ratios);\n        const vertError = scoreBlackWhiteRun(verticalRun, ratios);\n        const diagDownError = scoreBlackWhiteRun(topLeftBottomRightRun, ratios);\n        const diagUpError = scoreBlackWhiteRun(bottomLeftTopRightRun, ratios);\n        const ratioError = Math.sqrt(horzError.error * horzError.error +\n            vertError.error * vertError.error +\n            diagDownError.error * diagDownError.error +\n            diagUpError.error * diagUpError.error);\n        const avgSize = (horzError.averageSize + vertError.averageSize + diagDownError.averageSize + diagUpError.averageSize) / 4;\n        const sizeError = (Math.pow((horzError.averageSize - avgSize), 2) +\n            Math.pow((vertError.averageSize - avgSize), 2) +\n            Math.pow((diagDownError.averageSize - avgSize), 2) +\n            Math.pow((diagUpError.averageSize - avgSize), 2)) / avgSize;\n        return ratioError + sizeError;\n    }\n    catch (_a) {\n        return Infinity;\n    }\n}\nfunction locate(matrix) {\n    const finderPatternQuads = [];\n    let activeFinderPatternQuads = [];\n    const alignmentPatternQuads = [];\n    let activeAlignmentPatternQuads = [];\n    for (let y = 0; y <= matrix.height; y++) {\n        let length = 0;\n        let lastBit = false;\n        let scans = [0, 0, 0, 0, 0];\n        for (let x = -1; x <= matrix.width; x++) {\n            const v = matrix.get(x, y);\n            if (v === lastBit) {\n                length++;\n            }\n            else {\n                scans = [scans[1], scans[2], scans[3], scans[4], length];\n                length = 1;\n                lastBit = v;\n                // Do the last 5 color changes ~ match the expected ratio for a finder pattern? 1:1:3:1:1 of b:w:b:w:b\n                const averageFinderPatternBlocksize = sum(scans) / 7;\n                const validFinderPattern = Math.abs(scans[0] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize &&\n                    Math.abs(scans[1] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize &&\n                    Math.abs(scans[2] - 3 * averageFinderPatternBlocksize) < 3 * averageFinderPatternBlocksize &&\n                    Math.abs(scans[3] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize &&\n                    Math.abs(scans[4] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize &&\n                    !v; // And make sure the current pixel is white since finder patterns are bordered in white\n                // Do the last 3 color changes ~ match the expected ratio for an alignment pattern? 1:1:1 of w:b:w\n                const averageAlignmentPatternBlocksize = sum(scans.slice(-3)) / 3;\n                const validAlignmentPattern = Math.abs(scans[2] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize &&\n                    Math.abs(scans[3] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize &&\n                    Math.abs(scans[4] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize &&\n                    v; // Is the current pixel black since alignment patterns are bordered in black\n                if (validFinderPattern) {\n                    // Compute the start and end x values of the large center black square\n                    const endX = x - scans[3] - scans[4];\n                    const startX = endX - scans[2];\n                    const line = { startX, endX, y };\n                    // Is there a quad directly above the current spot? If so, extend it with the new line. Otherwise, create a new quad with\n                    // that line as the starting point.\n                    const matchingQuads = activeFinderPatternQuads.filter(q => (startX >= q.bottom.startX && startX <= q.bottom.endX) ||\n                        (endX >= q.bottom.startX && startX <= q.bottom.endX) ||\n                        (startX <= q.bottom.startX && endX >= q.bottom.endX && ((scans[2] / (q.bottom.endX - q.bottom.startX)) < MAX_QUAD_RATIO &&\n                            (scans[2] / (q.bottom.endX - q.bottom.startX)) > MIN_QUAD_RATIO)));\n                    if (matchingQuads.length > 0) {\n                        matchingQuads[0].bottom = line;\n                    }\n                    else {\n                        activeFinderPatternQuads.push({ top: line, bottom: line });\n                    }\n                }\n                if (validAlignmentPattern) {\n                    // Compute the start and end x values of the center black square\n                    const endX = x - scans[4];\n                    const startX = endX - scans[3];\n                    const line = { startX, y, endX };\n                    // Is there a quad directly above the current spot? If so, extend it with the new line. Otherwise, create a new quad with\n                    // that line as the starting point.\n                    const matchingQuads = activeAlignmentPatternQuads.filter(q => (startX >= q.bottom.startX && startX <= q.bottom.endX) ||\n                        (endX >= q.bottom.startX && startX <= q.bottom.endX) ||\n                        (startX <= q.bottom.startX && endX >= q.bottom.endX && ((scans[2] / (q.bottom.endX - q.bottom.startX)) < MAX_QUAD_RATIO &&\n                            (scans[2] / (q.bottom.endX - q.bottom.startX)) > MIN_QUAD_RATIO)));\n                    if (matchingQuads.length > 0) {\n                        matchingQuads[0].bottom = line;\n                    }\n                    else {\n                        activeAlignmentPatternQuads.push({ top: line, bottom: line });\n                    }\n                }\n            }\n        }\n        finderPatternQuads.push(...activeFinderPatternQuads.filter(q => q.bottom.y !== y && q.bottom.y - q.top.y >= 2));\n        activeFinderPatternQuads = activeFinderPatternQuads.filter(q => q.bottom.y === y);\n        alignmentPatternQuads.push(...activeAlignmentPatternQuads.filter(q => q.bottom.y !== y));\n        activeAlignmentPatternQuads = activeAlignmentPatternQuads.filter(q => q.bottom.y === y);\n    }\n    finderPatternQuads.push(...activeFinderPatternQuads.filter(q => q.bottom.y - q.top.y >= 2));\n    alignmentPatternQuads.push(...activeAlignmentPatternQuads);\n    const finderPatternGroups = finderPatternQuads\n        .filter(q => q.bottom.y - q.top.y >= 2) // All quads must be at least 2px tall since the center square is larger than a block\n        .map(q => {\n        const x = (q.top.startX + q.top.endX + q.bottom.startX + q.bottom.endX) / 4;\n        const y = (q.top.y + q.bottom.y + 1) / 2;\n        if (!matrix.get(Math.round(x), Math.round(y))) {\n            return;\n        }\n        const lengths = [q.top.endX - q.top.startX, q.bottom.endX - q.bottom.startX, q.bottom.y - q.top.y + 1];\n        const size = sum(lengths) / lengths.length;\n        const score = scorePattern({ x: Math.round(x), y: Math.round(y) }, [1, 1, 3, 1, 1], matrix);\n        return { score, x, y, size };\n    })\n        .filter(q => !!q) // Filter out any rejected quads from above\n        .sort((a, b) => a.score - b.score)\n        // Now take the top finder pattern options and try to find 2 other options with a similar size.\n        .map((point, i, finderPatterns) => {\n        if (i > MAX_FINDERPATTERNS_TO_SEARCH) {\n            return null;\n        }\n        const otherPoints = finderPatterns\n            .filter((p, ii) => i !== ii)\n            .map(p => ({ x: p.x, y: p.y, score: p.score + (Math.pow((p.size - point.size), 2)) / point.size, size: p.size }))\n            .sort((a, b) => a.score - b.score);\n        if (otherPoints.length < 2) {\n            return null;\n        }\n        const score = point.score + otherPoints[0].score + otherPoints[1].score;\n        return { points: [point].concat(otherPoints.slice(0, 2)), score };\n    })\n        .filter(q => !!q) // Filter out any rejected finder patterns from above\n        .sort((a, b) => a.score - b.score);\n    if (finderPatternGroups.length === 0) {\n        return null;\n    }\n    const { topRight, topLeft, bottomLeft } = reorderFinderPatterns(finderPatternGroups[0].points[0], finderPatternGroups[0].points[1], finderPatternGroups[0].points[2]);\n    // Now that we've found the three finder patterns we can determine the blockSize and the size of the QR code.\n    // We'll use these to help find the alignment pattern but also later when we do the extraction.\n    let dimension;\n    let moduleSize;\n    try {\n        ({ dimension, moduleSize } = computeDimension(topLeft, topRight, bottomLeft, matrix));\n    }\n    catch (e) {\n        return null;\n    }\n    // Now find the alignment pattern\n    const bottomRightFinderPattern = {\n        x: topRight.x - topLeft.x + bottomLeft.x,\n        y: topRight.y - topLeft.y + bottomLeft.y,\n    };\n    const modulesBetweenFinderPatterns = ((distance(topLeft, bottomLeft) + distance(topLeft, topRight)) / 2 / moduleSize);\n    const correctionToTopLeft = 1 - (3 / modulesBetweenFinderPatterns);\n    const expectedAlignmentPattern = {\n        x: topLeft.x + correctionToTopLeft * (bottomRightFinderPattern.x - topLeft.x),\n        y: topLeft.y + correctionToTopLeft * (bottomRightFinderPattern.y - topLeft.y),\n    };\n    const alignmentPatterns = alignmentPatternQuads\n        .map(q => {\n        const x = (q.top.startX + q.top.endX + q.bottom.startX + q.bottom.endX) / 4;\n        const y = (q.top.y + q.bottom.y + 1) / 2;\n        if (!matrix.get(Math.floor(x), Math.floor(y))) {\n            return;\n        }\n        const lengths = [q.top.endX - q.top.startX, q.bottom.endX - q.bottom.startX, (q.bottom.y - q.top.y + 1)];\n        const size = sum(lengths) / lengths.length;\n        const sizeScore = scorePattern({ x: Math.floor(x), y: Math.floor(y) }, [1, 1, 1], matrix);\n        const score = sizeScore + distance({ x, y }, expectedAlignmentPattern);\n        return { x, y, score };\n    })\n        .filter(v => !!v)\n        .sort((a, b) => a.score - b.score);\n    // If there are less than 15 modules between finder patterns it's a version 1 QR code and as such has no alignmemnt pattern\n    // so we can only use our best guess.\n    const alignmentPattern = modulesBetweenFinderPatterns >= 15 && alignmentPatterns.length ? alignmentPatterns[0] : expectedAlignmentPattern;\n    return {\n        alignmentPattern: { x: alignmentPattern.x, y: alignmentPattern.y },\n        bottomLeft: { x: bottomLeft.x, y: bottomLeft.y },\n        dimension,\n        topLeft: { x: topLeft.x, y: topLeft.y },\n        topRight: { x: topRight.x, y: topRight.y },\n    };\n}\n\nfunction scan(matrix) {\n    const location = locate(matrix);\n    if (!location) {\n        return null;\n    }\n    const extracted = extract(matrix, location);\n    const decoded = decode$2(extracted.matrix);\n    if (!decoded) {\n        return null;\n    }\n    return {\n        binaryData: decoded.bytes,\n        data: decoded.text,\n        chunks: decoded.chunks,\n        location: {\n            topRightCorner: extracted.mappingFunction(location.dimension, 0),\n            topLeftCorner: extracted.mappingFunction(0, 0),\n            bottomRightCorner: extracted.mappingFunction(location.dimension, location.dimension),\n            bottomLeftCorner: extracted.mappingFunction(0, location.dimension),\n            topRightFinderPattern: location.topRight,\n            topLeftFinderPattern: location.topLeft,\n            bottomLeftFinderPattern: location.bottomLeft,\n            bottomRightAlignmentPattern: location.alignmentPattern,\n        },\n    };\n}\nconst defaultOptions = {\n    inversionAttempts: \"attemptBoth\",\n    greyScaleWeights: {\n        red: 0.2126,\n        green: 0.7152,\n        blue: 0.0722,\n        useIntegerApproximation: false,\n    },\n    canOverwriteImage: true,\n};\nfunction mergeObject(target, src) {\n    Object.keys(src).forEach(opt => {\n        target[opt] = src[opt];\n    });\n}\nfunction jsQR(data, width, height, providedOptions = {}) {\n    const options = Object.create(null);\n    mergeObject(options, defaultOptions);\n    mergeObject(options, providedOptions);\n    const shouldInvert = options.inversionAttempts === \"attemptBoth\" || options.inversionAttempts === \"invertFirst\";\n    const tryInvertedFirst = options.inversionAttempts === \"onlyInvert\" || options.inversionAttempts === \"invertFirst\";\n    const { binarized, inverted } = binarize(data, width, height, shouldInvert, options.greyScaleWeights, options.canOverwriteImage);\n    let result = scan(tryInvertedFirst ? inverted : binarized);\n    if (!result && (options.inversionAttempts === \"attemptBoth\" || options.inversionAttempts === \"invertFirst\")) {\n        result = scan(tryInvertedFirst ? binarized : inverted);\n    }\n    return result;\n}\njsQR.default = jsQR;\n\nexport default jsQR;\n//# sourceMappingURL=jsQR.js.map\n","// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE\n\nimport * as JsQr$QueerLoop from \"./JsQr.bs.js\";\n\nself.onmessage = (function (e) {\n    var match = e.data;\n    var maybeCode = JsQr$QueerLoop.jsQR(match[0], match[1], match[2], match[3]);\n    postMessage(maybeCode);\n    return /* () */0;\n  });\n\nexport {\n  \n}\n/*  Not a pure module */\n","// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE\n\nimport * as $$Array from \"../node_modules/bs-platform/lib/es6/array.js\";\nimport * as JsqrEs6 from \"jsqr-es6\";\nimport * as Pervasives from \"../node_modules/bs-platform/lib/es6/pervasives.js\";\nimport * as Caml_option from \"../node_modules/bs-platform/lib/es6/caml_option.js\";\n\nfunction getPointAsFloats(p) {\n  return /* tuple */[\n          p.x,\n          p.y\n        ];\n}\n\nfunction getMinAndMax(ary) {\n  var currentMin = {\n    contents: Pervasives.infinity\n  };\n  var currentMax = {\n    contents: Pervasives.neg_infinity\n  };\n  $$Array.iter((function (x) {\n          if (x < currentMin.contents) {\n            currentMin.contents = x;\n          }\n          if (x > currentMax.contents) {\n            currentMax.contents = x;\n            return /* () */0;\n          } else {\n            return 0;\n          }\n        }), ary);\n  return /* tuple */[\n          currentMin.contents,\n          currentMax.contents\n        ];\n}\n\nfunction extractAABB(loc) {\n  var match = getPointAsFloats(loc.topLeftCorner);\n  var match$1 = getPointAsFloats(loc.topRightCorner);\n  var match$2 = getPointAsFloats(loc.bottomRightCorner);\n  var match$3 = getPointAsFloats(loc.bottomLeftCorner);\n  var match$4 = getMinAndMax(/* array */[\n        match[0],\n        match$1[0],\n        match$2[0],\n        match$3[0]\n      ]);\n  var minX = match$4[0];\n  var match$5 = getMinAndMax(/* array */[\n        match[1],\n        match$1[1],\n        match$2[1],\n        match$3[1]\n      ]);\n  var minY = match$5[0];\n  return {\n          x: minX | 0,\n          y: minY | 0,\n          w: Math.ceil(match$4[1] - minX) | 0,\n          h: Math.ceil(match$5[1] - minY) | 0\n        };\n}\n\nfunction string_of_invertOptions(param) {\n  switch (param) {\n    case /* AttemptBoth */0 :\n        return \"attemptBoth\";\n    case /* DontInvert */1 :\n        return \"dontInvert\";\n    case /* OnlyInvert */2 :\n        return \"onlyInvert\";\n    case /* InvertFirst */3 :\n        return \"invertFirst\";\n    \n  }\n}\n\nfunction jsQR(d, w, h, invertOptions) {\n  var optString = string_of_invertOptions(invertOptions);\n  return Caml_option.nullable_to_opt(JsqrEs6.default(d, w, h, {\n                  inversionAttempts: optString,\n                  canOverwriteImage: true\n                }));\n}\n\nexport {\n  getPointAsFloats ,\n  getMinAndMax ,\n  extractAABB ,\n  string_of_invertOptions ,\n  jsQR ,\n  \n}\n/* jsqr-es6 Not a pure module */\n"],"names":["undefinedHeader","nullable_to_opt","x","undefined","block","tag","nid","block$1","some","BitMatrix","createEmpty","width","height","Uint8ClampedArray","constructor","data","this","length","get","y","set","v","setRegion","left","top","numBetween","value","min","max","Matrix","buffer","bufferSize","Error","BitStream","bytes","byteOffset","bitOffset","readBits","numBits","available","toString","result","bitsLeft","toRead","bitsToNotRead","mask","Mode","ModeByte","decodeNumeric","stream","size","text","characterCountSize","num","a","Math","floor","b","c","push","AlphanumericCharacterCodes","decodeAlphanumeric","charCodeAt","decodeByte","i","decodeURIComponent","map","substr","join","_a","decodeKanji","k","TextDecoder","decode","Uint8Array","from","GenericGFPoly","field","coefficients","coefficientsLength","firstNonZero","zero","degree","isZero","getCoefficient","addOrSubtract","other","smallerCoefficients","largerCoefficients","sumDiff","lengthDiff","addOrSubtractGF","multiply","scalar","product","multiplyPoly","aCoefficients","aLength","bCoefficients","bLength","aCoeff","j","multiplyByMonomial","coefficient","evaluateAt","forEach","GenericGF","primitive","genBase","generatorBase","expTable","Array","logTable","one","inverse","buildMonomial","log","exp","decode$1","twoS","outputBytes","poly","syndromeCoefficients","error","s","evaluation","syndrome","sigmaOmega","R","rLast","r","tLast","t","rLastLast","tLastLast","q","denominatorLeadingTerm","dltInverse","degreeDiff","scale","sigmaTildeAtZero","runEuclideanAlgorithm","errorLocations","errorLocator","numErrors","errorCount","findErrorLocations","errorMagnitudes","errorEvaluator","xiInverse","denominator","findErrorMagnitudes","position","VERSIONS","infoBits","versionNumber","alignmentPatternCenters","errorCorrectionLevels","ecCodewordsPerBlock","ecBlocks","numBlocks","dataCodewordsPerBlock","numBitsDiffering","z","bitCount","pushBit","bit","byte","FORMAT_INFO_TABLE","bits","formatInfo","errorCorrectionLevel","dataMask","DATA_MASKS","p","readCodewords","matrix","version","dimension","functionPatternMask","buildFunctionPatternMask","codewords","currentByte","bitsRead","readingUp","columnIndex","columnOffset","decodeMatrix","provisionalVersion","topRightVersionBits","bottomLeftVersionBits","bestVersion","bestDifference","Infinity","difference","readVersion","topLeftFormatInfoBits","topRightBottomRightFormatInfoBits","bestFormatInfo","readFormatInformation","dataBlocks","ecLevel","ecInfo","totalCodewords","numDataCodewords","slice","shortBlockSize","dataBlock","shift","smallBlockCount","largeBlockCount","getDataBlocks","totalBytes","reduce","resultBytes","resultIndex","correctedBytes","chunks","mode","Terminator","ECI","type","assignmentNumber","Numeric","numericResult","Alphanumeric","alphanumericResult","Byte","byteResult","Kanji","kanjiResult","squareToQuadrilateral","p1","p2","p3","p4","dx3","dy3","a11","a12","a13","a21","a22","a23","a31","a32","a33","dx1","dx2","dy1","dy2","extract","image","location","qToS","sToQ","quadrilateralToSquare","topLeft","topRight","alignmentPattern","bottomLeft","transform","mappingFunction","sourcePixel","distance","sqrt","pow","sum","values","countBlackWhiteRunTowardsPoint","origin","end","switchPoints","steep","abs","fromX","fromY","toX","toY","dx","dy","xStep","yStep","currentPixel","realX","realY","distances","countBlackWhiteRun","rise","run","towardsEnd","ceil","awayFromEnd","middleValue","concat","scoreBlackWhiteRun","sequence","ratios","averageSize","ratio","scorePattern","point","horizontalRun","verticalRun","topLeftBottomRightRun","bottomLeftTopRightRun","horzError","vertError","diagDownError","diagUpError","ratioError","avgSize","locate","finderPatternQuads","activeFinderPatternQuads","alignmentPatternQuads","activeAlignmentPatternQuads","lastBit","scans","averageFinderPatternBlocksize","validFinderPattern","averageAlignmentPatternBlocksize","validAlignmentPattern","endX","startX","line","matchingQuads","filter","bottom","finderPatternGroups","round","lengths","score","sort","finderPatterns","otherPoints","ii","points","pattern1","pattern2","pattern3","oneTwoDistance","twoThreeDistance","oneThreeDistance","reorderFinderPatterns","moduleSize","topDimension","sideDimension","computeDimension","e","bottomRightFinderPattern","modulesBetweenFinderPatterns","correctionToTopLeft","expectedAlignmentPattern","alignmentPatterns","scan","extracted","decoded","decode$2","binaryData","topRightCorner","topLeftCorner","bottomRightCorner","bottomLeftCorner","topRightFinderPattern","topLeftFinderPattern","bottomLeftFinderPattern","bottomRightAlignmentPattern","defaultOptions","inversionAttempts","greyScaleWeights","red","green","blue","useIntegerApproximation","canOverwriteImage","mergeObject","target","src","Object","keys","opt","jsQR","providedOptions","options","create","shouldInvert","tryInvertedFirst","binarized","inverted","returnInverted","greyscaleWeights","pixelCount","greyscaleBuffer","bufferOffset","greyscalePixels","pixelPosition","g","horizontalRegionCount","verticalRegionCount","blackPointsCount","blackPointsBuffer","blackPoints","verticalRegion","hortizontalRegion","pixelLumosity","average","blackBias","averageNeighborBlackPoint","binarizedBuffer","invertedBuffer","xRegion","yRegion","threshold","lum","binarize","jsQR$1","default","self","onmessage","d","w","h","invertOptions","match","maybeCode","Caml_option.nullable_to_opt","JsqrEs6.default","param","string_of_invertOptions","postMessage"],"mappings":"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","x_google_ignoreList":[0,1]}