{"version":3,"file":"worker.js","sources":["node_modules/bs-platform/lib/es6/caml_builtin_exceptions.js","node_modules/bs-platform/lib/es6/caml_exceptions.js","node_modules/bs-platform/lib/es6/caml_option.js","node_modules/bs-platform/lib/es6/caml_js_exceptions.js","node_modules/bs-platform/lib/es6/array.js","node_modules/jsqr-es6/dist/jsQR.js","node_modules/bs-platform/lib/es6/pervasives.js","src/DecodeWorker.bs.js","src/JsQr.bs.js"],"sourcesContent":["\n\n\nvar out_of_memory = /* tuple */[\n  \"Out_of_memory\",\n  0\n];\n\nvar sys_error = /* tuple */[\n  \"Sys_error\",\n  -1\n];\n\nvar failure = /* tuple */[\n  \"Failure\",\n  -2\n];\n\nvar invalid_argument = /* tuple */[\n  \"Invalid_argument\",\n  -3\n];\n\nvar end_of_file = /* tuple */[\n  \"End_of_file\",\n  -4\n];\n\nvar division_by_zero = /* tuple */[\n  \"Division_by_zero\",\n  -5\n];\n\nvar not_found = /* tuple */[\n  \"Not_found\",\n  -6\n];\n\nvar match_failure = /* tuple */[\n  \"Match_failure\",\n  -7\n];\n\nvar stack_overflow = /* tuple */[\n  \"Stack_overflow\",\n  -8\n];\n\nvar sys_blocked_io = /* tuple */[\n  \"Sys_blocked_io\",\n  -9\n];\n\nvar assert_failure = /* tuple */[\n  \"Assert_failure\",\n  -10\n];\n\nvar undefined_recursive_module = /* tuple */[\n  \"Undefined_recursive_module\",\n  -11\n];\n\nout_of_memory.tag = 248;\n\nsys_error.tag = 248;\n\nfailure.tag = 248;\n\ninvalid_argument.tag = 248;\n\nend_of_file.tag = 248;\n\ndivision_by_zero.tag = 248;\n\nnot_found.tag = 248;\n\nmatch_failure.tag = 248;\n\nstack_overflow.tag = 248;\n\nsys_blocked_io.tag = 248;\n\nassert_failure.tag = 248;\n\nundefined_recursive_module.tag = 248;\n\nexport {\n  out_of_memory ,\n  sys_error ,\n  failure ,\n  invalid_argument ,\n  end_of_file ,\n  division_by_zero ,\n  not_found ,\n  match_failure ,\n  stack_overflow ,\n  sys_blocked_io ,\n  assert_failure ,\n  undefined_recursive_module ,\n  \n}\n/*  Not a pure module */\n","\n\n\nvar id = {\n  contents: 0\n};\n\nfunction caml_set_oo_id(b) {\n  b[1] = id.contents;\n  id.contents = id.contents + 1;\n  return b;\n}\n\nfunction caml_fresh_oo_id(param) {\n  id.contents = id.contents + 1;\n  return id.contents;\n}\n\nfunction create(str) {\n  var v_001 = caml_fresh_oo_id(/* () */0);\n  var v = /* tuple */[\n    str,\n    v_001\n  ];\n  v.tag = 248;\n  return v;\n}\n\nfunction caml_is_extension(e) {\n  if (e === undefined) {\n    return false;\n  } else if (e.tag === 248) {\n    return true;\n  } else {\n    var slot = e[0];\n    if (slot !== undefined) {\n      return slot.tag === 248;\n    } else {\n      return false;\n    }\n  }\n}\n\nexport {\n  caml_set_oo_id ,\n  caml_fresh_oo_id ,\n  create ,\n  caml_is_extension ,\n  \n}\n/* No side effect */\n","\n\n\nvar undefinedHeader = /* array */[];\n\nfunction some(x) {\n  if (x === undefined) {\n    var block = /* tuple */[\n      undefinedHeader,\n      0\n    ];\n    block.tag = 256;\n    return block;\n  } else if (x !== null && x[0] === undefinedHeader) {\n    var nid = x[1] + 1 | 0;\n    var block$1 = /* tuple */[\n      undefinedHeader,\n      nid\n    ];\n    block$1.tag = 256;\n    return block$1;\n  } else {\n    return x;\n  }\n}\n\nfunction nullable_to_opt(x) {\n  if (x === null || x === undefined) {\n    return ;\n  } else {\n    return some(x);\n  }\n}\n\nfunction undefined_to_opt(x) {\n  if (x === undefined) {\n    return ;\n  } else {\n    return some(x);\n  }\n}\n\nfunction null_to_opt(x) {\n  if (x === null) {\n    return ;\n  } else {\n    return some(x);\n  }\n}\n\nfunction valFromOption(x) {\n  if (x !== null && x[0] === undefinedHeader) {\n    var depth = x[1];\n    if (depth === 0) {\n      return ;\n    } else {\n      return /* tuple */[\n              undefinedHeader,\n              depth - 1 | 0\n            ];\n    }\n  } else {\n    return x;\n  }\n}\n\nfunction option_get(x) {\n  if (x === undefined) {\n    return ;\n  } else {\n    return valFromOption(x);\n  }\n}\n\nfunction option_get_unwrap(x) {\n  if (x === undefined) {\n    return ;\n  } else {\n    return valFromOption(x)[1];\n  }\n}\n\nexport {\n  nullable_to_opt ,\n  undefined_to_opt ,\n  null_to_opt ,\n  valFromOption ,\n  some ,\n  option_get ,\n  option_get_unwrap ,\n  \n}\n/* No side effect */\n","\n\nimport * as Caml_option from \"./caml_option.js\";\nimport * as Caml_exceptions from \"./caml_exceptions.js\";\n\nvar $$Error = Caml_exceptions.create(\"Caml_js_exceptions.Error\");\n\nfunction internalToOCamlException(e) {\n  if (Caml_exceptions.caml_is_extension(e)) {\n    return e;\n  } else {\n    return [\n            $$Error,\n            e\n          ];\n  }\n}\n\nfunction caml_as_js_exn(exn) {\n  if (exn[0] === $$Error) {\n    return Caml_option.some(exn[1]);\n  }\n  \n}\n\nexport {\n  $$Error ,\n  internalToOCamlException ,\n  caml_as_js_exn ,\n  \n}\n/* No side effect */\n","\n\nimport * as Curry from \"./curry.js\";\nimport * as Caml_obj from \"./caml_obj.js\";\nimport * as Caml_array from \"./caml_array.js\";\nimport * as Caml_exceptions from \"./caml_exceptions.js\";\nimport * as Caml_js_exceptions from \"./caml_js_exceptions.js\";\nimport * as Caml_builtin_exceptions from \"./caml_builtin_exceptions.js\";\n\nvar make_float = Caml_array.caml_make_float_vect;\n\nvar Floatarray = { };\n\nfunction init(l, f) {\n  if (l === 0) {\n    return /* array */[];\n  } else {\n    if (l < 0) {\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"Array.init\"\n          ];\n    }\n    var res = Caml_array.caml_make_vect(l, Curry._1(f, 0));\n    for(var i = 1 ,i_finish = l - 1 | 0; i <= i_finish; ++i){\n      res[i] = Curry._1(f, i);\n    }\n    return res;\n  }\n}\n\nfunction make_matrix(sx, sy, init) {\n  var res = Caml_array.caml_make_vect(sx, /* array */[]);\n  for(var x = 0 ,x_finish = sx - 1 | 0; x <= x_finish; ++x){\n    res[x] = Caml_array.caml_make_vect(sy, init);\n  }\n  return res;\n}\n\nfunction copy(a) {\n  var l = a.length;\n  if (l === 0) {\n    return /* array */[];\n  } else {\n    return Caml_array.caml_array_sub(a, 0, l);\n  }\n}\n\nfunction append(a1, a2) {\n  var l1 = a1.length;\n  if (l1 === 0) {\n    return copy(a2);\n  } else if (a2.length === 0) {\n    return Caml_array.caml_array_sub(a1, 0, l1);\n  } else {\n    return a1.concat(a2);\n  }\n}\n\nfunction sub(a, ofs, len) {\n  if (ofs < 0 || len < 0 || ofs > (a.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Array.sub\"\n        ];\n  }\n  return Caml_array.caml_array_sub(a, ofs, len);\n}\n\nfunction fill(a, ofs, len, v) {\n  if (ofs < 0 || len < 0 || ofs > (a.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Array.fill\"\n        ];\n  }\n  for(var i = ofs ,i_finish = (ofs + len | 0) - 1 | 0; i <= i_finish; ++i){\n    a[i] = v;\n  }\n  return /* () */0;\n}\n\nfunction blit(a1, ofs1, a2, ofs2, len) {\n  if (len < 0 || ofs1 < 0 || ofs1 > (a1.length - len | 0) || ofs2 < 0 || ofs2 > (a2.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Array.blit\"\n        ];\n  }\n  return Caml_array.caml_array_blit(a1, ofs1, a2, ofs2, len);\n}\n\nfunction iter(f, a) {\n  for(var i = 0 ,i_finish = a.length - 1 | 0; i <= i_finish; ++i){\n    Curry._1(f, a[i]);\n  }\n  return /* () */0;\n}\n\nfunction iter2(f, a, b) {\n  if (a.length !== b.length) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Array.iter2: arrays must have the same length\"\n        ];\n  }\n  for(var i = 0 ,i_finish = a.length - 1 | 0; i <= i_finish; ++i){\n    Curry._2(f, a[i], b[i]);\n  }\n  return /* () */0;\n}\n\nfunction map(f, a) {\n  var l = a.length;\n  if (l === 0) {\n    return /* array */[];\n  } else {\n    var r = Caml_array.caml_make_vect(l, Curry._1(f, a[0]));\n    for(var i = 1 ,i_finish = l - 1 | 0; i <= i_finish; ++i){\n      r[i] = Curry._1(f, a[i]);\n    }\n    return r;\n  }\n}\n\nfunction map2(f, a, b) {\n  var la = a.length;\n  var lb = b.length;\n  if (la !== lb) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Array.map2: arrays must have the same length\"\n        ];\n  }\n  if (la === 0) {\n    return /* array */[];\n  } else {\n    var r = Caml_array.caml_make_vect(la, Curry._2(f, a[0], b[0]));\n    for(var i = 1 ,i_finish = la - 1 | 0; i <= i_finish; ++i){\n      r[i] = Curry._2(f, a[i], b[i]);\n    }\n    return r;\n  }\n}\n\nfunction iteri(f, a) {\n  for(var i = 0 ,i_finish = a.length - 1 | 0; i <= i_finish; ++i){\n    Curry._2(f, i, a[i]);\n  }\n  return /* () */0;\n}\n\nfunction mapi(f, a) {\n  var l = a.length;\n  if (l === 0) {\n    return /* array */[];\n  } else {\n    var r = Caml_array.caml_make_vect(l, Curry._2(f, 0, a[0]));\n    for(var i = 1 ,i_finish = l - 1 | 0; i <= i_finish; ++i){\n      r[i] = Curry._2(f, i, a[i]);\n    }\n    return r;\n  }\n}\n\nfunction to_list(a) {\n  var _i = a.length - 1 | 0;\n  var _res = /* [] */0;\n  while(true) {\n    var res = _res;\n    var i = _i;\n    if (i < 0) {\n      return res;\n    } else {\n      _res = /* :: */[\n        a[i],\n        res\n      ];\n      _i = i - 1 | 0;\n      continue ;\n    }\n  };\n}\n\nfunction list_length(_accu, _param) {\n  while(true) {\n    var param = _param;\n    var accu = _accu;\n    if (param) {\n      _param = param[1];\n      _accu = accu + 1 | 0;\n      continue ;\n    } else {\n      return accu;\n    }\n  };\n}\n\nfunction of_list(l) {\n  if (l) {\n    var a = Caml_array.caml_make_vect(list_length(0, l), l[0]);\n    var _i = 1;\n    var _param = l[1];\n    while(true) {\n      var param = _param;\n      var i = _i;\n      if (param) {\n        a[i] = param[0];\n        _param = param[1];\n        _i = i + 1 | 0;\n        continue ;\n      } else {\n        return a;\n      }\n    };\n  } else {\n    return /* array */[];\n  }\n}\n\nfunction fold_left(f, x, a) {\n  var r = x;\n  for(var i = 0 ,i_finish = a.length - 1 | 0; i <= i_finish; ++i){\n    r = Curry._2(f, r, a[i]);\n  }\n  return r;\n}\n\nfunction fold_right(f, a, x) {\n  var r = x;\n  for(var i = a.length - 1 | 0; i >= 0; --i){\n    r = Curry._2(f, a[i], r);\n  }\n  return r;\n}\n\nfunction exists(p, a) {\n  var n = a.length;\n  var _i = 0;\n  while(true) {\n    var i = _i;\n    if (i === n) {\n      return false;\n    } else if (Curry._1(p, a[i])) {\n      return true;\n    } else {\n      _i = i + 1 | 0;\n      continue ;\n    }\n  };\n}\n\nfunction for_all(p, a) {\n  var n = a.length;\n  var _i = 0;\n  while(true) {\n    var i = _i;\n    if (i === n) {\n      return true;\n    } else if (Curry._1(p, a[i])) {\n      _i = i + 1 | 0;\n      continue ;\n    } else {\n      return false;\n    }\n  };\n}\n\nfunction mem(x, a) {\n  var n = a.length;\n  var _i = 0;\n  while(true) {\n    var i = _i;\n    if (i === n) {\n      return false;\n    } else if (Caml_obj.caml_equal(a[i], x)) {\n      return true;\n    } else {\n      _i = i + 1 | 0;\n      continue ;\n    }\n  };\n}\n\nfunction memq(x, a) {\n  var n = a.length;\n  var _i = 0;\n  while(true) {\n    var i = _i;\n    if (i === n) {\n      return false;\n    } else if (x === a[i]) {\n      return true;\n    } else {\n      _i = i + 1 | 0;\n      continue ;\n    }\n  };\n}\n\nvar Bottom = Caml_exceptions.create(\"Array.Bottom\");\n\nfunction sort(cmp, a) {\n  var maxson = function (l, i) {\n    var i31 = ((i + i | 0) + i | 0) + 1 | 0;\n    var x = i31;\n    if ((i31 + 2 | 0) < l) {\n      if (Curry._2(cmp, Caml_array.caml_array_get(a, i31), Caml_array.caml_array_get(a, i31 + 1 | 0)) < 0) {\n        x = i31 + 1 | 0;\n      }\n      if (Curry._2(cmp, Caml_array.caml_array_get(a, x), Caml_array.caml_array_get(a, i31 + 2 | 0)) < 0) {\n        x = i31 + 2 | 0;\n      }\n      return x;\n    } else if ((i31 + 1 | 0) < l && Curry._2(cmp, Caml_array.caml_array_get(a, i31), Caml_array.caml_array_get(a, i31 + 1 | 0)) < 0) {\n      return i31 + 1 | 0;\n    } else if (i31 < l) {\n      return i31;\n    } else {\n      throw [\n            Bottom,\n            i\n          ];\n    }\n  };\n  var trickle = function (l, i, e) {\n    try {\n      var l$1 = l;\n      var _i = i;\n      var e$1 = e;\n      while(true) {\n        var i$1 = _i;\n        var j = maxson(l$1, i$1);\n        if (Curry._2(cmp, Caml_array.caml_array_get(a, j), e$1) > 0) {\n          Caml_array.caml_array_set(a, i$1, Caml_array.caml_array_get(a, j));\n          _i = j;\n          continue ;\n        } else {\n          return Caml_array.caml_array_set(a, i$1, e$1);\n        }\n      };\n    }\n    catch (raw_exn){\n      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n      if (exn[0] === Bottom) {\n        return Caml_array.caml_array_set(a, exn[1], e);\n      } else {\n        throw exn;\n      }\n    }\n  };\n  var bubble = function (l, i) {\n    try {\n      var l$1 = l;\n      var _i = i;\n      while(true) {\n        var i$1 = _i;\n        var j = maxson(l$1, i$1);\n        Caml_array.caml_array_set(a, i$1, Caml_array.caml_array_get(a, j));\n        _i = j;\n        continue ;\n      };\n    }\n    catch (raw_exn){\n      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n      if (exn[0] === Bottom) {\n        return exn[1];\n      } else {\n        throw exn;\n      }\n    }\n  };\n  var trickleup = function (_i, e) {\n    while(true) {\n      var i = _i;\n      var father = (i - 1 | 0) / 3 | 0;\n      if (i === father) {\n        throw [\n              Caml_builtin_exceptions.assert_failure,\n              /* tuple */[\n                \"array.ml\",\n                238,\n                4\n              ]\n            ];\n      }\n      if (Curry._2(cmp, Caml_array.caml_array_get(a, father), e) < 0) {\n        Caml_array.caml_array_set(a, i, Caml_array.caml_array_get(a, father));\n        if (father > 0) {\n          _i = father;\n          continue ;\n        } else {\n          return Caml_array.caml_array_set(a, 0, e);\n        }\n      } else {\n        return Caml_array.caml_array_set(a, i, e);\n      }\n    };\n  };\n  var l = a.length;\n  for(var i = ((l + 1 | 0) / 3 | 0) - 1 | 0; i >= 0; --i){\n    trickle(l, i, Caml_array.caml_array_get(a, i));\n  }\n  for(var i$1 = l - 1 | 0; i$1 >= 2; --i$1){\n    var e = Caml_array.caml_array_get(a, i$1);\n    Caml_array.caml_array_set(a, i$1, Caml_array.caml_array_get(a, 0));\n    trickleup(bubble(i$1, 0), e);\n  }\n  if (l > 1) {\n    var e$1 = Caml_array.caml_array_get(a, 1);\n    Caml_array.caml_array_set(a, 1, Caml_array.caml_array_get(a, 0));\n    return Caml_array.caml_array_set(a, 0, e$1);\n  } else {\n    return 0;\n  }\n}\n\nfunction stable_sort(cmp, a) {\n  var merge = function (src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs) {\n    var src1r = src1ofs + src1len | 0;\n    var src2r = src2ofs + src2len | 0;\n    var _i1 = src1ofs;\n    var _s1 = Caml_array.caml_array_get(a, src1ofs);\n    var _i2 = src2ofs;\n    var _s2 = Caml_array.caml_array_get(src2, src2ofs);\n    var _d = dstofs;\n    while(true) {\n      var d = _d;\n      var s2 = _s2;\n      var i2 = _i2;\n      var s1 = _s1;\n      var i1 = _i1;\n      if (Curry._2(cmp, s1, s2) <= 0) {\n        Caml_array.caml_array_set(dst, d, s1);\n        var i1$1 = i1 + 1 | 0;\n        if (i1$1 < src1r) {\n          _d = d + 1 | 0;\n          _s1 = Caml_array.caml_array_get(a, i1$1);\n          _i1 = i1$1;\n          continue ;\n        } else {\n          return blit(src2, i2, dst, d + 1 | 0, src2r - i2 | 0);\n        }\n      } else {\n        Caml_array.caml_array_set(dst, d, s2);\n        var i2$1 = i2 + 1 | 0;\n        if (i2$1 < src2r) {\n          _d = d + 1 | 0;\n          _s2 = Caml_array.caml_array_get(src2, i2$1);\n          _i2 = i2$1;\n          continue ;\n        } else {\n          return blit(a, i1, dst, d + 1 | 0, src1r - i1 | 0);\n        }\n      }\n    };\n  };\n  var isortto = function (srcofs, dst, dstofs, len) {\n    for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){\n      var e = Caml_array.caml_array_get(a, srcofs + i | 0);\n      var j = (dstofs + i | 0) - 1 | 0;\n      while(j >= dstofs && Curry._2(cmp, Caml_array.caml_array_get(dst, j), e) > 0) {\n        Caml_array.caml_array_set(dst, j + 1 | 0, Caml_array.caml_array_get(dst, j));\n        j = j - 1 | 0;\n      };\n      Caml_array.caml_array_set(dst, j + 1 | 0, e);\n    }\n    return /* () */0;\n  };\n  var sortto = function (srcofs, dst, dstofs, len) {\n    if (len <= 5) {\n      return isortto(srcofs, dst, dstofs, len);\n    } else {\n      var l1 = len / 2 | 0;\n      var l2 = len - l1 | 0;\n      sortto(srcofs + l1 | 0, dst, dstofs + l1 | 0, l2);\n      sortto(srcofs, a, srcofs + l2 | 0, l1);\n      return merge(srcofs + l2 | 0, l1, dst, dstofs + l1 | 0, l2, dst, dstofs);\n    }\n  };\n  var l = a.length;\n  if (l <= 5) {\n    return isortto(0, a, 0, l);\n  } else {\n    var l1 = l / 2 | 0;\n    var l2 = l - l1 | 0;\n    var t = Caml_array.caml_make_vect(l2, Caml_array.caml_array_get(a, 0));\n    sortto(l1, t, 0, l2);\n    sortto(0, a, l2, l1);\n    return merge(l2, l1, t, 0, l2, a, 0);\n  }\n}\n\nvar create_matrix = make_matrix;\n\nvar concat = Caml_array.caml_array_concat;\n\nvar fast_sort = stable_sort;\n\nexport {\n  make_float ,\n  init ,\n  make_matrix ,\n  create_matrix ,\n  append ,\n  concat ,\n  sub ,\n  copy ,\n  fill ,\n  blit ,\n  to_list ,\n  of_list ,\n  iter ,\n  iteri ,\n  map ,\n  mapi ,\n  fold_left ,\n  fold_right ,\n  iter2 ,\n  map2 ,\n  for_all ,\n  exists ,\n  mem ,\n  memq ,\n  sort ,\n  stable_sort ,\n  fast_sort ,\n  Floatarray ,\n  \n}\n/* No side effect */\n","class BitMatrix {\n    static createEmpty(width, height) {\n        return new BitMatrix(new Uint8ClampedArray(width * height), width);\n    }\n    constructor(data, width) {\n        this.width = width;\n        this.height = data.length / width;\n        this.data = data;\n    }\n    get(x, y) {\n        if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n            return false;\n        }\n        return !!this.data[y * this.width + x];\n    }\n    set(x, y, v) {\n        this.data[y * this.width + x] = v ? 1 : 0;\n    }\n    setRegion(left, top, width, height, v) {\n        for (let y = top; y < top + height; y++) {\n            for (let x = left; x < left + width; x++) {\n                this.set(x, y, !!v);\n            }\n        }\n    }\n}\n\nconst REGION_SIZE = 8;\nconst MIN_DYNAMIC_RANGE = 24;\nfunction numBetween(value, min, max) {\n    return value < min ? min : value > max ? max : value;\n}\n// Like BitMatrix but accepts arbitry Uint8 values\nclass Matrix {\n    constructor(width, height, buffer) {\n        this.width = width;\n        const bufferSize = width * height;\n        if (buffer && buffer.length !== bufferSize) {\n            throw new Error(\"Wrong buffer size\");\n        }\n        this.data = buffer || new Uint8ClampedArray(bufferSize);\n    }\n    get(x, y) {\n        return this.data[y * this.width + x];\n    }\n    set(x, y, value) {\n        this.data[y * this.width + x] = value;\n    }\n}\nfunction binarize(data, width, height, returnInverted, greyscaleWeights, canOverwriteImage) {\n    const pixelCount = width * height;\n    if (data.length !== pixelCount * 4) {\n        throw new Error(\"Malformed data passed to binarizer.\");\n    }\n    // assign the greyscale and binary image within the rgba buffer as the rgba image will not be needed after conversion\n    let bufferOffset = 0;\n    // Convert image to greyscale\n    let greyscaleBuffer;\n    if (canOverwriteImage) {\n        greyscaleBuffer = new Uint8ClampedArray(data.buffer, bufferOffset, pixelCount);\n        bufferOffset += pixelCount;\n    }\n    const greyscalePixels = new Matrix(width, height, greyscaleBuffer);\n    if (greyscaleWeights.useIntegerApproximation) {\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                const pixelPosition = (y * width + x) * 4;\n                const r = data[pixelPosition];\n                const g = data[pixelPosition + 1];\n                const b = data[pixelPosition + 2];\n                greyscalePixels.set(x, y, \n                // tslint:disable-next-line no-bitwise\n                (greyscaleWeights.red * r + greyscaleWeights.green * g + greyscaleWeights.blue * b + 128) >> 8);\n            }\n        }\n    }\n    else {\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                const pixelPosition = (y * width + x) * 4;\n                const r = data[pixelPosition];\n                const g = data[pixelPosition + 1];\n                const b = data[pixelPosition + 2];\n                greyscalePixels.set(x, y, greyscaleWeights.red * r + greyscaleWeights.green * g + greyscaleWeights.blue * b);\n            }\n        }\n    }\n    const horizontalRegionCount = Math.ceil(width / REGION_SIZE);\n    const verticalRegionCount = Math.ceil(height / REGION_SIZE);\n    const blackPointsCount = horizontalRegionCount * verticalRegionCount;\n    let blackPointsBuffer;\n    if (canOverwriteImage) {\n        blackPointsBuffer = new Uint8ClampedArray(data.buffer, bufferOffset, blackPointsCount);\n        bufferOffset += blackPointsCount;\n    }\n    const blackPoints = new Matrix(horizontalRegionCount, verticalRegionCount, blackPointsBuffer);\n    for (let verticalRegion = 0; verticalRegion < verticalRegionCount; verticalRegion++) {\n        for (let hortizontalRegion = 0; hortizontalRegion < horizontalRegionCount; hortizontalRegion++) {\n            let min = Infinity;\n            let max = 0;\n            for (let y = 0; y < REGION_SIZE; y++) {\n                for (let x = 0; x < REGION_SIZE; x++) {\n                    const pixelLumosity = greyscalePixels.get(hortizontalRegion * REGION_SIZE + x, verticalRegion * REGION_SIZE + y);\n                    min = Math.min(min, pixelLumosity);\n                    max = Math.max(max, pixelLumosity);\n                }\n            }\n            // We could also compute the real average of all pixels but following the assumption that the qr code consists\n            // of bright and dark pixels and essentially not much in between, by (min + max)/2 we make the cut really between\n            // those two classes. If using the average over all pixel in a block of mostly bright pixels and few dark pixels,\n            // the avg would tend to the bright side and darker bright pixels could be interpreted as dark.\n            let average = (min + max) / 2;\n            // Small bias towards black by moving the threshold up. We do this, as in the finder patterns white holes tend\n            // to appear which makes them undetectable.\n            const blackBias = 1.1;\n            average = Math.min(255, average * blackBias);\n            if (max - min <= MIN_DYNAMIC_RANGE) {\n                // If variation within the block is low, assume this is a block with only light or only\n                // dark pixels. In that case we do not want to use the average, as it would divide this\n                // low contrast area into black and white pixels, essentially creating data out of noise.\n                //\n                // Default the blackpoint for these blocks to be half the min - effectively white them out\n                average = min / 2;\n                if (verticalRegion > 0 && hortizontalRegion > 0) {\n                    // Correct the \"white background\" assumption for blocks that have neighbors by comparing\n                    // the pixels in this block to the previously calculated black points. This is based on\n                    // the fact that dark barcode symbology is always surrounded by some amount of light\n                    // background for which reasonable black point estimates were made. The bp estimated at\n                    // the boundaries is used for the interior.\n                    // The (min < bp) is arbitrary but works better than other heuristics that were tried.\n                    const averageNeighborBlackPoint = (blackPoints.get(hortizontalRegion, verticalRegion - 1) +\n                        (2 * blackPoints.get(hortizontalRegion - 1, verticalRegion)) +\n                        blackPoints.get(hortizontalRegion - 1, verticalRegion - 1)) / 4;\n                    if (min < averageNeighborBlackPoint) {\n                        average = averageNeighborBlackPoint; // no need to apply black bias as already applied to neighbors\n                    }\n                }\n            }\n            blackPoints.set(hortizontalRegion, verticalRegion, average);\n        }\n    }\n    let binarized;\n    if (canOverwriteImage) {\n        const binarizedBuffer = new Uint8ClampedArray(data.buffer, bufferOffset, pixelCount);\n        bufferOffset += pixelCount;\n        binarized = new BitMatrix(binarizedBuffer, width);\n    }\n    else {\n        binarized = BitMatrix.createEmpty(width, height);\n    }\n    let inverted = null;\n    if (returnInverted) {\n        if (canOverwriteImage) {\n            const invertedBuffer = new Uint8ClampedArray(data.buffer, bufferOffset, pixelCount);\n            inverted = new BitMatrix(invertedBuffer, width);\n        }\n        else {\n            inverted = BitMatrix.createEmpty(width, height);\n        }\n    }\n    for (let verticalRegion = 0; verticalRegion < verticalRegionCount; verticalRegion++) {\n        for (let hortizontalRegion = 0; hortizontalRegion < horizontalRegionCount; hortizontalRegion++) {\n            const left = numBetween(hortizontalRegion, 2, horizontalRegionCount - 3);\n            const top = numBetween(verticalRegion, 2, verticalRegionCount - 3);\n            let sum = 0;\n            for (let xRegion = -2; xRegion <= 2; xRegion++) {\n                for (let yRegion = -2; yRegion <= 2; yRegion++) {\n                    sum += blackPoints.get(left + xRegion, top + yRegion);\n                }\n            }\n            const threshold = sum / 25;\n            for (let xRegion = 0; xRegion < REGION_SIZE; xRegion++) {\n                for (let yRegion = 0; yRegion < REGION_SIZE; yRegion++) {\n                    const x = hortizontalRegion * REGION_SIZE + xRegion;\n                    const y = verticalRegion * REGION_SIZE + yRegion;\n                    const lum = greyscalePixels.get(x, y);\n                    binarized.set(x, y, lum <= threshold);\n                    if (returnInverted) {\n                        inverted.set(x, y, !(lum <= threshold));\n                    }\n                }\n            }\n        }\n    }\n    if (returnInverted) {\n        return { binarized, inverted };\n    }\n    return { binarized };\n}\n\n// tslint:disable:no-bitwise\nclass BitStream {\n    constructor(bytes) {\n        this.byteOffset = 0;\n        this.bitOffset = 0;\n        this.bytes = bytes;\n    }\n    readBits(numBits) {\n        if (numBits < 1 || numBits > 32 || numBits > this.available()) {\n            throw new Error(\"Cannot read \" + numBits.toString() + \" bits\");\n        }\n        let result = 0;\n        // First, read remainder from current byte\n        if (this.bitOffset > 0) {\n            const bitsLeft = 8 - this.bitOffset;\n            const toRead = numBits < bitsLeft ? numBits : bitsLeft;\n            const bitsToNotRead = bitsLeft - toRead;\n            const mask = (0xFF >> (8 - toRead)) << bitsToNotRead;\n            result = (this.bytes[this.byteOffset] & mask) >> bitsToNotRead;\n            numBits -= toRead;\n            this.bitOffset += toRead;\n            if (this.bitOffset === 8) {\n                this.bitOffset = 0;\n                this.byteOffset++;\n            }\n        }\n        // Next read whole bytes\n        if (numBits > 0) {\n            while (numBits >= 8) {\n                result = (result << 8) | (this.bytes[this.byteOffset] & 0xFF);\n                this.byteOffset++;\n                numBits -= 8;\n            }\n            // Finally read a partial byte\n            if (numBits > 0) {\n                const bitsToNotRead = 8 - numBits;\n                const mask = (0xFF >> bitsToNotRead) << bitsToNotRead;\n                result = (result << numBits) | ((this.bytes[this.byteOffset] & mask) >> bitsToNotRead);\n                this.bitOffset += numBits;\n            }\n        }\n        return result;\n    }\n    available() {\n        return 8 * (this.bytes.length - this.byteOffset) - this.bitOffset;\n    }\n}\n\n// tslint:disable:no-bitwise\nvar Mode;\n(function (Mode) {\n    Mode[\"Numeric\"] = \"numeric\";\n    Mode[\"Alphanumeric\"] = \"alphanumeric\";\n    Mode[\"Byte\"] = \"byte\";\n    Mode[\"Kanji\"] = \"kanji\";\n    Mode[\"ECI\"] = \"eci\";\n})(Mode || (Mode = {}));\nvar ModeByte;\n(function (ModeByte) {\n    ModeByte[ModeByte[\"Terminator\"] = 0] = \"Terminator\";\n    ModeByte[ModeByte[\"Numeric\"] = 1] = \"Numeric\";\n    ModeByte[ModeByte[\"Alphanumeric\"] = 2] = \"Alphanumeric\";\n    ModeByte[ModeByte[\"Byte\"] = 4] = \"Byte\";\n    ModeByte[ModeByte[\"Kanji\"] = 8] = \"Kanji\";\n    ModeByte[ModeByte[\"ECI\"] = 7] = \"ECI\";\n    // StructuredAppend = 0x3,\n    // FNC1FirstPosition = 0x5,\n    // FNC1SecondPosition = 0x9,\n})(ModeByte || (ModeByte = {}));\nfunction decodeNumeric(stream, size) {\n    const bytes = [];\n    let text = \"\";\n    const characterCountSize = [10, 12, 14][size];\n    let length = stream.readBits(characterCountSize);\n    // Read digits in groups of 3\n    while (length >= 3) {\n        const num = stream.readBits(10);\n        if (num >= 1000) {\n            throw new Error(\"Invalid numeric value above 999\");\n        }\n        const a = Math.floor(num / 100);\n        const b = Math.floor(num / 10) % 10;\n        const c = num % 10;\n        bytes.push(48 + a, 48 + b, 48 + c);\n        text += a.toString() + b.toString() + c.toString();\n        length -= 3;\n    }\n    // If the number of digits aren't a multiple of 3, the remaining digits are special cased.\n    if (length === 2) {\n        const num = stream.readBits(7);\n        if (num >= 100) {\n            throw new Error(\"Invalid numeric value above 99\");\n        }\n        const a = Math.floor(num / 10);\n        const b = num % 10;\n        bytes.push(48 + a, 48 + b);\n        text += a.toString() + b.toString();\n    }\n    else if (length === 1) {\n        const num = stream.readBits(4);\n        if (num >= 10) {\n            throw new Error(\"Invalid numeric value above 9\");\n        }\n        bytes.push(48 + num);\n        text += num.toString();\n    }\n    return { bytes, text };\n}\nconst AlphanumericCharacterCodes = [\n    \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\n    \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\",\n    \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\",\n    \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\",\n    \" \", \"$\", \"%\", \"*\", \"+\", \"-\", \".\", \"/\", \":\",\n];\nfunction decodeAlphanumeric(stream, size) {\n    const bytes = [];\n    let text = \"\";\n    const characterCountSize = [9, 11, 13][size];\n    let length = stream.readBits(characterCountSize);\n    while (length >= 2) {\n        const v = stream.readBits(11);\n        const a = Math.floor(v / 45);\n        const b = v % 45;\n        bytes.push(AlphanumericCharacterCodes[a].charCodeAt(0), AlphanumericCharacterCodes[b].charCodeAt(0));\n        text += AlphanumericCharacterCodes[a] + AlphanumericCharacterCodes[b];\n        length -= 2;\n    }\n    if (length === 1) {\n        const a = stream.readBits(6);\n        bytes.push(AlphanumericCharacterCodes[a].charCodeAt(0));\n        text += AlphanumericCharacterCodes[a];\n    }\n    return { bytes, text };\n}\nfunction decodeByte(stream, size) {\n    const bytes = [];\n    let text = \"\";\n    const characterCountSize = [8, 16, 16][size];\n    const length = stream.readBits(characterCountSize);\n    for (let i = 0; i < length; i++) {\n        const b = stream.readBits(8);\n        bytes.push(b);\n    }\n    try {\n        text += decodeURIComponent(bytes.map(b => `%${(\"0\" + b.toString(16)).substr(-2)}`).join(\"\"));\n    }\n    catch (_a) {\n        // failed to decode\n    }\n    return { bytes, text };\n}\nfunction decodeKanji(stream, size) {\n    const bytes = [];\n    const characterCountSize = [8, 10, 12][size];\n    const length = stream.readBits(characterCountSize);\n    for (let i = 0; i < length; i++) {\n        const k = stream.readBits(13);\n        let c = (Math.floor(k / 0xC0) << 8) | (k % 0xC0);\n        if (c < 0x1F00) {\n            c += 0x8140;\n        }\n        else {\n            c += 0xC140;\n        }\n        bytes.push(c >> 8, c & 0xFF);\n    }\n    const text = new TextDecoder(\"shift-jis\").decode(Uint8Array.from(bytes));\n    return { bytes, text };\n}\nfunction decode(data, version) {\n    const stream = new BitStream(data);\n    // There are 3 'sizes' based on the version. 1-9 is small (0), 10-26 is medium (1) and 27-40 is large (2).\n    const size = version <= 9 ? 0 : version <= 26 ? 1 : 2;\n    const result = {\n        text: \"\",\n        bytes: [],\n        chunks: [],\n    };\n    while (stream.available() >= 4) {\n        const mode = stream.readBits(4);\n        if (mode === ModeByte.Terminator) {\n            return result;\n        }\n        else if (mode === ModeByte.ECI) {\n            if (stream.readBits(1) === 0) {\n                result.chunks.push({\n                    type: Mode.ECI,\n                    assignmentNumber: stream.readBits(7),\n                });\n            }\n            else if (stream.readBits(1) === 0) {\n                result.chunks.push({\n                    type: Mode.ECI,\n                    assignmentNumber: stream.readBits(14),\n                });\n            }\n            else if (stream.readBits(1) === 0) {\n                result.chunks.push({\n                    type: Mode.ECI,\n                    assignmentNumber: stream.readBits(21),\n                });\n            }\n            else {\n                // ECI data seems corrupted\n                result.chunks.push({\n                    type: Mode.ECI,\n                    assignmentNumber: -1,\n                });\n            }\n        }\n        else if (mode === ModeByte.Numeric) {\n            const numericResult = decodeNumeric(stream, size);\n            result.text += numericResult.text;\n            result.bytes.push(...numericResult.bytes);\n            result.chunks.push({\n                type: Mode.Numeric,\n                text: numericResult.text,\n            });\n        }\n        else if (mode === ModeByte.Alphanumeric) {\n            const alphanumericResult = decodeAlphanumeric(stream, size);\n            result.text += alphanumericResult.text;\n            result.bytes.push(...alphanumericResult.bytes);\n            result.chunks.push({\n                type: Mode.Alphanumeric,\n                text: alphanumericResult.text,\n            });\n        }\n        else if (mode === ModeByte.Byte) {\n            const byteResult = decodeByte(stream, size);\n            result.text += byteResult.text;\n            result.bytes.push(...byteResult.bytes);\n            result.chunks.push({\n                type: Mode.Byte,\n                bytes: byteResult.bytes,\n                text: byteResult.text,\n            });\n        }\n        else if (mode === ModeByte.Kanji) {\n            const kanjiResult = decodeKanji(stream, size);\n            result.text += kanjiResult.text;\n            result.bytes.push(...kanjiResult.bytes);\n            result.chunks.push({\n                type: Mode.Kanji,\n                bytes: kanjiResult.bytes,\n                text: kanjiResult.text,\n            });\n        }\n    }\n    // If there is no data left, or the remaining bits are all 0, then that counts as a termination marker\n    if (stream.available() === 0 || stream.readBits(stream.available()) === 0) {\n        return result;\n    }\n}\n\nclass GenericGFPoly {\n    constructor(field, coefficients) {\n        if (coefficients.length === 0) {\n            throw new Error(\"No coefficients.\");\n        }\n        this.field = field;\n        const coefficientsLength = coefficients.length;\n        if (coefficientsLength > 1 && coefficients[0] === 0) {\n            // Leading term must be non-zero for anything except the constant polynomial \"0\"\n            let firstNonZero = 1;\n            while (firstNonZero < coefficientsLength && coefficients[firstNonZero] === 0) {\n                firstNonZero++;\n            }\n            if (firstNonZero === coefficientsLength) {\n                this.coefficients = field.zero.coefficients;\n            }\n            else {\n                this.coefficients = new Uint8ClampedArray(coefficientsLength - firstNonZero);\n                for (let i = 0; i < this.coefficients.length; i++) {\n                    this.coefficients[i] = coefficients[firstNonZero + i];\n                }\n            }\n        }\n        else {\n            this.coefficients = coefficients;\n        }\n    }\n    degree() {\n        return this.coefficients.length - 1;\n    }\n    isZero() {\n        return this.coefficients[0] === 0;\n    }\n    getCoefficient(degree) {\n        return this.coefficients[this.coefficients.length - 1 - degree];\n    }\n    addOrSubtract(other) {\n        if (this.isZero()) {\n            return other;\n        }\n        if (other.isZero()) {\n            return this;\n        }\n        let smallerCoefficients = this.coefficients;\n        let largerCoefficients = other.coefficients;\n        if (smallerCoefficients.length > largerCoefficients.length) {\n            [smallerCoefficients, largerCoefficients] = [largerCoefficients, smallerCoefficients];\n        }\n        const sumDiff = new Uint8ClampedArray(largerCoefficients.length);\n        const lengthDiff = largerCoefficients.length - smallerCoefficients.length;\n        for (let i = 0; i < lengthDiff; i++) {\n            sumDiff[i] = largerCoefficients[i];\n        }\n        for (let i = lengthDiff; i < largerCoefficients.length; i++) {\n            sumDiff[i] = addOrSubtractGF(smallerCoefficients[i - lengthDiff], largerCoefficients[i]);\n        }\n        return new GenericGFPoly(this.field, sumDiff);\n    }\n    multiply(scalar) {\n        if (scalar === 0) {\n            return this.field.zero;\n        }\n        if (scalar === 1) {\n            return this;\n        }\n        const size = this.coefficients.length;\n        const product = new Uint8ClampedArray(size);\n        for (let i = 0; i < size; i++) {\n            product[i] = this.field.multiply(this.coefficients[i], scalar);\n        }\n        return new GenericGFPoly(this.field, product);\n    }\n    multiplyPoly(other) {\n        if (this.isZero() || other.isZero()) {\n            return this.field.zero;\n        }\n        const aCoefficients = this.coefficients;\n        const aLength = aCoefficients.length;\n        const bCoefficients = other.coefficients;\n        const bLength = bCoefficients.length;\n        const product = new Uint8ClampedArray(aLength + bLength - 1);\n        for (let i = 0; i < aLength; i++) {\n            const aCoeff = aCoefficients[i];\n            for (let j = 0; j < bLength; j++) {\n                product[i + j] = addOrSubtractGF(product[i + j], this.field.multiply(aCoeff, bCoefficients[j]));\n            }\n        }\n        return new GenericGFPoly(this.field, product);\n    }\n    multiplyByMonomial(degree, coefficient) {\n        if (degree < 0) {\n            throw new Error(\"Invalid degree less than 0\");\n        }\n        if (coefficient === 0) {\n            return this.field.zero;\n        }\n        const size = this.coefficients.length;\n        const product = new Uint8ClampedArray(size + degree);\n        for (let i = 0; i < size; i++) {\n            product[i] = this.field.multiply(this.coefficients[i], coefficient);\n        }\n        return new GenericGFPoly(this.field, product);\n    }\n    evaluateAt(a) {\n        let result = 0;\n        if (a === 0) {\n            // Just return the x^0 coefficient\n            return this.getCoefficient(0);\n        }\n        const size = this.coefficients.length;\n        if (a === 1) {\n            // Just the sum of the coefficients\n            this.coefficients.forEach((coefficient) => {\n                result = addOrSubtractGF(result, coefficient);\n            });\n            return result;\n        }\n        result = this.coefficients[0];\n        for (let i = 1; i < size; i++) {\n            result = addOrSubtractGF(this.field.multiply(a, result), this.coefficients[i]);\n        }\n        return result;\n    }\n}\n\nfunction addOrSubtractGF(a, b) {\n    return a ^ b; // tslint:disable-line:no-bitwise\n}\nclass GenericGF {\n    constructor(primitive, size, genBase) {\n        this.primitive = primitive;\n        this.size = size;\n        this.generatorBase = genBase;\n        this.expTable = new Array(this.size);\n        this.logTable = new Array(this.size);\n        let x = 1;\n        for (let i = 0; i < this.size; i++) {\n            this.expTable[i] = x;\n            x = x * 2;\n            if (x >= this.size) {\n                x = (x ^ this.primitive) & (this.size - 1); // tslint:disable-line:no-bitwise\n            }\n        }\n        for (let i = 0; i < this.size - 1; i++) {\n            this.logTable[this.expTable[i]] = i;\n        }\n        this.zero = new GenericGFPoly(this, Uint8ClampedArray.from([0]));\n        this.one = new GenericGFPoly(this, Uint8ClampedArray.from([1]));\n    }\n    multiply(a, b) {\n        if (a === 0 || b === 0) {\n            return 0;\n        }\n        return this.expTable[(this.logTable[a] + this.logTable[b]) % (this.size - 1)];\n    }\n    inverse(a) {\n        if (a === 0) {\n            throw new Error(\"Can't invert 0\");\n        }\n        return this.expTable[this.size - this.logTable[a] - 1];\n    }\n    buildMonomial(degree, coefficient) {\n        if (degree < 0) {\n            throw new Error(\"Invalid monomial degree less than 0\");\n        }\n        if (coefficient === 0) {\n            return this.zero;\n        }\n        const coefficients = new Uint8ClampedArray(degree + 1);\n        coefficients[0] = coefficient;\n        return new GenericGFPoly(this, coefficients);\n    }\n    log(a) {\n        if (a === 0) {\n            throw new Error(\"Can't take log(0)\");\n        }\n        return this.logTable[a];\n    }\n    exp(a) {\n        return this.expTable[a];\n    }\n}\n\nfunction runEuclideanAlgorithm(field, a, b, R) {\n    // Assume a's degree is >= b's\n    if (a.degree() < b.degree()) {\n        [a, b] = [b, a];\n    }\n    let rLast = a;\n    let r = b;\n    let tLast = field.zero;\n    let t = field.one;\n    // Run Euclidean algorithm until r's degree is less than R/2\n    while (r.degree() >= R / 2) {\n        const rLastLast = rLast;\n        const tLastLast = tLast;\n        rLast = r;\n        tLast = t;\n        // Divide rLastLast by rLast, with quotient in q and remainder in r\n        if (rLast.isZero()) {\n            // Euclidean algorithm already terminated?\n            return null;\n        }\n        r = rLastLast;\n        let q = field.zero;\n        const denominatorLeadingTerm = rLast.getCoefficient(rLast.degree());\n        const dltInverse = field.inverse(denominatorLeadingTerm);\n        while (r.degree() >= rLast.degree() && !r.isZero()) {\n            const degreeDiff = r.degree() - rLast.degree();\n            const scale = field.multiply(r.getCoefficient(r.degree()), dltInverse);\n            q = q.addOrSubtract(field.buildMonomial(degreeDiff, scale));\n            r = r.addOrSubtract(rLast.multiplyByMonomial(degreeDiff, scale));\n        }\n        t = q.multiplyPoly(tLast).addOrSubtract(tLastLast);\n        if (r.degree() >= rLast.degree()) {\n            return null;\n        }\n    }\n    const sigmaTildeAtZero = t.getCoefficient(0);\n    if (sigmaTildeAtZero === 0) {\n        return null;\n    }\n    const inverse = field.inverse(sigmaTildeAtZero);\n    return [t.multiply(inverse), r.multiply(inverse)];\n}\nfunction findErrorLocations(field, errorLocator) {\n    // This is a direct application of Chien's search\n    const numErrors = errorLocator.degree();\n    if (numErrors === 1) {\n        return [errorLocator.getCoefficient(1)];\n    }\n    const result = new Array(numErrors);\n    let errorCount = 0;\n    for (let i = 1; i < field.size && errorCount < numErrors; i++) {\n        if (errorLocator.evaluateAt(i) === 0) {\n            result[errorCount] = field.inverse(i);\n            errorCount++;\n        }\n    }\n    if (errorCount !== numErrors) {\n        return null;\n    }\n    return result;\n}\nfunction findErrorMagnitudes(field, errorEvaluator, errorLocations) {\n    // This is directly applying Forney's Formula\n    const s = errorLocations.length;\n    const result = new Array(s);\n    for (let i = 0; i < s; i++) {\n        const xiInverse = field.inverse(errorLocations[i]);\n        let denominator = 1;\n        for (let j = 0; j < s; j++) {\n            if (i !== j) {\n                denominator = field.multiply(denominator, addOrSubtractGF(1, field.multiply(errorLocations[j], xiInverse)));\n            }\n        }\n        result[i] = field.multiply(errorEvaluator.evaluateAt(xiInverse), field.inverse(denominator));\n        if (field.generatorBase !== 0) {\n            result[i] = field.multiply(result[i], xiInverse);\n        }\n    }\n    return result;\n}\nfunction decode$1(bytes, twoS) {\n    const outputBytes = new Uint8ClampedArray(bytes.length);\n    outputBytes.set(bytes);\n    const field = new GenericGF(0x011D, 256, 0); // x^8 + x^4 + x^3 + x^2 + 1\n    const poly = new GenericGFPoly(field, outputBytes);\n    const syndromeCoefficients = new Uint8ClampedArray(twoS);\n    let error = false;\n    for (let s = 0; s < twoS; s++) {\n        const evaluation = poly.evaluateAt(field.exp(s + field.generatorBase));\n        syndromeCoefficients[syndromeCoefficients.length - 1 - s] = evaluation;\n        if (evaluation !== 0) {\n            error = true;\n        }\n    }\n    if (!error) {\n        return outputBytes;\n    }\n    const syndrome = new GenericGFPoly(field, syndromeCoefficients);\n    const sigmaOmega = runEuclideanAlgorithm(field, field.buildMonomial(twoS, 1), syndrome, twoS);\n    if (sigmaOmega === null) {\n        return null;\n    }\n    const errorLocations = findErrorLocations(field, sigmaOmega[0]);\n    if (errorLocations == null) {\n        return null;\n    }\n    const errorMagnitudes = findErrorMagnitudes(field, sigmaOmega[1], errorLocations);\n    for (let i = 0; i < errorLocations.length; i++) {\n        const position = outputBytes.length - 1 - field.log(errorLocations[i]);\n        if (position < 0) {\n            return null;\n        }\n        outputBytes[position] = addOrSubtractGF(outputBytes[position], errorMagnitudes[i]);\n    }\n    return outputBytes;\n}\n\nconst VERSIONS = [\n    {\n        infoBits: null,\n        versionNumber: 1,\n        alignmentPatternCenters: [],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 7,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 19 }],\n            },\n            {\n                ecCodewordsPerBlock: 10,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 16 }],\n            },\n            {\n                ecCodewordsPerBlock: 13,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 13 }],\n            },\n            {\n                ecCodewordsPerBlock: 17,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 9 }],\n            },\n        ],\n    },\n    {\n        infoBits: null,\n        versionNumber: 2,\n        alignmentPatternCenters: [6, 18],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 10,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 34 }],\n            },\n            {\n                ecCodewordsPerBlock: 16,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 28 }],\n            },\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 22 }],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 16 }],\n            },\n        ],\n    },\n    {\n        infoBits: null,\n        versionNumber: 3,\n        alignmentPatternCenters: [6, 22],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 15,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 55 }],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 44 }],\n            },\n            {\n                ecCodewordsPerBlock: 18,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 17 }],\n            },\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 13 }],\n            },\n        ],\n    },\n    {\n        infoBits: null,\n        versionNumber: 4,\n        alignmentPatternCenters: [6, 26],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 20,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 80 }],\n            },\n            {\n                ecCodewordsPerBlock: 18,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 32 }],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 24 }],\n            },\n            {\n                ecCodewordsPerBlock: 16,\n                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 9 }],\n            },\n        ],\n    },\n    {\n        infoBits: null,\n        versionNumber: 5,\n        alignmentPatternCenters: [6, 30],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 108 }],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 43 }],\n            },\n            {\n                ecCodewordsPerBlock: 18,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 16 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 11 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 12 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: null,\n        versionNumber: 6,\n        alignmentPatternCenters: [6, 34],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 18,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 68 }],\n            },\n            {\n                ecCodewordsPerBlock: 16,\n                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 27 }],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 19 }],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 15 }],\n            },\n        ],\n    },\n    {\n        infoBits: 0x07C94,\n        versionNumber: 7,\n        alignmentPatternCenters: [6, 22, 38],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 20,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 78 }],\n            },\n            {\n                ecCodewordsPerBlock: 18,\n                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 31 }],\n            },\n            {\n                ecCodewordsPerBlock: 18,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 14 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 15 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 13 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 14 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x085BC,\n        versionNumber: 8,\n        alignmentPatternCenters: [6, 24, 42],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 97 }],\n            },\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 38 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 39 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 18 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 19 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 14 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 15 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x09A99,\n        versionNumber: 9,\n        alignmentPatternCenters: [6, 26, 46],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 116 }],\n            },\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 36 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 37 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 20,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 16 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 17 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 12 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 13 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x0A4D3,\n        versionNumber: 10,\n        alignmentPatternCenters: [6, 28, 50],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 18,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 68 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 69 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 43 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 44 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 6, dataCodewordsPerBlock: 19 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 20 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 6, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x0BBF6,\n        versionNumber: 11,\n        alignmentPatternCenters: [6, 30, 54],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 20,\n                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 81 }],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 1, dataCodewordsPerBlock: 50 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 51 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 22 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 23 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 12 },\n                    { numBlocks: 8, dataCodewordsPerBlock: 13 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x0C762,\n        versionNumber: 12,\n        alignmentPatternCenters: [6, 32, 58],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 92 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 93 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                    { numBlocks: 6, dataCodewordsPerBlock: 36 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 37 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 20 },\n                    { numBlocks: 6, dataCodewordsPerBlock: 21 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 7, dataCodewordsPerBlock: 14 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 15 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x0D847,\n        versionNumber: 13,\n        alignmentPatternCenters: [6, 34, 62],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 107 }],\n            },\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                    { numBlocks: 8, dataCodewordsPerBlock: 37 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 38 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 8, dataCodewordsPerBlock: 20 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 21 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                    { numBlocks: 12, dataCodewordsPerBlock: 11 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 12 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x0E60D,\n        versionNumber: 14,\n        alignmentPatternCenters: [6, 26, 46, 66],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 115 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 116 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 40 },\n                    { numBlocks: 5, dataCodewordsPerBlock: 41 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 20,\n                ecBlocks: [\n                    { numBlocks: 11, dataCodewordsPerBlock: 16 },\n                    { numBlocks: 5, dataCodewordsPerBlock: 17 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 11, dataCodewordsPerBlock: 12 },\n                    { numBlocks: 5, dataCodewordsPerBlock: 13 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x0F928,\n        versionNumber: 15,\n        alignmentPatternCenters: [6, 26, 48, 70],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 22,\n                ecBlocks: [\n                    { numBlocks: 5, dataCodewordsPerBlock: 87 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 88 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 5, dataCodewordsPerBlock: 41 },\n                    { numBlocks: 5, dataCodewordsPerBlock: 42 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 5, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 7, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 11, dataCodewordsPerBlock: 12 },\n                    { numBlocks: 7, dataCodewordsPerBlock: 13 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x10B78,\n        versionNumber: 16,\n        alignmentPatternCenters: [6, 26, 50, 74],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 5, dataCodewordsPerBlock: 98 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 99 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 7, dataCodewordsPerBlock: 45 },\n                    { numBlocks: 3, dataCodewordsPerBlock: 46 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [\n                    { numBlocks: 15, dataCodewordsPerBlock: 19 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 20 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 13, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x1145D,\n        versionNumber: 17,\n        alignmentPatternCenters: [6, 30, 54, 78],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 1, dataCodewordsPerBlock: 107 },\n                    { numBlocks: 5, dataCodewordsPerBlock: 108 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 10, dataCodewordsPerBlock: 46 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 47 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 1, dataCodewordsPerBlock: 22 },\n                    { numBlocks: 15, dataCodewordsPerBlock: 23 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 14 },\n                    { numBlocks: 17, dataCodewordsPerBlock: 15 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x12A17,\n        versionNumber: 18,\n        alignmentPatternCenters: [6, 30, 56, 82],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 5, dataCodewordsPerBlock: 120 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 121 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 9, dataCodewordsPerBlock: 43 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 44 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 17, dataCodewordsPerBlock: 22 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 23 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 14 },\n                    { numBlocks: 19, dataCodewordsPerBlock: 15 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x13532,\n        versionNumber: 19,\n        alignmentPatternCenters: [6, 30, 58, 86],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 113 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 114 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 44 },\n                    { numBlocks: 11, dataCodewordsPerBlock: 45 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 17, dataCodewordsPerBlock: 21 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 22 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 9, dataCodewordsPerBlock: 13 },\n                    { numBlocks: 16, dataCodewordsPerBlock: 14 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x149A6,\n        versionNumber: 20,\n        alignmentPatternCenters: [6, 34, 62, 90],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 107 },\n                    { numBlocks: 5, dataCodewordsPerBlock: 108 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 41 },\n                    { numBlocks: 13, dataCodewordsPerBlock: 42 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 15, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 5, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 15, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 10, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x15683,\n        versionNumber: 21,\n        alignmentPatternCenters: [6, 28, 50, 72, 94],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 116 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 117 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [{ numBlocks: 17, dataCodewordsPerBlock: 42 }],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 17, dataCodewordsPerBlock: 22 },\n                    { numBlocks: 6, dataCodewordsPerBlock: 23 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 19, dataCodewordsPerBlock: 16 },\n                    { numBlocks: 6, dataCodewordsPerBlock: 17 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x168C9,\n        versionNumber: 22,\n        alignmentPatternCenters: [6, 26, 50, 74, 98],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 111 },\n                    { numBlocks: 7, dataCodewordsPerBlock: 112 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [{ numBlocks: 17, dataCodewordsPerBlock: 46 }],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 7, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 16, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 24,\n                ecBlocks: [{ numBlocks: 34, dataCodewordsPerBlock: 13 }],\n            },\n        ],\n    },\n    {\n        infoBits: 0x177EC,\n        versionNumber: 23,\n        alignmentPatternCenters: [6, 30, 54, 74, 102],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 121 },\n                    { numBlocks: 5, dataCodewordsPerBlock: 122 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 47 },\n                    { numBlocks: 14, dataCodewordsPerBlock: 48 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 11, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 14, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 16, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 14, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x18EC4,\n        versionNumber: 24,\n        alignmentPatternCenters: [6, 28, 54, 80, 106],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 6, dataCodewordsPerBlock: 117 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 118 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 6, dataCodewordsPerBlock: 45 },\n                    { numBlocks: 14, dataCodewordsPerBlock: 46 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 11, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 16, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 30, dataCodewordsPerBlock: 16 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 17 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x191E1,\n        versionNumber: 25,\n        alignmentPatternCenters: [6, 32, 58, 84, 110],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 26,\n                ecBlocks: [\n                    { numBlocks: 8, dataCodewordsPerBlock: 106 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 107 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 8, dataCodewordsPerBlock: 47 },\n                    { numBlocks: 13, dataCodewordsPerBlock: 48 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 7, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 22, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 22, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 13, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x1AFAB,\n        versionNumber: 26,\n        alignmentPatternCenters: [6, 30, 58, 86, 114],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 10, dataCodewordsPerBlock: 114 },\n                    { numBlocks: 2, dataCodewordsPerBlock: 115 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 19, dataCodewordsPerBlock: 46 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 47 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 28, dataCodewordsPerBlock: 22 },\n                    { numBlocks: 6, dataCodewordsPerBlock: 23 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 33, dataCodewordsPerBlock: 16 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 17 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x1B08E,\n        versionNumber: 27,\n        alignmentPatternCenters: [6, 34, 62, 90, 118],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 8, dataCodewordsPerBlock: 122 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 123 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 22, dataCodewordsPerBlock: 45 },\n                    { numBlocks: 3, dataCodewordsPerBlock: 46 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 8, dataCodewordsPerBlock: 23 },\n                    { numBlocks: 26, dataCodewordsPerBlock: 24 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 12, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 28, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x1CC1A,\n        versionNumber: 28,\n        alignmentPatternCenters: [6, 26, 50, 74, 98, 122],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 117 },\n                    { numBlocks: 10, dataCodewordsPerBlock: 118 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 3, dataCodewordsPerBlock: 45 },\n                    { numBlocks: 23, dataCodewordsPerBlock: 46 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 31, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 11, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 31, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x1D33F,\n        versionNumber: 29,\n        alignmentPatternCenters: [6, 30, 54, 78, 102, 126],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 7, dataCodewordsPerBlock: 116 },\n                    { numBlocks: 7, dataCodewordsPerBlock: 117 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 21, dataCodewordsPerBlock: 45 },\n                    { numBlocks: 7, dataCodewordsPerBlock: 46 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 1, dataCodewordsPerBlock: 23 },\n                    { numBlocks: 37, dataCodewordsPerBlock: 24 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 19, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 26, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x1ED75,\n        versionNumber: 30,\n        alignmentPatternCenters: [6, 26, 52, 78, 104, 130],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 5, dataCodewordsPerBlock: 115 },\n                    { numBlocks: 10, dataCodewordsPerBlock: 116 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 19, dataCodewordsPerBlock: 47 },\n                    { numBlocks: 10, dataCodewordsPerBlock: 48 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 15, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 25, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 23, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 25, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x1F250,\n        versionNumber: 31,\n        alignmentPatternCenters: [6, 30, 56, 82, 108, 134],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 13, dataCodewordsPerBlock: 115 },\n                    { numBlocks: 3, dataCodewordsPerBlock: 116 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 46 },\n                    { numBlocks: 29, dataCodewordsPerBlock: 47 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 42, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 23, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 28, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x209D5,\n        versionNumber: 32,\n        alignmentPatternCenters: [6, 34, 60, 86, 112, 138],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [{ numBlocks: 17, dataCodewordsPerBlock: 115 }],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 10, dataCodewordsPerBlock: 46 },\n                    { numBlocks: 23, dataCodewordsPerBlock: 47 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 10, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 35, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 19, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 35, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x216F0,\n        versionNumber: 33,\n        alignmentPatternCenters: [6, 30, 58, 86, 114, 142],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 17, dataCodewordsPerBlock: 115 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 116 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 14, dataCodewordsPerBlock: 46 },\n                    { numBlocks: 21, dataCodewordsPerBlock: 47 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 29, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 19, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 11, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 46, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x228BA,\n        versionNumber: 34,\n        alignmentPatternCenters: [6, 34, 62, 90, 118, 146],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 13, dataCodewordsPerBlock: 115 },\n                    { numBlocks: 6, dataCodewordsPerBlock: 116 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 14, dataCodewordsPerBlock: 46 },\n                    { numBlocks: 23, dataCodewordsPerBlock: 47 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 44, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 7, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 59, dataCodewordsPerBlock: 16 },\n                    { numBlocks: 1, dataCodewordsPerBlock: 17 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x2379F,\n        versionNumber: 35,\n        alignmentPatternCenters: [6, 30, 54, 78, 102, 126, 150],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 12, dataCodewordsPerBlock: 121 },\n                    { numBlocks: 7, dataCodewordsPerBlock: 122 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 12, dataCodewordsPerBlock: 47 },\n                    { numBlocks: 26, dataCodewordsPerBlock: 48 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 39, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 14, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 22, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 41, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x24B0B,\n        versionNumber: 36,\n        alignmentPatternCenters: [6, 24, 50, 76, 102, 128, 154],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 6, dataCodewordsPerBlock: 121 },\n                    { numBlocks: 14, dataCodewordsPerBlock: 122 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 6, dataCodewordsPerBlock: 47 },\n                    { numBlocks: 34, dataCodewordsPerBlock: 48 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 46, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 10, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 2, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 64, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x2542E,\n        versionNumber: 37,\n        alignmentPatternCenters: [6, 28, 54, 80, 106, 132, 158],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 17, dataCodewordsPerBlock: 122 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 123 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 29, dataCodewordsPerBlock: 46 },\n                    { numBlocks: 14, dataCodewordsPerBlock: 47 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 49, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 10, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 24, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 46, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x26A64,\n        versionNumber: 38,\n        alignmentPatternCenters: [6, 32, 58, 84, 110, 136, 162],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 4, dataCodewordsPerBlock: 122 },\n                    { numBlocks: 18, dataCodewordsPerBlock: 123 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 13, dataCodewordsPerBlock: 46 },\n                    { numBlocks: 32, dataCodewordsPerBlock: 47 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 48, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 14, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 42, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 32, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x27541,\n        versionNumber: 39,\n        alignmentPatternCenters: [6, 26, 54, 82, 110, 138, 166],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 20, dataCodewordsPerBlock: 117 },\n                    { numBlocks: 4, dataCodewordsPerBlock: 118 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 40, dataCodewordsPerBlock: 47 },\n                    { numBlocks: 7, dataCodewordsPerBlock: 48 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 43, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 22, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 10, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 67, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n    {\n        infoBits: 0x28C69,\n        versionNumber: 40,\n        alignmentPatternCenters: [6, 30, 58, 86, 114, 142, 170],\n        errorCorrectionLevels: [\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 19, dataCodewordsPerBlock: 118 },\n                    { numBlocks: 6, dataCodewordsPerBlock: 119 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 28,\n                ecBlocks: [\n                    { numBlocks: 18, dataCodewordsPerBlock: 47 },\n                    { numBlocks: 31, dataCodewordsPerBlock: 48 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 34, dataCodewordsPerBlock: 24 },\n                    { numBlocks: 34, dataCodewordsPerBlock: 25 },\n                ],\n            },\n            {\n                ecCodewordsPerBlock: 30,\n                ecBlocks: [\n                    { numBlocks: 20, dataCodewordsPerBlock: 15 },\n                    { numBlocks: 61, dataCodewordsPerBlock: 16 },\n                ],\n            },\n        ],\n    },\n];\n\n// tslint:disable:no-bitwise\nfunction numBitsDiffering(x, y) {\n    let z = x ^ y;\n    let bitCount = 0;\n    while (z) {\n        bitCount++;\n        z &= z - 1;\n    }\n    return bitCount;\n}\nfunction pushBit(bit, byte) {\n    return (byte << 1) | bit;\n}\n// tslint:enable:no-bitwise\nconst FORMAT_INFO_TABLE = [\n    { bits: 0x5412, formatInfo: { errorCorrectionLevel: 1, dataMask: 0 } },\n    { bits: 0x5125, formatInfo: { errorCorrectionLevel: 1, dataMask: 1 } },\n    { bits: 0x5E7C, formatInfo: { errorCorrectionLevel: 1, dataMask: 2 } },\n    { bits: 0x5B4B, formatInfo: { errorCorrectionLevel: 1, dataMask: 3 } },\n    { bits: 0x45F9, formatInfo: { errorCorrectionLevel: 1, dataMask: 4 } },\n    { bits: 0x40CE, formatInfo: { errorCorrectionLevel: 1, dataMask: 5 } },\n    { bits: 0x4F97, formatInfo: { errorCorrectionLevel: 1, dataMask: 6 } },\n    { bits: 0x4AA0, formatInfo: { errorCorrectionLevel: 1, dataMask: 7 } },\n    { bits: 0x77C4, formatInfo: { errorCorrectionLevel: 0, dataMask: 0 } },\n    { bits: 0x72F3, formatInfo: { errorCorrectionLevel: 0, dataMask: 1 } },\n    { bits: 0x7DAA, formatInfo: { errorCorrectionLevel: 0, dataMask: 2 } },\n    { bits: 0x789D, formatInfo: { errorCorrectionLevel: 0, dataMask: 3 } },\n    { bits: 0x662F, formatInfo: { errorCorrectionLevel: 0, dataMask: 4 } },\n    { bits: 0x6318, formatInfo: { errorCorrectionLevel: 0, dataMask: 5 } },\n    { bits: 0x6C41, formatInfo: { errorCorrectionLevel: 0, dataMask: 6 } },\n    { bits: 0x6976, formatInfo: { errorCorrectionLevel: 0, dataMask: 7 } },\n    { bits: 0x1689, formatInfo: { errorCorrectionLevel: 3, dataMask: 0 } },\n    { bits: 0x13BE, formatInfo: { errorCorrectionLevel: 3, dataMask: 1 } },\n    { bits: 0x1CE7, formatInfo: { errorCorrectionLevel: 3, dataMask: 2 } },\n    { bits: 0x19D0, formatInfo: { errorCorrectionLevel: 3, dataMask: 3 } },\n    { bits: 0x0762, formatInfo: { errorCorrectionLevel: 3, dataMask: 4 } },\n    { bits: 0x0255, formatInfo: { errorCorrectionLevel: 3, dataMask: 5 } },\n    { bits: 0x0D0C, formatInfo: { errorCorrectionLevel: 3, dataMask: 6 } },\n    { bits: 0x083B, formatInfo: { errorCorrectionLevel: 3, dataMask: 7 } },\n    { bits: 0x355F, formatInfo: { errorCorrectionLevel: 2, dataMask: 0 } },\n    { bits: 0x3068, formatInfo: { errorCorrectionLevel: 2, dataMask: 1 } },\n    { bits: 0x3F31, formatInfo: { errorCorrectionLevel: 2, dataMask: 2 } },\n    { bits: 0x3A06, formatInfo: { errorCorrectionLevel: 2, dataMask: 3 } },\n    { bits: 0x24B4, formatInfo: { errorCorrectionLevel: 2, dataMask: 4 } },\n    { bits: 0x2183, formatInfo: { errorCorrectionLevel: 2, dataMask: 5 } },\n    { bits: 0x2EDA, formatInfo: { errorCorrectionLevel: 2, dataMask: 6 } },\n    { bits: 0x2BED, formatInfo: { errorCorrectionLevel: 2, dataMask: 7 } },\n];\nconst DATA_MASKS = [\n    (p) => ((p.y + p.x) % 2) === 0,\n    (p) => (p.y % 2) === 0,\n    (p) => p.x % 3 === 0,\n    (p) => (p.y + p.x) % 3 === 0,\n    (p) => (Math.floor(p.y / 2) + Math.floor(p.x / 3)) % 2 === 0,\n    (p) => ((p.x * p.y) % 2) + ((p.x * p.y) % 3) === 0,\n    (p) => ((((p.y * p.x) % 2) + (p.y * p.x) % 3) % 2) === 0,\n    (p) => ((((p.y + p.x) % 2) + (p.y * p.x) % 3) % 2) === 0,\n];\nfunction buildFunctionPatternMask(version) {\n    const dimension = 17 + 4 * version.versionNumber;\n    const matrix = BitMatrix.createEmpty(dimension, dimension);\n    matrix.setRegion(0, 0, 9, 9, true); // Top left finder pattern + separator + format\n    matrix.setRegion(dimension - 8, 0, 8, 9, true); // Top right finder pattern + separator + format\n    matrix.setRegion(0, dimension - 8, 9, 8, true); // Bottom left finder pattern + separator + format\n    // Alignment patterns\n    for (const x of version.alignmentPatternCenters) {\n        for (const y of version.alignmentPatternCenters) {\n            if (!(x === 6 && y === 6 || x === 6 && y === dimension - 7 || x === dimension - 7 && y === 6)) {\n                matrix.setRegion(x - 2, y - 2, 5, 5, true);\n            }\n        }\n    }\n    matrix.setRegion(6, 9, 1, dimension - 17, true); // Vertical timing pattern\n    matrix.setRegion(9, 6, dimension - 17, 1, true); // Horizontal timing pattern\n    if (version.versionNumber > 6) {\n        matrix.setRegion(dimension - 11, 0, 3, 6, true); // Version info, top right\n        matrix.setRegion(0, dimension - 11, 6, 3, true); // Version info, bottom left\n    }\n    return matrix;\n}\nfunction readCodewords(matrix, version, formatInfo) {\n    const dataMask = DATA_MASKS[formatInfo.dataMask];\n    const dimension = matrix.height;\n    const functionPatternMask = buildFunctionPatternMask(version);\n    const codewords = [];\n    let currentByte = 0;\n    let bitsRead = 0;\n    // Read columns in pairs, from right to left\n    let readingUp = true;\n    for (let columnIndex = dimension - 1; columnIndex > 0; columnIndex -= 2) {\n        if (columnIndex === 6) { // Skip whole column with vertical alignment pattern;\n            columnIndex--;\n        }\n        for (let i = 0; i < dimension; i++) {\n            const y = readingUp ? dimension - 1 - i : i;\n            for (let columnOffset = 0; columnOffset < 2; columnOffset++) {\n                const x = columnIndex - columnOffset;\n                if (!functionPatternMask.get(x, y)) {\n                    bitsRead++;\n                    let bit = matrix.get(x, y);\n                    if (dataMask({ y, x })) {\n                        bit = !bit;\n                    }\n                    currentByte = pushBit(bit, currentByte);\n                    if (bitsRead === 8) { // Whole bytes\n                        codewords.push(currentByte);\n                        bitsRead = 0;\n                        currentByte = 0;\n                    }\n                }\n            }\n        }\n        readingUp = !readingUp;\n    }\n    return codewords;\n}\nfunction readVersion(matrix) {\n    const dimension = matrix.height;\n    const provisionalVersion = Math.floor((dimension - 17) / 4);\n    if (provisionalVersion <= 6) { // 6 and under dont have version info in the QR code\n        return VERSIONS[provisionalVersion - 1];\n    }\n    let topRightVersionBits = 0;\n    for (let y = 5; y >= 0; y--) {\n        for (let x = dimension - 9; x >= dimension - 11; x--) {\n            topRightVersionBits = pushBit(matrix.get(x, y), topRightVersionBits);\n        }\n    }\n    let bottomLeftVersionBits = 0;\n    for (let x = 5; x >= 0; x--) {\n        for (let y = dimension - 9; y >= dimension - 11; y--) {\n            bottomLeftVersionBits = pushBit(matrix.get(x, y), bottomLeftVersionBits);\n        }\n    }\n    let bestDifference = Infinity;\n    let bestVersion;\n    for (const version of VERSIONS) {\n        if (version.infoBits === topRightVersionBits || version.infoBits === bottomLeftVersionBits) {\n            return version;\n        }\n        let difference = numBitsDiffering(topRightVersionBits, version.infoBits);\n        if (difference < bestDifference) {\n            bestVersion = version;\n            bestDifference = difference;\n        }\n        difference = numBitsDiffering(bottomLeftVersionBits, version.infoBits);\n        if (difference < bestDifference) {\n            bestVersion = version;\n            bestDifference = difference;\n        }\n    }\n    // We can tolerate up to 3 bits of error since no two version info codewords will\n    // differ in less than 8 bits.\n    if (bestDifference <= 3) {\n        return bestVersion;\n    }\n}\nfunction readFormatInformation(matrix) {\n    let topLeftFormatInfoBits = 0;\n    for (let x = 0; x <= 8; x++) {\n        if (x !== 6) { // Skip timing pattern bit\n            topLeftFormatInfoBits = pushBit(matrix.get(x, 8), topLeftFormatInfoBits);\n        }\n    }\n    for (let y = 7; y >= 0; y--) {\n        if (y !== 6) { // Skip timing pattern bit\n            topLeftFormatInfoBits = pushBit(matrix.get(8, y), topLeftFormatInfoBits);\n        }\n    }\n    const dimension = matrix.height;\n    let topRightBottomRightFormatInfoBits = 0;\n    for (let y = dimension - 1; y >= dimension - 7; y--) { // bottom left\n        topRightBottomRightFormatInfoBits = pushBit(matrix.get(8, y), topRightBottomRightFormatInfoBits);\n    }\n    for (let x = dimension - 8; x < dimension; x++) { // top right\n        topRightBottomRightFormatInfoBits = pushBit(matrix.get(x, 8), topRightBottomRightFormatInfoBits);\n    }\n    let bestDifference = Infinity;\n    let bestFormatInfo = null;\n    for (const { bits, formatInfo } of FORMAT_INFO_TABLE) {\n        if (bits === topLeftFormatInfoBits || bits === topRightBottomRightFormatInfoBits) {\n            return formatInfo;\n        }\n        let difference = numBitsDiffering(topLeftFormatInfoBits, bits);\n        if (difference < bestDifference) {\n            bestFormatInfo = formatInfo;\n            bestDifference = difference;\n        }\n        if (topLeftFormatInfoBits !== topRightBottomRightFormatInfoBits) { // also try the other option\n            difference = numBitsDiffering(topRightBottomRightFormatInfoBits, bits);\n            if (difference < bestDifference) {\n                bestFormatInfo = formatInfo;\n                bestDifference = difference;\n            }\n        }\n    }\n    // Hamming distance of the 32 masked codes is 7, by construction, so <= 3 bits differing means we found a match\n    if (bestDifference <= 3) {\n        return bestFormatInfo;\n    }\n    return null;\n}\nfunction getDataBlocks(codewords, version, ecLevel) {\n    const ecInfo = version.errorCorrectionLevels[ecLevel];\n    const dataBlocks = [];\n    let totalCodewords = 0;\n    ecInfo.ecBlocks.forEach(block => {\n        for (let i = 0; i < block.numBlocks; i++) {\n            dataBlocks.push({ numDataCodewords: block.dataCodewordsPerBlock, codewords: [] });\n            totalCodewords += block.dataCodewordsPerBlock + ecInfo.ecCodewordsPerBlock;\n        }\n    });\n    // In some cases the QR code will be malformed enough that we pull off more or less than we should.\n    // If we pull off less there's nothing we can do.\n    // If we pull off more we can safely truncate\n    if (codewords.length < totalCodewords) {\n        return null;\n    }\n    codewords = codewords.slice(0, totalCodewords);\n    const shortBlockSize = ecInfo.ecBlocks[0].dataCodewordsPerBlock;\n    // Pull codewords to fill the blocks up to the minimum size\n    for (let i = 0; i < shortBlockSize; i++) {\n        for (const dataBlock of dataBlocks) {\n            dataBlock.codewords.push(codewords.shift());\n        }\n    }\n    // If there are any large blocks, pull codewords to fill the last element of those\n    if (ecInfo.ecBlocks.length > 1) {\n        const smallBlockCount = ecInfo.ecBlocks[0].numBlocks;\n        const largeBlockCount = ecInfo.ecBlocks[1].numBlocks;\n        for (let i = 0; i < largeBlockCount; i++) {\n            dataBlocks[smallBlockCount + i].codewords.push(codewords.shift());\n        }\n    }\n    // Add the rest of the codewords to the blocks. These are the error correction codewords.\n    while (codewords.length > 0) {\n        for (const dataBlock of dataBlocks) {\n            dataBlock.codewords.push(codewords.shift());\n        }\n    }\n    return dataBlocks;\n}\nfunction decodeMatrix(matrix) {\n    const version = readVersion(matrix);\n    if (!version) {\n        return null;\n    }\n    const formatInfo = readFormatInformation(matrix);\n    if (!formatInfo) {\n        return null;\n    }\n    const codewords = readCodewords(matrix, version, formatInfo);\n    const dataBlocks = getDataBlocks(codewords, version, formatInfo.errorCorrectionLevel);\n    if (!dataBlocks) {\n        return null;\n    }\n    // Count total number of data bytes\n    const totalBytes = dataBlocks.reduce((a, b) => a + b.numDataCodewords, 0);\n    const resultBytes = new Uint8ClampedArray(totalBytes);\n    let resultIndex = 0;\n    for (const dataBlock of dataBlocks) {\n        const correctedBytes = decode$1(dataBlock.codewords, dataBlock.codewords.length - dataBlock.numDataCodewords);\n        if (!correctedBytes) {\n            return null;\n        }\n        for (let i = 0; i < dataBlock.numDataCodewords; i++) {\n            resultBytes[resultIndex++] = correctedBytes[i];\n        }\n    }\n    try {\n        return decode(resultBytes, version.versionNumber);\n    }\n    catch (_a) {\n        return null;\n    }\n}\nfunction decode$2(matrix) {\n    if (matrix == null) {\n        return null;\n    }\n    const result = decodeMatrix(matrix);\n    if (result) {\n        return result;\n    }\n    // Decoding didn't work, try mirroring the QR across the topLeft -> bottomRight line.\n    for (let x = 0; x < matrix.width; x++) {\n        for (let y = x + 1; y < matrix.height; y++) {\n            if (matrix.get(x, y) !== matrix.get(y, x)) {\n                matrix.set(x, y, !matrix.get(x, y));\n                matrix.set(y, x, !matrix.get(y, x));\n            }\n        }\n    }\n    return decodeMatrix(matrix);\n}\n\nfunction squareToQuadrilateral(p1, p2, p3, p4) {\n    const dx3 = p1.x - p2.x + p3.x - p4.x;\n    const dy3 = p1.y - p2.y + p3.y - p4.y;\n    if (dx3 === 0 && dy3 === 0) { // Affine\n        return {\n            a11: p2.x - p1.x,\n            a12: p2.y - p1.y,\n            a13: 0,\n            a21: p3.x - p2.x,\n            a22: p3.y - p2.y,\n            a23: 0,\n            a31: p1.x,\n            a32: p1.y,\n            a33: 1,\n        };\n    }\n    else {\n        const dx1 = p2.x - p3.x;\n        const dx2 = p4.x - p3.x;\n        const dy1 = p2.y - p3.y;\n        const dy2 = p4.y - p3.y;\n        const denominator = dx1 * dy2 - dx2 * dy1;\n        const a13 = (dx3 * dy2 - dx2 * dy3) / denominator;\n        const a23 = (dx1 * dy3 - dx3 * dy1) / denominator;\n        return {\n            a11: p2.x - p1.x + a13 * p2.x,\n            a12: p2.y - p1.y + a13 * p2.y,\n            a13,\n            a21: p4.x - p1.x + a23 * p4.x,\n            a22: p4.y - p1.y + a23 * p4.y,\n            a23,\n            a31: p1.x,\n            a32: p1.y,\n            a33: 1,\n        };\n    }\n}\nfunction quadrilateralToSquare(p1, p2, p3, p4) {\n    // Here, the adjoint serves as the inverse:\n    const sToQ = squareToQuadrilateral(p1, p2, p3, p4);\n    return {\n        a11: sToQ.a22 * sToQ.a33 - sToQ.a23 * sToQ.a32,\n        a12: sToQ.a13 * sToQ.a32 - sToQ.a12 * sToQ.a33,\n        a13: sToQ.a12 * sToQ.a23 - sToQ.a13 * sToQ.a22,\n        a21: sToQ.a23 * sToQ.a31 - sToQ.a21 * sToQ.a33,\n        a22: sToQ.a11 * sToQ.a33 - sToQ.a13 * sToQ.a31,\n        a23: sToQ.a13 * sToQ.a21 - sToQ.a11 * sToQ.a23,\n        a31: sToQ.a21 * sToQ.a32 - sToQ.a22 * sToQ.a31,\n        a32: sToQ.a12 * sToQ.a31 - sToQ.a11 * sToQ.a32,\n        a33: sToQ.a11 * sToQ.a22 - sToQ.a12 * sToQ.a21,\n    };\n}\nfunction times(a, b) {\n    return {\n        a11: a.a11 * b.a11 + a.a21 * b.a12 + a.a31 * b.a13,\n        a12: a.a12 * b.a11 + a.a22 * b.a12 + a.a32 * b.a13,\n        a13: a.a13 * b.a11 + a.a23 * b.a12 + a.a33 * b.a13,\n        a21: a.a11 * b.a21 + a.a21 * b.a22 + a.a31 * b.a23,\n        a22: a.a12 * b.a21 + a.a22 * b.a22 + a.a32 * b.a23,\n        a23: a.a13 * b.a21 + a.a23 * b.a22 + a.a33 * b.a23,\n        a31: a.a11 * b.a31 + a.a21 * b.a32 + a.a31 * b.a33,\n        a32: a.a12 * b.a31 + a.a22 * b.a32 + a.a32 * b.a33,\n        a33: a.a13 * b.a31 + a.a23 * b.a32 + a.a33 * b.a33,\n    };\n}\nfunction extract(image, location) {\n    const qToS = quadrilateralToSquare({ x: 3.5, y: 3.5 }, { x: location.dimension - 3.5, y: 3.5 }, { x: location.dimension - 6.5, y: location.dimension - 6.5 }, { x: 3.5, y: location.dimension - 3.5 });\n    const sToQ = squareToQuadrilateral(location.topLeft, location.topRight, location.alignmentPattern, location.bottomLeft);\n    const transform = times(sToQ, qToS);\n    const matrix = BitMatrix.createEmpty(location.dimension, location.dimension);\n    const mappingFunction = (x, y) => {\n        const denominator = transform.a13 * x + transform.a23 * y + transform.a33;\n        return {\n            x: (transform.a11 * x + transform.a21 * y + transform.a31) / denominator,\n            y: (transform.a12 * x + transform.a22 * y + transform.a32) / denominator,\n        };\n    };\n    for (let y = 0; y < location.dimension; y++) {\n        for (let x = 0; x < location.dimension; x++) {\n            const xValue = x + 0.5;\n            const yValue = y + 0.5;\n            const sourcePixel = mappingFunction(xValue, yValue);\n            matrix.set(x, y, image.get(Math.floor(sourcePixel.x), Math.floor(sourcePixel.y)));\n        }\n    }\n    return {\n        matrix,\n        mappingFunction,\n    };\n}\n\nconst MAX_FINDERPATTERNS_TO_SEARCH = 4;\nconst MIN_QUAD_RATIO = 0.5;\nconst MAX_QUAD_RATIO = 1.5;\nconst distance = (a, b) => Math.sqrt(Math.pow((b.x - a.x), 2) + Math.pow((b.y - a.y), 2));\nfunction sum(values) {\n    return values.reduce((a, b) => a + b);\n}\n// Takes three finder patterns and organizes them into topLeft, topRight, etc\nfunction reorderFinderPatterns(pattern1, pattern2, pattern3) {\n    // Find distances between pattern centers\n    const oneTwoDistance = distance(pattern1, pattern2);\n    const twoThreeDistance = distance(pattern2, pattern3);\n    const oneThreeDistance = distance(pattern1, pattern3);\n    let bottomLeft;\n    let topLeft;\n    let topRight;\n    // Assume one closest to other two is B; A and C will just be guesses at first\n    if (twoThreeDistance >= oneTwoDistance && twoThreeDistance >= oneThreeDistance) {\n        [bottomLeft, topLeft, topRight] = [pattern2, pattern1, pattern3];\n    }\n    else if (oneThreeDistance >= twoThreeDistance && oneThreeDistance >= oneTwoDistance) {\n        [bottomLeft, topLeft, topRight] = [pattern1, pattern2, pattern3];\n    }\n    else {\n        [bottomLeft, topLeft, topRight] = [pattern1, pattern3, pattern2];\n    }\n    // Use cross product to figure out whether bottomLeft (A) and topRight (C) are correct or flipped in relation to topLeft (B)\n    // This asks whether BC x BA has a positive z component, which is the arrangement we want. If it's negative, then\n    // we've got it flipped around and should swap topRight and bottomLeft.\n    if (((topRight.x - topLeft.x) * (bottomLeft.y - topLeft.y)) - ((topRight.y - topLeft.y) * (bottomLeft.x - topLeft.x)) < 0) {\n        [bottomLeft, topRight] = [topRight, bottomLeft];\n    }\n    return { bottomLeft, topLeft, topRight };\n}\n// Computes the dimension (number of modules on a side) of the QR Code based on the position of the finder patterns\nfunction computeDimension(topLeft, topRight, bottomLeft, matrix) {\n    const moduleSize = (sum(countBlackWhiteRun(topLeft, bottomLeft, matrix, 5)) / 7 + // Divide by 7 since the ratio is 1:1:3:1:1\n        sum(countBlackWhiteRun(topLeft, topRight, matrix, 5)) / 7 +\n        sum(countBlackWhiteRun(bottomLeft, topLeft, matrix, 5)) / 7 +\n        sum(countBlackWhiteRun(topRight, topLeft, matrix, 5)) / 7) / 4;\n    if (moduleSize < 1) {\n        throw new Error(\"Invalid module size\");\n    }\n    const topDimension = Math.round(distance(topLeft, topRight) / moduleSize);\n    const sideDimension = Math.round(distance(topLeft, bottomLeft) / moduleSize);\n    let dimension = Math.floor((topDimension + sideDimension) / 2) + 7;\n    switch (dimension % 4) {\n        case 0:\n            dimension++;\n            break;\n        case 2:\n            dimension--;\n            break;\n    }\n    return { dimension, moduleSize };\n}\n// Takes an origin point and an end point and counts the sizes of the black white run from the origin towards the end point.\n// Returns an array of elements, representing the pixel size of the black white run.\n// Uses a variant of http://en.wikipedia.org/wiki/Bresenham's_line_algorithm\nfunction countBlackWhiteRunTowardsPoint(origin, end, matrix, length) {\n    const switchPoints = [{ x: Math.floor(origin.x), y: Math.floor(origin.y) }];\n    const steep = Math.abs(end.y - origin.y) > Math.abs(end.x - origin.x);\n    let fromX;\n    let fromY;\n    let toX;\n    let toY;\n    if (steep) {\n        fromX = Math.floor(origin.y);\n        fromY = Math.floor(origin.x);\n        toX = Math.floor(end.y);\n        toY = Math.floor(end.x);\n    }\n    else {\n        fromX = Math.floor(origin.x);\n        fromY = Math.floor(origin.y);\n        toX = Math.floor(end.x);\n        toY = Math.floor(end.y);\n    }\n    const dx = Math.abs(toX - fromX);\n    const dy = Math.abs(toY - fromY);\n    let error = Math.floor(-dx / 2);\n    const xStep = fromX < toX ? 1 : -1;\n    const yStep = fromY < toY ? 1 : -1;\n    let currentPixel = true;\n    // Loop up until x == toX, but not beyond\n    for (let x = fromX, y = fromY; x !== toX + xStep; x += xStep) {\n        // Does current pixel mean we have moved white to black or vice versa?\n        // Scanning black in state 0,2 and white in state 1, so if we find the wrong\n        // color, advance to next state or end if we are in state 2 already\n        const realX = steep ? y : x;\n        const realY = steep ? x : y;\n        if (matrix.get(realX, realY) !== currentPixel) {\n            currentPixel = !currentPixel;\n            switchPoints.push({ x: realX, y: realY });\n            if (switchPoints.length === length + 1) {\n                break;\n            }\n        }\n        error += dy;\n        if (error > 0) {\n            if (y === toY) {\n                break;\n            }\n            y += yStep;\n            error -= dx;\n        }\n    }\n    const distances = [];\n    for (let i = 0; i < length; i++) {\n        if (switchPoints[i] && switchPoints[i + 1]) {\n            distances.push(distance(switchPoints[i], switchPoints[i + 1]));\n        }\n        else {\n            distances.push(0);\n        }\n    }\n    return distances;\n}\n// Takes an origin point and an end point and counts the sizes of the black white run in the origin point\n// along the line that intersects with the end point. Returns an array of elements, representing the pixel sizes\n// of the black white run. Takes a length which represents the number of switches from black to white to look for.\nfunction countBlackWhiteRun(origin, end, matrix, length) {\n    const rise = end.y - origin.y;\n    const run = end.x - origin.x;\n    const towardsEnd = countBlackWhiteRunTowardsPoint(origin, end, matrix, Math.ceil(length / 2));\n    const awayFromEnd = countBlackWhiteRunTowardsPoint(origin, { x: origin.x - run, y: origin.y - rise }, matrix, Math.ceil(length / 2));\n    const middleValue = towardsEnd.shift() + awayFromEnd.shift() - 1; // Substract one so we don't double count a pixel\n    return awayFromEnd.concat(middleValue).concat(...towardsEnd);\n}\n// Takes in a black white run and an array of expected ratios. Returns the average size of the run as well as the \"error\" -\n// that is the amount the run diverges from the expected ratio\nfunction scoreBlackWhiteRun(sequence, ratios) {\n    const averageSize = sum(sequence) / sum(ratios);\n    let error = 0;\n    ratios.forEach((ratio, i) => {\n        error += Math.pow((sequence[i] - ratio * averageSize), 2);\n    });\n    return { averageSize, error };\n}\n// Takes an X,Y point and an array of sizes and scores the point against those ratios.\n// For example for a finder pattern takes the ratio list of 1:1:3:1:1 and checks horizontal, vertical and diagonal ratios\n// against that.\nfunction scorePattern(point, ratios, matrix) {\n    try {\n        const horizontalRun = countBlackWhiteRun(point, { x: -1, y: point.y }, matrix, ratios.length);\n        const verticalRun = countBlackWhiteRun(point, { x: point.x, y: -1 }, matrix, ratios.length);\n        const topLeftPoint = {\n            x: Math.max(0, point.x - point.y) - 1,\n            y: Math.max(0, point.y - point.x) - 1,\n        };\n        const topLeftBottomRightRun = countBlackWhiteRun(point, topLeftPoint, matrix, ratios.length);\n        const bottomLeftPoint = {\n            x: Math.min(matrix.width, point.x + point.y) + 1,\n            y: Math.min(matrix.height, point.y + point.x) + 1,\n        };\n        const bottomLeftTopRightRun = countBlackWhiteRun(point, bottomLeftPoint, matrix, ratios.length);\n        const horzError = scoreBlackWhiteRun(horizontalRun, ratios);\n        const vertError = scoreBlackWhiteRun(verticalRun, ratios);\n        const diagDownError = scoreBlackWhiteRun(topLeftBottomRightRun, ratios);\n        const diagUpError = scoreBlackWhiteRun(bottomLeftTopRightRun, ratios);\n        const ratioError = Math.sqrt(horzError.error * horzError.error +\n            vertError.error * vertError.error +\n            diagDownError.error * diagDownError.error +\n            diagUpError.error * diagUpError.error);\n        const avgSize = (horzError.averageSize + vertError.averageSize + diagDownError.averageSize + diagUpError.averageSize) / 4;\n        const sizeError = (Math.pow((horzError.averageSize - avgSize), 2) +\n            Math.pow((vertError.averageSize - avgSize), 2) +\n            Math.pow((diagDownError.averageSize - avgSize), 2) +\n            Math.pow((diagUpError.averageSize - avgSize), 2)) / avgSize;\n        return ratioError + sizeError;\n    }\n    catch (_a) {\n        return Infinity;\n    }\n}\nfunction locate(matrix) {\n    const finderPatternQuads = [];\n    let activeFinderPatternQuads = [];\n    const alignmentPatternQuads = [];\n    let activeAlignmentPatternQuads = [];\n    for (let y = 0; y <= matrix.height; y++) {\n        let length = 0;\n        let lastBit = false;\n        let scans = [0, 0, 0, 0, 0];\n        for (let x = -1; x <= matrix.width; x++) {\n            const v = matrix.get(x, y);\n            if (v === lastBit) {\n                length++;\n            }\n            else {\n                scans = [scans[1], scans[2], scans[3], scans[4], length];\n                length = 1;\n                lastBit = v;\n                // Do the last 5 color changes ~ match the expected ratio for a finder pattern? 1:1:3:1:1 of b:w:b:w:b\n                const averageFinderPatternBlocksize = sum(scans) / 7;\n                const validFinderPattern = Math.abs(scans[0] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize &&\n                    Math.abs(scans[1] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize &&\n                    Math.abs(scans[2] - 3 * averageFinderPatternBlocksize) < 3 * averageFinderPatternBlocksize &&\n                    Math.abs(scans[3] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize &&\n                    Math.abs(scans[4] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize &&\n                    !v; // And make sure the current pixel is white since finder patterns are bordered in white\n                // Do the last 3 color changes ~ match the expected ratio for an alignment pattern? 1:1:1 of w:b:w\n                const averageAlignmentPatternBlocksize = sum(scans.slice(-3)) / 3;\n                const validAlignmentPattern = Math.abs(scans[2] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize &&\n                    Math.abs(scans[3] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize &&\n                    Math.abs(scans[4] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize &&\n                    v; // Is the current pixel black since alignment patterns are bordered in black\n                if (validFinderPattern) {\n                    // Compute the start and end x values of the large center black square\n                    const endX = x - scans[3] - scans[4];\n                    const startX = endX - scans[2];\n                    const line = { startX, endX, y };\n                    // Is there a quad directly above the current spot? If so, extend it with the new line. Otherwise, create a new quad with\n                    // that line as the starting point.\n                    const matchingQuads = activeFinderPatternQuads.filter(q => (startX >= q.bottom.startX && startX <= q.bottom.endX) ||\n                        (endX >= q.bottom.startX && startX <= q.bottom.endX) ||\n                        (startX <= q.bottom.startX && endX >= q.bottom.endX && ((scans[2] / (q.bottom.endX - q.bottom.startX)) < MAX_QUAD_RATIO &&\n                            (scans[2] / (q.bottom.endX - q.bottom.startX)) > MIN_QUAD_RATIO)));\n                    if (matchingQuads.length > 0) {\n                        matchingQuads[0].bottom = line;\n                    }\n                    else {\n                        activeFinderPatternQuads.push({ top: line, bottom: line });\n                    }\n                }\n                if (validAlignmentPattern) {\n                    // Compute the start and end x values of the center black square\n                    const endX = x - scans[4];\n                    const startX = endX - scans[3];\n                    const line = { startX, y, endX };\n                    // Is there a quad directly above the current spot? If so, extend it with the new line. Otherwise, create a new quad with\n                    // that line as the starting point.\n                    const matchingQuads = activeAlignmentPatternQuads.filter(q => (startX >= q.bottom.startX && startX <= q.bottom.endX) ||\n                        (endX >= q.bottom.startX && startX <= q.bottom.endX) ||\n                        (startX <= q.bottom.startX && endX >= q.bottom.endX && ((scans[2] / (q.bottom.endX - q.bottom.startX)) < MAX_QUAD_RATIO &&\n                            (scans[2] / (q.bottom.endX - q.bottom.startX)) > MIN_QUAD_RATIO)));\n                    if (matchingQuads.length > 0) {\n                        matchingQuads[0].bottom = line;\n                    }\n                    else {\n                        activeAlignmentPatternQuads.push({ top: line, bottom: line });\n                    }\n                }\n            }\n        }\n        finderPatternQuads.push(...activeFinderPatternQuads.filter(q => q.bottom.y !== y && q.bottom.y - q.top.y >= 2));\n        activeFinderPatternQuads = activeFinderPatternQuads.filter(q => q.bottom.y === y);\n        alignmentPatternQuads.push(...activeAlignmentPatternQuads.filter(q => q.bottom.y !== y));\n        activeAlignmentPatternQuads = activeAlignmentPatternQuads.filter(q => q.bottom.y === y);\n    }\n    finderPatternQuads.push(...activeFinderPatternQuads.filter(q => q.bottom.y - q.top.y >= 2));\n    alignmentPatternQuads.push(...activeAlignmentPatternQuads);\n    const finderPatternGroups = finderPatternQuads\n        .filter(q => q.bottom.y - q.top.y >= 2) // All quads must be at least 2px tall since the center square is larger than a block\n        .map(q => {\n        const x = (q.top.startX + q.top.endX + q.bottom.startX + q.bottom.endX) / 4;\n        const y = (q.top.y + q.bottom.y + 1) / 2;\n        if (!matrix.get(Math.round(x), Math.round(y))) {\n            return;\n        }\n        const lengths = [q.top.endX - q.top.startX, q.bottom.endX - q.bottom.startX, q.bottom.y - q.top.y + 1];\n        const size = sum(lengths) / lengths.length;\n        const score = scorePattern({ x: Math.round(x), y: Math.round(y) }, [1, 1, 3, 1, 1], matrix);\n        return { score, x, y, size };\n    })\n        .filter(q => !!q) // Filter out any rejected quads from above\n        .sort((a, b) => a.score - b.score)\n        // Now take the top finder pattern options and try to find 2 other options with a similar size.\n        .map((point, i, finderPatterns) => {\n        if (i > MAX_FINDERPATTERNS_TO_SEARCH) {\n            return null;\n        }\n        const otherPoints = finderPatterns\n            .filter((p, ii) => i !== ii)\n            .map(p => ({ x: p.x, y: p.y, score: p.score + (Math.pow((p.size - point.size), 2)) / point.size, size: p.size }))\n            .sort((a, b) => a.score - b.score);\n        if (otherPoints.length < 2) {\n            return null;\n        }\n        const score = point.score + otherPoints[0].score + otherPoints[1].score;\n        return { points: [point].concat(otherPoints.slice(0, 2)), score };\n    })\n        .filter(q => !!q) // Filter out any rejected finder patterns from above\n        .sort((a, b) => a.score - b.score);\n    if (finderPatternGroups.length === 0) {\n        return null;\n    }\n    const { topRight, topLeft, bottomLeft } = reorderFinderPatterns(finderPatternGroups[0].points[0], finderPatternGroups[0].points[1], finderPatternGroups[0].points[2]);\n    // Now that we've found the three finder patterns we can determine the blockSize and the size of the QR code.\n    // We'll use these to help find the alignment pattern but also later when we do the extraction.\n    let dimension;\n    let moduleSize;\n    try {\n        ({ dimension, moduleSize } = computeDimension(topLeft, topRight, bottomLeft, matrix));\n    }\n    catch (e) {\n        return null;\n    }\n    // Now find the alignment pattern\n    const bottomRightFinderPattern = {\n        x: topRight.x - topLeft.x + bottomLeft.x,\n        y: topRight.y - topLeft.y + bottomLeft.y,\n    };\n    const modulesBetweenFinderPatterns = ((distance(topLeft, bottomLeft) + distance(topLeft, topRight)) / 2 / moduleSize);\n    const correctionToTopLeft = 1 - (3 / modulesBetweenFinderPatterns);\n    const expectedAlignmentPattern = {\n        x: topLeft.x + correctionToTopLeft * (bottomRightFinderPattern.x - topLeft.x),\n        y: topLeft.y + correctionToTopLeft * (bottomRightFinderPattern.y - topLeft.y),\n    };\n    const alignmentPatterns = alignmentPatternQuads\n        .map(q => {\n        const x = (q.top.startX + q.top.endX + q.bottom.startX + q.bottom.endX) / 4;\n        const y = (q.top.y + q.bottom.y + 1) / 2;\n        if (!matrix.get(Math.floor(x), Math.floor(y))) {\n            return;\n        }\n        const lengths = [q.top.endX - q.top.startX, q.bottom.endX - q.bottom.startX, (q.bottom.y - q.top.y + 1)];\n        const size = sum(lengths) / lengths.length;\n        const sizeScore = scorePattern({ x: Math.floor(x), y: Math.floor(y) }, [1, 1, 1], matrix);\n        const score = sizeScore + distance({ x, y }, expectedAlignmentPattern);\n        return { x, y, score };\n    })\n        .filter(v => !!v)\n        .sort((a, b) => a.score - b.score);\n    // If there are less than 15 modules between finder patterns it's a version 1 QR code and as such has no alignmemnt pattern\n    // so we can only use our best guess.\n    const alignmentPattern = modulesBetweenFinderPatterns >= 15 && alignmentPatterns.length ? alignmentPatterns[0] : expectedAlignmentPattern;\n    return {\n        alignmentPattern: { x: alignmentPattern.x, y: alignmentPattern.y },\n        bottomLeft: { x: bottomLeft.x, y: bottomLeft.y },\n        dimension,\n        topLeft: { x: topLeft.x, y: topLeft.y },\n        topRight: { x: topRight.x, y: topRight.y },\n    };\n}\n\nfunction scan(matrix) {\n    const location = locate(matrix);\n    if (!location) {\n        return null;\n    }\n    const extracted = extract(matrix, location);\n    const decoded = decode$2(extracted.matrix);\n    if (!decoded) {\n        return null;\n    }\n    return {\n        binaryData: decoded.bytes,\n        data: decoded.text,\n        chunks: decoded.chunks,\n        location: {\n            topRightCorner: extracted.mappingFunction(location.dimension, 0),\n            topLeftCorner: extracted.mappingFunction(0, 0),\n            bottomRightCorner: extracted.mappingFunction(location.dimension, location.dimension),\n            bottomLeftCorner: extracted.mappingFunction(0, location.dimension),\n            topRightFinderPattern: location.topRight,\n            topLeftFinderPattern: location.topLeft,\n            bottomLeftFinderPattern: location.bottomLeft,\n            bottomRightAlignmentPattern: location.alignmentPattern,\n        },\n    };\n}\nconst defaultOptions = {\n    inversionAttempts: \"attemptBoth\",\n    greyScaleWeights: {\n        red: 0.2126,\n        green: 0.7152,\n        blue: 0.0722,\n        useIntegerApproximation: false,\n    },\n    canOverwriteImage: true,\n};\nfunction mergeObject(target, src) {\n    Object.keys(src).forEach(opt => {\n        target[opt] = src[opt];\n    });\n}\nfunction jsQR(data, width, height, providedOptions = {}) {\n    const options = Object.create(null);\n    mergeObject(options, defaultOptions);\n    mergeObject(options, providedOptions);\n    const shouldInvert = options.inversionAttempts === \"attemptBoth\" || options.inversionAttempts === \"invertFirst\";\n    const tryInvertedFirst = options.inversionAttempts === \"onlyInvert\" || options.inversionAttempts === \"invertFirst\";\n    const { binarized, inverted } = binarize(data, width, height, shouldInvert, options.greyScaleWeights, options.canOverwriteImage);\n    let result = scan(tryInvertedFirst ? inverted : binarized);\n    if (!result && (options.inversionAttempts === \"attemptBoth\" || options.inversionAttempts === \"invertFirst\")) {\n        result = scan(tryInvertedFirst ? binarized : inverted);\n    }\n    return result;\n}\njsQR.default = jsQR;\n\nexport default jsQR;\n//# sourceMappingURL=jsQR.js.map\n","\n\nimport * as Curry from \"./curry.js\";\nimport * as Caml_io from \"./caml_io.js\";\nimport * as Caml_sys from \"./caml_sys.js\";\nimport * as Caml_bytes from \"./caml_bytes.js\";\nimport * as Caml_format from \"./caml_format.js\";\nimport * as Caml_string from \"./caml_string.js\";\nimport * as Caml_exceptions from \"./caml_exceptions.js\";\nimport * as Caml_js_exceptions from \"./caml_js_exceptions.js\";\nimport * as Caml_external_polyfill from \"./caml_external_polyfill.js\";\nimport * as Caml_builtin_exceptions from \"./caml_builtin_exceptions.js\";\nimport * as CamlinternalFormatBasics from \"./camlinternalFormatBasics.js\";\n\nfunction failwith(s) {\n  throw [\n        Caml_builtin_exceptions.failure,\n        s\n      ];\n}\n\nfunction invalid_arg(s) {\n  throw [\n        Caml_builtin_exceptions.invalid_argument,\n        s\n      ];\n}\n\nvar Exit = Caml_exceptions.create(\"Pervasives.Exit\");\n\nfunction abs(x) {\n  if (x >= 0) {\n    return x;\n  } else {\n    return -x | 0;\n  }\n}\n\nfunction lnot(x) {\n  return x ^ -1;\n}\n\nvar min_int = -2147483648;\n\nfunction classify_float(x) {\n  if (isFinite(x)) {\n    if (Math.abs(x) >= 2.22507385850720138e-308) {\n      return /* FP_normal */0;\n    } else if (x !== 0) {\n      return /* FP_subnormal */1;\n    } else {\n      return /* FP_zero */2;\n    }\n  } else if (isNaN(x)) {\n    return /* FP_nan */4;\n  } else {\n    return /* FP_infinite */3;\n  }\n}\n\nfunction char_of_int(n) {\n  if (n < 0 || n > 255) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"char_of_int\"\n        ];\n  }\n  return n;\n}\n\nfunction string_of_bool(b) {\n  if (b) {\n    return \"true\";\n  } else {\n    return \"false\";\n  }\n}\n\nfunction bool_of_string(param) {\n  switch (param) {\n    case \"false\" :\n        return false;\n    case \"true\" :\n        return true;\n    default:\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"bool_of_string\"\n          ];\n  }\n}\n\nfunction bool_of_string_opt(param) {\n  switch (param) {\n    case \"false\" :\n        return false;\n    case \"true\" :\n        return true;\n    default:\n      return ;\n  }\n}\n\nfunction int_of_string_opt(s) {\n  try {\n    return Caml_format.caml_int_of_string(s);\n  }\n  catch (raw_exn){\n    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n    if (exn[0] === Caml_builtin_exceptions.failure) {\n      return ;\n    } else {\n      throw exn;\n    }\n  }\n}\n\nfunction valid_float_lexem(s) {\n  var l = s.length;\n  var _i = 0;\n  while(true) {\n    var i = _i;\n    if (i >= l) {\n      return s + \".\";\n    } else {\n      var match = Caml_string.get(s, i);\n      if (match >= 48) {\n        if (match >= 58) {\n          return s;\n        } else {\n          _i = i + 1 | 0;\n          continue ;\n        }\n      } else if (match !== 45) {\n        return s;\n      } else {\n        _i = i + 1 | 0;\n        continue ;\n      }\n    }\n  };\n}\n\nfunction string_of_float(f) {\n  return valid_float_lexem(Caml_format.caml_format_float(\"%.12g\", f));\n}\n\nfunction float_of_string_opt(s) {\n  try {\n    return Caml_format.caml_float_of_string(s);\n  }\n  catch (raw_exn){\n    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n    if (exn[0] === Caml_builtin_exceptions.failure) {\n      return ;\n    } else {\n      throw exn;\n    }\n  }\n}\n\nfunction $at(l1, l2) {\n  if (l1) {\n    return /* :: */[\n            l1[0],\n            $at(l1[1], l2)\n          ];\n  } else {\n    return l2;\n  }\n}\n\nvar stdin = Caml_io.stdin;\n\nvar stdout = Caml_io.stdout;\n\nvar stderr = Caml_io.stderr;\n\nfunction open_out_gen(mode, perm, name) {\n  var c = Caml_external_polyfill.resolve(\"caml_ml_open_descriptor_out\")(Caml_external_polyfill.resolve(\"caml_sys_open\")(name, mode, perm));\n  Caml_external_polyfill.resolve(\"caml_ml_set_channel_name\")(c, name);\n  return c;\n}\n\nfunction open_out(name) {\n  return open_out_gen(/* :: */[\n              /* Open_wronly */1,\n              /* :: */[\n                /* Open_creat */3,\n                /* :: */[\n                  /* Open_trunc */4,\n                  /* :: */[\n                    /* Open_text */7,\n                    /* [] */0\n                  ]\n                ]\n              ]\n            ], 438, name);\n}\n\nfunction open_out_bin(name) {\n  return open_out_gen(/* :: */[\n              /* Open_wronly */1,\n              /* :: */[\n                /* Open_creat */3,\n                /* :: */[\n                  /* Open_trunc */4,\n                  /* :: */[\n                    /* Open_binary */6,\n                    /* [] */0\n                  ]\n                ]\n              ]\n            ], 438, name);\n}\n\nfunction flush_all(param) {\n  var _param = Caml_io.caml_ml_out_channels_list(/* () */0);\n  while(true) {\n    var param$1 = _param;\n    if (param$1) {\n      try {\n        Caml_io.caml_ml_flush(param$1[0]);\n      }\n      catch (raw_exn){\n        var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n        if (exn[0] !== Caml_builtin_exceptions.sys_error) {\n          throw exn;\n        }\n        \n      }\n      _param = param$1[1];\n      continue ;\n    } else {\n      return /* () */0;\n    }\n  };\n}\n\nfunction output_bytes(oc, s) {\n  return Caml_external_polyfill.resolve(\"caml_ml_output_bytes\")(oc, s, 0, s.length);\n}\n\nfunction output_string(oc, s) {\n  return Caml_io.caml_ml_output(oc, s, 0, s.length);\n}\n\nfunction output(oc, s, ofs, len) {\n  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"output\"\n        ];\n  }\n  return Caml_external_polyfill.resolve(\"caml_ml_output_bytes\")(oc, s, ofs, len);\n}\n\nfunction output_substring(oc, s, ofs, len) {\n  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"output_substring\"\n        ];\n  }\n  return Caml_io.caml_ml_output(oc, s, ofs, len);\n}\n\nfunction output_value(chan, v) {\n  return Caml_external_polyfill.resolve(\"caml_output_value\")(chan, v, /* [] */0);\n}\n\nfunction close_out(oc) {\n  Caml_io.caml_ml_flush(oc);\n  return Caml_external_polyfill.resolve(\"caml_ml_close_channel\")(oc);\n}\n\nfunction close_out_noerr(oc) {\n  try {\n    Caml_io.caml_ml_flush(oc);\n  }\n  catch (exn){\n    \n  }\n  try {\n    return Caml_external_polyfill.resolve(\"caml_ml_close_channel\")(oc);\n  }\n  catch (exn$1){\n    return /* () */0;\n  }\n}\n\nfunction open_in_gen(mode, perm, name) {\n  var c = Caml_external_polyfill.resolve(\"caml_ml_open_descriptor_in\")(Caml_external_polyfill.resolve(\"caml_sys_open\")(name, mode, perm));\n  Caml_external_polyfill.resolve(\"caml_ml_set_channel_name\")(c, name);\n  return c;\n}\n\nfunction open_in(name) {\n  return open_in_gen(/* :: */[\n              /* Open_rdonly */0,\n              /* :: */[\n                /* Open_text */7,\n                /* [] */0\n              ]\n            ], 0, name);\n}\n\nfunction open_in_bin(name) {\n  return open_in_gen(/* :: */[\n              /* Open_rdonly */0,\n              /* :: */[\n                /* Open_binary */6,\n                /* [] */0\n              ]\n            ], 0, name);\n}\n\nfunction input(ic, s, ofs, len) {\n  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"input\"\n        ];\n  }\n  return Caml_external_polyfill.resolve(\"caml_ml_input\")(ic, s, ofs, len);\n}\n\nfunction unsafe_really_input(ic, s, _ofs, _len) {\n  while(true) {\n    var len = _len;\n    var ofs = _ofs;\n    if (len <= 0) {\n      return /* () */0;\n    } else {\n      var r = Caml_external_polyfill.resolve(\"caml_ml_input\")(ic, s, ofs, len);\n      if (r === 0) {\n        throw Caml_builtin_exceptions.end_of_file;\n      }\n      _len = len - r | 0;\n      _ofs = ofs + r | 0;\n      continue ;\n    }\n  };\n}\n\nfunction really_input(ic, s, ofs, len) {\n  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"really_input\"\n        ];\n  }\n  return unsafe_really_input(ic, s, ofs, len);\n}\n\nfunction really_input_string(ic, len) {\n  var s = Caml_bytes.caml_create_bytes(len);\n  really_input(ic, s, 0, len);\n  return Caml_bytes.bytes_to_string(s);\n}\n\nfunction input_line(chan) {\n  var build_result = function (buf, _pos, _param) {\n    while(true) {\n      var param = _param;\n      var pos = _pos;\n      if (param) {\n        var hd = param[0];\n        var len = hd.length;\n        Caml_bytes.caml_blit_bytes(hd, 0, buf, pos - len | 0, len);\n        _param = param[1];\n        _pos = pos - len | 0;\n        continue ;\n      } else {\n        return buf;\n      }\n    };\n  };\n  var scan = function (_accu, _len) {\n    while(true) {\n      var len = _len;\n      var accu = _accu;\n      var n = Caml_external_polyfill.resolve(\"caml_ml_input_scan_line\")(chan);\n      if (n === 0) {\n        if (accu) {\n          return build_result(Caml_bytes.caml_create_bytes(len), len, accu);\n        } else {\n          throw Caml_builtin_exceptions.end_of_file;\n        }\n      } else if (n > 0) {\n        var res = Caml_bytes.caml_create_bytes(n - 1 | 0);\n        Caml_external_polyfill.resolve(\"caml_ml_input\")(chan, res, 0, n - 1 | 0);\n        Caml_external_polyfill.resolve(\"caml_ml_input_char\")(chan);\n        if (accu) {\n          var len$1 = (len + n | 0) - 1 | 0;\n          return build_result(Caml_bytes.caml_create_bytes(len$1), len$1, /* :: */[\n                      res,\n                      accu\n                    ]);\n        } else {\n          return res;\n        }\n      } else {\n        var beg = Caml_bytes.caml_create_bytes(-n | 0);\n        Caml_external_polyfill.resolve(\"caml_ml_input\")(chan, beg, 0, -n | 0);\n        _len = len - n | 0;\n        _accu = /* :: */[\n          beg,\n          accu\n        ];\n        continue ;\n      }\n    };\n  };\n  return Caml_bytes.bytes_to_string(scan(/* [] */0, 0));\n}\n\nfunction close_in_noerr(ic) {\n  try {\n    return Caml_external_polyfill.resolve(\"caml_ml_close_channel\")(ic);\n  }\n  catch (exn){\n    return /* () */0;\n  }\n}\n\nfunction print_char(c) {\n  return Caml_io.caml_ml_output_char(stdout, c);\n}\n\nfunction print_string(s) {\n  return output_string(stdout, s);\n}\n\nfunction print_bytes(s) {\n  return output_bytes(stdout, s);\n}\n\nfunction print_int(i) {\n  return output_string(stdout, String(i));\n}\n\nfunction print_float(f) {\n  return output_string(stdout, valid_float_lexem(Caml_format.caml_format_float(\"%.12g\", f)));\n}\n\nfunction print_newline(param) {\n  Caml_io.caml_ml_output_char(stdout, /* \"\\n\" */10);\n  return Caml_io.caml_ml_flush(stdout);\n}\n\nfunction prerr_char(c) {\n  return Caml_io.caml_ml_output_char(stderr, c);\n}\n\nfunction prerr_string(s) {\n  return output_string(stderr, s);\n}\n\nfunction prerr_bytes(s) {\n  return output_bytes(stderr, s);\n}\n\nfunction prerr_int(i) {\n  return output_string(stderr, String(i));\n}\n\nfunction prerr_float(f) {\n  return output_string(stderr, valid_float_lexem(Caml_format.caml_format_float(\"%.12g\", f)));\n}\n\nfunction prerr_newline(param) {\n  Caml_io.caml_ml_output_char(stderr, /* \"\\n\" */10);\n  return Caml_io.caml_ml_flush(stderr);\n}\n\nfunction read_line(param) {\n  Caml_io.caml_ml_flush(stdout);\n  return input_line(stdin);\n}\n\nfunction read_int(param) {\n  return Caml_format.caml_int_of_string((Caml_io.caml_ml_flush(stdout), input_line(stdin)));\n}\n\nfunction read_int_opt(param) {\n  return int_of_string_opt((Caml_io.caml_ml_flush(stdout), input_line(stdin)));\n}\n\nfunction read_float(param) {\n  return Caml_format.caml_float_of_string((Caml_io.caml_ml_flush(stdout), input_line(stdin)));\n}\n\nfunction read_float_opt(param) {\n  return float_of_string_opt((Caml_io.caml_ml_flush(stdout), input_line(stdin)));\n}\n\nfunction string_of_format(param) {\n  return param[1];\n}\n\nfunction $caret$caret(param, param$1) {\n  return /* Format */[\n          CamlinternalFormatBasics.concat_fmt(param[0], param$1[0]),\n          param[1] + (\"%,\" + param$1[1])\n        ];\n}\n\nvar exit_function = {\n  contents: flush_all\n};\n\nfunction at_exit(f) {\n  var g = exit_function.contents;\n  exit_function.contents = (function (param) {\n      Curry._1(f, /* () */0);\n      return Curry._1(g, /* () */0);\n    });\n  return /* () */0;\n}\n\nfunction do_at_exit(param) {\n  return Curry._1(exit_function.contents, /* () */0);\n}\n\nfunction exit(retcode) {\n  do_at_exit(/* () */0);\n  return Caml_sys.caml_sys_exit(retcode);\n}\n\nvar max_int = 2147483647;\n\nvar infinity = Infinity;\n\nvar neg_infinity = -Infinity;\n\nvar max_float = 1.79769313486231571e+308;\n\nvar min_float = 2.22507385850720138e-308;\n\nvar epsilon_float = 2.22044604925031308e-16;\n\nvar flush = Caml_io.caml_ml_flush;\n\nvar output_char = Caml_io.caml_ml_output_char;\n\nvar output_byte = Caml_io.caml_ml_output_char;\n\nfunction output_binary_int(prim, prim$1) {\n  return Caml_external_polyfill.resolve(\"caml_ml_output_int\")(prim, prim$1);\n}\n\nfunction seek_out(prim, prim$1) {\n  return Caml_external_polyfill.resolve(\"caml_ml_seek_out\")(prim, prim$1);\n}\n\nfunction pos_out(prim) {\n  return Caml_external_polyfill.resolve(\"caml_ml_pos_out\")(prim);\n}\n\nfunction out_channel_length(prim) {\n  return Caml_external_polyfill.resolve(\"caml_ml_channel_size\")(prim);\n}\n\nfunction set_binary_mode_out(prim, prim$1) {\n  return Caml_external_polyfill.resolve(\"caml_ml_set_binary_mode\")(prim, prim$1);\n}\n\nfunction input_char(prim) {\n  return Caml_external_polyfill.resolve(\"caml_ml_input_char\")(prim);\n}\n\nfunction input_byte(prim) {\n  return Caml_external_polyfill.resolve(\"caml_ml_input_char\")(prim);\n}\n\nfunction input_binary_int(prim) {\n  return Caml_external_polyfill.resolve(\"caml_ml_input_int\")(prim);\n}\n\nfunction input_value(prim) {\n  return Caml_external_polyfill.resolve(\"caml_input_value\")(prim);\n}\n\nfunction seek_in(prim, prim$1) {\n  return Caml_external_polyfill.resolve(\"caml_ml_seek_in\")(prim, prim$1);\n}\n\nfunction pos_in(prim) {\n  return Caml_external_polyfill.resolve(\"caml_ml_pos_in\")(prim);\n}\n\nfunction in_channel_length(prim) {\n  return Caml_external_polyfill.resolve(\"caml_ml_channel_size\")(prim);\n}\n\nfunction close_in(prim) {\n  return Caml_external_polyfill.resolve(\"caml_ml_close_channel\")(prim);\n}\n\nfunction set_binary_mode_in(prim, prim$1) {\n  return Caml_external_polyfill.resolve(\"caml_ml_set_binary_mode\")(prim, prim$1);\n}\n\nfunction LargeFile_seek_out(prim, prim$1) {\n  return Caml_external_polyfill.resolve(\"caml_ml_seek_out_64\")(prim, prim$1);\n}\n\nfunction LargeFile_pos_out(prim) {\n  return Caml_external_polyfill.resolve(\"caml_ml_pos_out_64\")(prim);\n}\n\nfunction LargeFile_out_channel_length(prim) {\n  return Caml_external_polyfill.resolve(\"caml_ml_channel_size_64\")(prim);\n}\n\nfunction LargeFile_seek_in(prim, prim$1) {\n  return Caml_external_polyfill.resolve(\"caml_ml_seek_in_64\")(prim, prim$1);\n}\n\nfunction LargeFile_pos_in(prim) {\n  return Caml_external_polyfill.resolve(\"caml_ml_pos_in_64\")(prim);\n}\n\nfunction LargeFile_in_channel_length(prim) {\n  return Caml_external_polyfill.resolve(\"caml_ml_channel_size_64\")(prim);\n}\n\nvar LargeFile = {\n  seek_out: LargeFile_seek_out,\n  pos_out: LargeFile_pos_out,\n  out_channel_length: LargeFile_out_channel_length,\n  seek_in: LargeFile_seek_in,\n  pos_in: LargeFile_pos_in,\n  in_channel_length: LargeFile_in_channel_length\n};\n\nexport {\n  invalid_arg ,\n  failwith ,\n  Exit ,\n  abs ,\n  max_int ,\n  min_int ,\n  lnot ,\n  infinity ,\n  neg_infinity ,\n  max_float ,\n  min_float ,\n  epsilon_float ,\n  classify_float ,\n  char_of_int ,\n  string_of_bool ,\n  bool_of_string ,\n  bool_of_string_opt ,\n  int_of_string_opt ,\n  string_of_float ,\n  float_of_string_opt ,\n  $at ,\n  stdin ,\n  stdout ,\n  stderr ,\n  print_char ,\n  print_string ,\n  print_bytes ,\n  print_int ,\n  print_float ,\n  print_newline ,\n  prerr_char ,\n  prerr_string ,\n  prerr_bytes ,\n  prerr_int ,\n  prerr_float ,\n  prerr_newline ,\n  read_line ,\n  read_int ,\n  read_int_opt ,\n  read_float ,\n  read_float_opt ,\n  open_out ,\n  open_out_bin ,\n  open_out_gen ,\n  flush ,\n  flush_all ,\n  output_char ,\n  output_string ,\n  output_bytes ,\n  output ,\n  output_substring ,\n  output_byte ,\n  output_binary_int ,\n  output_value ,\n  seek_out ,\n  pos_out ,\n  out_channel_length ,\n  close_out ,\n  close_out_noerr ,\n  set_binary_mode_out ,\n  open_in ,\n  open_in_bin ,\n  open_in_gen ,\n  input_char ,\n  input_line ,\n  input ,\n  really_input ,\n  really_input_string ,\n  input_byte ,\n  input_binary_int ,\n  input_value ,\n  seek_in ,\n  pos_in ,\n  in_channel_length ,\n  close_in ,\n  close_in_noerr ,\n  set_binary_mode_in ,\n  LargeFile ,\n  string_of_format ,\n  $caret$caret ,\n  exit ,\n  at_exit ,\n  valid_float_lexem ,\n  unsafe_really_input ,\n  do_at_exit ,\n  \n}\n/* No side effect */\n","// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE\n\nimport * as JsQr$QueerLoop from \"./JsQr.bs.js\";\n\nself.onmessage = (function (e) {\n    var match = e.data;\n    var maybeCode = JsQr$QueerLoop.jsQR(match[0], match[1], match[2], match[3]);\n    postMessage(maybeCode);\n    return /* () */0;\n  });\n\nexport {\n  \n}\n/*  Not a pure module */\n","// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE\n\nimport * as $$Array from \"../node_modules/bs-platform/lib/es6/array.js\";\nimport * as JsqrEs6 from \"jsqr-es6\";\nimport * as Pervasives from \"../node_modules/bs-platform/lib/es6/pervasives.js\";\nimport * as Caml_option from \"../node_modules/bs-platform/lib/es6/caml_option.js\";\n\nfunction getPointAsFloats(p) {\n  return /* tuple */[\n          p.x,\n          p.y\n        ];\n}\n\nfunction getMinAndMax(ary) {\n  var currentMin = {\n    contents: Pervasives.infinity\n  };\n  var currentMax = {\n    contents: Pervasives.neg_infinity\n  };\n  $$Array.iter((function (x) {\n          if (x < currentMin.contents) {\n            currentMin.contents = x;\n          }\n          if (x > currentMax.contents) {\n            currentMax.contents = x;\n            return /* () */0;\n          } else {\n            return 0;\n          }\n        }), ary);\n  return /* tuple */[\n          currentMin.contents,\n          currentMax.contents\n        ];\n}\n\nfunction extractAABB(loc) {\n  var match = getPointAsFloats(loc.topLeftCorner);\n  var match$1 = getPointAsFloats(loc.topRightCorner);\n  var match$2 = getPointAsFloats(loc.bottomRightCorner);\n  var match$3 = getPointAsFloats(loc.bottomLeftCorner);\n  var match$4 = getMinAndMax(/* array */[\n        match[0],\n        match$1[0],\n        match$2[0],\n        match$3[0]\n      ]);\n  var minX = match$4[0];\n  var match$5 = getMinAndMax(/* array */[\n        match[1],\n        match$1[1],\n        match$2[1],\n        match$3[1]\n      ]);\n  var minY = match$5[0];\n  return {\n          x: minX | 0,\n          y: minY | 0,\n          w: Math.ceil(match$4[1] - minX) | 0,\n          h: Math.ceil(match$5[1] - minY) | 0\n        };\n}\n\nfunction string_of_invertOptions(param) {\n  switch (param) {\n    case /* AttemptBoth */0 :\n        return \"attemptBoth\";\n    case /* DontInvert */1 :\n        return \"dontInvert\";\n    case /* OnlyInvert */2 :\n        return \"onlyInvert\";\n    case /* InvertFirst */3 :\n        return \"invertFirst\";\n    \n  }\n}\n\nfunction jsQR(d, w, h, invertOptions) {\n  var optString = string_of_invertOptions(invertOptions);\n  return Caml_option.nullable_to_opt(JsqrEs6.default(d, w, h, {\n                  inversionAttempts: optString,\n                  canOverwriteImage: true\n                }));\n}\n\nexport {\n  getPointAsFloats ,\n  getMinAndMax ,\n  extractAABB ,\n  string_of_invertOptions ,\n  jsQR ,\n  \n}\n/* jsqr-es6 Not a pure module */\n"],"names":["id","contents","create","str","v","tag","undefinedHeader","nullable_to_opt","x","undefined","block","nid","block$1","some","Caml_exceptions.create","BitMatrix","[object Object]","width","height","Uint8ClampedArray","data","this","length","y","left","top","set","numBetween","value","min","max","Matrix","buffer","bufferSize","Error","BitStream","bytes","byteOffset","bitOffset","numBits","available","toString","result","bitsLeft","toRead","bitsToNotRead","mask","Mode","ModeByte","decodeNumeric","stream","size","text","characterCountSize","readBits","num","a","Math","floor","b","c","push","AlphanumericCharacterCodes","decodeAlphanumeric","charCodeAt","decodeByte","i","decodeURIComponent","map","substr","join","_a","decodeKanji","k","TextDecoder","decode","Uint8Array","from","GenericGFPoly","field","coefficients","coefficientsLength","firstNonZero","zero","degree","other","isZero","smallerCoefficients","largerCoefficients","sumDiff","lengthDiff","addOrSubtractGF","scalar","product","multiply","aCoefficients","aLength","bCoefficients","bLength","aCoeff","j","coefficient","getCoefficient","forEach","GenericGF","primitive","genBase","generatorBase","expTable","Array","logTable","one","decode$1","twoS","outputBytes","poly","syndromeCoefficients","error","s","evaluation","evaluateAt","exp","syndrome","sigmaOmega","R","rLast","r","tLast","t","rLastLast","tLastLast","q","denominatorLeadingTerm","dltInverse","inverse","degreeDiff","scale","addOrSubtract","buildMonomial","multiplyByMonomial","multiplyPoly","sigmaTildeAtZero","runEuclideanAlgorithm","errorLocations","errorLocator","numErrors","errorCount","findErrorLocations","errorMagnitudes","errorEvaluator","xiInverse","denominator","findErrorMagnitudes","position","log","VERSIONS","infoBits","versionNumber","alignmentPatternCenters","errorCorrectionLevels","ecCodewordsPerBlock","ecBlocks","numBlocks","dataCodewordsPerBlock","numBitsDiffering","z","bitCount","pushBit","bit","byte","FORMAT_INFO_TABLE","bits","formatInfo","errorCorrectionLevel","dataMask","DATA_MASKS","p","readCodewords","matrix","version","dimension","functionPatternMask","createEmpty","setRegion","buildFunctionPatternMask","codewords","currentByte","bitsRead","readingUp","columnIndex","columnOffset","get","decodeMatrix","provisionalVersion","topRightVersionBits","bottomLeftVersionBits","bestVersion","bestDifference","Infinity","difference","readVersion","topLeftFormatInfoBits","topRightBottomRightFormatInfoBits","bestFormatInfo","readFormatInformation","dataBlocks","ecLevel","ecInfo","totalCodewords","numDataCodewords","slice","shortBlockSize","dataBlock","shift","smallBlockCount","largeBlockCount","getDataBlocks","totalBytes","reduce","resultBytes","resultIndex","correctedBytes","chunks","mode","Terminator","ECI","type","assignmentNumber","Numeric","numericResult","Alphanumeric","alphanumericResult","Byte","byteResult","Kanji","kanjiResult","squareToQuadrilateral","p1","p2","p3","p4","dx3","dy3","a11","a12","a13","a21","a22","a23","a31","a32","a33","dx1","dx2","dy1","dy2","extract","image","location","qToS","sToQ","quadrilateralToSquare","topLeft","topRight","alignmentPattern","bottomLeft","transform","mappingFunction","sourcePixel","distance","sqrt","pow","sum","values","countBlackWhiteRunTowardsPoint","origin","end","switchPoints","steep","abs","fromX","fromY","toX","toY","dx","dy","xStep","yStep","currentPixel","realX","realY","distances","countBlackWhiteRun","rise","run","towardsEnd","ceil","awayFromEnd","middleValue","concat","scoreBlackWhiteRun","sequence","ratios","averageSize","ratio","scorePattern","point","horizontalRun","verticalRun","topLeftBottomRightRun","bottomLeftTopRightRun","horzError","vertError","diagDownError","diagUpError","ratioError","avgSize","locate","finderPatternQuads","activeFinderPatternQuads","alignmentPatternQuads","activeAlignmentPatternQuads","lastBit","scans","averageFinderPatternBlocksize","validFinderPattern","averageAlignmentPatternBlocksize","validAlignmentPattern","endX","startX","line","matchingQuads","filter","bottom","finderPatternGroups","round","lengths","score","sort","finderPatterns","otherPoints","ii","points","pattern1","pattern2","pattern3","oneTwoDistance","twoThreeDistance","oneThreeDistance","reorderFinderPatterns","moduleSize","topDimension","sideDimension","computeDimension","e","bottomRightFinderPattern","modulesBetweenFinderPatterns","correctionToTopLeft","expectedAlignmentPattern","alignmentPatterns","scan","extracted","decoded","decode$2","binaryData","topRightCorner","topLeftCorner","bottomRightCorner","bottomLeftCorner","topRightFinderPattern","topLeftFinderPattern","bottomLeftFinderPattern","bottomRightAlignmentPattern","defaultOptions","inversionAttempts","greyScaleWeights","red","green","blue","useIntegerApproximation","canOverwriteImage","mergeObject","target","src","Object","keys","opt","jsQR","providedOptions","options","shouldInvert","tryInvertedFirst","binarized","inverted","returnInverted","greyscaleWeights","pixelCount","greyscaleBuffer","bufferOffset","greyscalePixels","pixelPosition","g","horizontalRegionCount","verticalRegionCount","blackPointsCount","blackPointsBuffer","blackPoints","verticalRegion","hortizontalRegion","pixelLumosity","average","blackBias","averageNeighborBlackPoint","binarizedBuffer","invertedBuffer","xRegion","yRegion","threshold","lum","binarize","default","self","onmessage","d","w","h","invertOptions","match","maybeCode","Caml_option.nullable_to_opt","JsqrEs6.default","param","string_of_invertOptions","postMessage"],"mappings":"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"}